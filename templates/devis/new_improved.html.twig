{% extends 'base.html.twig' %}

{% block title %}Nouveau Devis{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet">
    <style>
        .form-section {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            border: 1px solid #e3e6f0;
        }
        .form-section-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 10px 10px 0 0;
            font-weight: 600;
            font-size: 1.1rem;
        }
        .form-section-body {
            padding: 2rem;
        }
        .readonly-field {
            background-color: #f8f9fa !important;
            border: 1px solid #e9ecef !important;
            color: #6c757d !important;
        }
        .add-client-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            color: white;
            font-size: 16px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        .add-client-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .contact-dropdown {
            margin-top: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }
        .notes-section {
            border-top: 3px solid #17a2b8;
        }
        .private-notes {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 1rem;
        }
        .client-selector-container {
            position: relative;
        }
        .projects-dropdown {
            background: #e7f3ff;
            border: 1px solid #bee5eb;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }
        
        /* Correction z-index for dropdown menus */
        .navbar .dropdown-menu {
            z-index: 9999 !important;
        }
        
        /* Ensure sticky panel doesn't interfere with dropdowns */
        .sticky-top {
            z-index: 1020;
        }
        
        /* Bootstrap dropdown should be above sticky elements */
        .dropdown-menu {
            z-index: 9999 !important;
        }

        /* Styles pour les adresses des contacts */
        .address-display {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            font-size: 0.9rem;
        }
        
        /* Forcer Select2 à prendre toute la largeur dans les conteneurs flex */
        .d-flex .select2-container {
            flex-grow: 1 !important;
            min-width: 0 !important;
            width: auto !important;
        }
        
        .d-flex .select2-container .select2-selection {
            width: 100% !important;
        }
        
        .address-display .current-address {
            line-height: 1.4;
        }
        
        .address-edit-section {
            background-color: #fff;
            border: 2px solid #007bff;
            border-radius: 8px;
            padding: 15px;
        }
        
        .btn-address {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }

    </style>
{% endblock %}

{% block body %}
<div class="container-fluid px-4">
    <!-- En-tête -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">
            <i class="fas fa-file-invoice me-2 text-primary"></i>Nouveau Devis
        </h1>
        <div>
            <a href="{{ path('app_devis_index') }}" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-1"></i>Retour à la liste
            </a>
        </div>
    </div>

    <form method="post" id="devis-form">
        <div class="row">
            <div class="col-lg-8">
                <!-- Section 1: Informations générales -->
                <div class="form-section">
                    <div class="form-section-header">
                        <i class="fas fa-info-circle me-2"></i>Informations générales
                    </div>
                    <div class="form-section-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Numéro de devis</label>
                                    <input type="text" class="form-control readonly-field" 
                                           value="{{ next_devis_number }}" readonly>
                                    <small class="text-muted">Généré automatiquement</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Statut</label>
                                    <input type="text" class="form-control readonly-field" 
                                           value="Brouillon" readonly>
                                    <small class="text-muted">Non modifiable</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Commercial</label>
                                    <input type="text" class="form-control readonly-field" 
                                           value="{{ app.user.prenom }} {{ app.user.nom }}" readonly>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="date_creation" class="form-label">Date de création</label>
                                    <input type="date" class="form-control" id="date_creation" 
                                           name="date_creation" value="{{ 'now'|date('Y-m-d') }}">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="date_validite" class="form-label">Date de validité</label>
                                    <input type="date" class="form-control" id="date_validite" 
                                           name="date_validite" value="{{ '+30 days'|date('Y-m-d') }}">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="delai_livraison" class="form-label">Délai de livraison</label>
                                    <input type="text" class="form-control" id="delai_livraison" name="delai_livraison" 
                                           placeholder="Ex: 2-3 semaines">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Section 2: Client/Prospect -->
                <div class="form-section">
                    <div class="form-section-header">
                        <i class="fas fa-user-tie me-2"></i>Client / Prospect
                    </div>
                    <div class="form-section-body">
                        <div class="client-selector-container">
                            <label for="prospect" class="form-label">Sélectionner un client/prospect *</label>
                            <div class="d-flex align-items-center gap-2" style="width: 100% !important;">
                                {# Champ caché pour synchroniser avec le formulaire #}
                                <input type="hidden" id="client_field" name="client" value="">
                                <select class="form-select" id="prospect" name="prospect" style="flex-grow: 1 !important; min-width: 0;">
                                    <option value="">Choisir un client/prospect...</option>
                                    {% for prospect in prospects %}
                                        {% set contacts = [] %}
                                        {% set defaultContactFacturation = null %}
                                        {% set defaultContactLivraison = null %}
                                        
                                        {# Identifier les contacts par défaut #}
                                        {% if prospect.contactFacturationDefault %}
                                            {% set defaultContactFacturation = prospect.contactFacturationDefault.id %}
                                        {% endif %}
                                        {% if prospect.contactLivraisonDefault %}
                                            {% set defaultContactLivraison = prospect.contactLivraisonDefault.id %}
                                        {% endif %}
                                        
                                        {# Récupérer TOUS les contacts du client avec info sur les contacts par défaut et adresses #}
                                        {% for contact in prospect.contacts %}
                                            {% set adresse = null %}
                                            {% if contact.adresse %}
                                                {% set adresse = {
                                                    'id': contact.adresse.id,
                                                    'ligne1': contact.adresse.ligne1,
                                                    'ligne2': contact.adresse.ligne2,
                                                    'codePostal': contact.adresse.codePostal,
                                                    'ville': contact.adresse.ville,
                                                    'pays': contact.adresse.pays ?? 'France'
                                                } %}
                                            {% endif %}
                                            
                                            {% set contacts = contacts|merge([{
                                                'id': contact.id,
                                                'nom': contact.nom,
                                                'prenom': contact.prenom,
                                                'fonction': contact.fonction ?? 'Contact',
                                                'is_facturation_default': contact.isFacturationDefault,
                                                'is_livraison_default': contact.isLivraisonDefault,
                                                'adresse': adresse
                                            }]) %}
                                        {% endfor %}
                                        <option value="{{ prospect.id }}" 
                                                data-contacts="{{ contacts|json_encode }}"
                                                data-projects="[]"
                                                data-default-facturation="{{ defaultContactFacturation }}"
                                                data-default-livraison="{{ defaultContactLivraison }}">
                                            {% if prospect.formeJuridique %}
                                                {{ prospect.formeJuridique.nom }} 
                                            {% endif %}
                                            {% if prospect.nomEntreprise %}
                                                {{ prospect.nomEntreprise }}
                                            {% else %}
                                                {{ prospect.nom }}{% if prospect.prenom %} {{ prospect.prenom }}{% endif %}
                                            {% endif %}
                                        </option>
                                    {% endfor %}
                                </select>
                                <button type="button" class="add-client-btn" id="add-client-btn" 
                                        title="Ajouter un nouveau client" style="flex-shrink: 0 !important;">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Menu contacts (apparaît après sélection client) -->
                        <div id="contact-selection" class="contact-dropdown" style="display: none;">
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="contact_defaut" class="form-label">Contact en charge du projet</label>
                                    <div class="d-flex align-items-center gap-2" style="width: 100% !important;">
                                        <select class="form-select" id="contact_defaut" name="contact_defaut" style="flex-grow: 1 !important; min-width: 0;">
                                            <option value="">Choisir un contact...</option>
                                        </select>
                                        <button type="button" class="add-client-btn" id="add-contact-btn" 
                                                title="Ajouter un nouveau contact" style="flex-shrink: 0 !important;">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                    <!-- Adresse du contact en charge du projet -->
                                    <div id="adresse-contact-projet" class="mt-3" style="display: none;">
                                        <label class="form-label text-muted">Adresse de livraison pour ce projet</label>
                                        <div class="address-edit-section p-3 bg-light rounded border">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <label class="form-label">Adresse</label>
                                                    <input type="text" class="form-control mb-2" id="adresse_projet_ligne1" 
                                                           name="adresse_projet_ligne1" placeholder="Ex: 123 rue de la Paix">
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Code postal</label>
                                                    <input type="text" class="form-control mb-2" id="adresse_projet_code_postal" 
                                                           name="adresse_projet_code_postal" placeholder="31000">
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Ville</label>
                                                    <input type="text" class="form-control mb-2" id="adresse_projet_ville" 
                                                           name="adresse_projet_ville" placeholder="Toulouse">
                                                </div>
                                            </div>
                                            <div class="mt-2">
                                                <small class="text-muted" id="address-status-projet">Modifiable pour ce projet uniquement</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="contact_facturation" class="form-label">Contact de facturation</label>
                                    <div class="d-flex align-items-center gap-2" style="width: 100% !important;">
                                        <select class="form-select" id="contact_facturation" name="contact_facturation" style="flex-grow: 1 !important; min-width: 0;">
                                            <option value="">Choisir un contact...</option>
                                        </select>
                                        <button type="button" class="add-client-btn" id="add-contact-facturation-btn" 
                                                title="Ajouter un nouveau contact de facturation" style="flex-shrink: 0 !important;">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                    <!-- Adresse du contact de facturation -->
                                    <div id="adresse-contact-facturation" class="mt-3" style="display: none;">
                                        <label class="form-label text-muted">Adresse de facturation pour ce projet</label>
                                        <div class="address-edit-section p-3 bg-light rounded border">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <label class="form-label">Adresse</label>
                                                    <input type="text" class="form-control mb-2" id="adresse_facturation_ligne1" 
                                                           name="adresse_facturation_ligne1" placeholder="Ex: 123 rue de la Paix">
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Code postal</label>
                                                    <input type="text" class="form-control mb-2" id="adresse_facturation_code_postal" 
                                                           name="adresse_facturation_code_postal" placeholder="31000">
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Ville</label>
                                                    <input type="text" class="form-control mb-2" id="adresse_facturation_ville" 
                                                           name="adresse_facturation_ville" placeholder="Toulouse">
                                                </div>
                                            </div>
                                            <div class="mt-2">
                                                <small class="text-muted" id="address-status-facturation">Modifiable pour ce projet uniquement</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Menu projets existants (apparaît après sélection client) -->
                        <div id="projects-selection" class="projects-dropdown" style="display: none;">
                            <label for="projet_existant" class="form-label">
                                <i class="fas fa-folder me-1"></i>Importer d'un projet existant
                            </label>
                            <select class="form-select" id="projet_existant" name="projet_existant">
                                <option value="">Nouveau projet...</option>
                            </select>
                            <small class="text-muted">Sélectionnez un projet existant pour importer ses informations</small>
                        </div>
                    </div>
                </div>

                <!-- Section 3: Conditions commerciales -->
                <div class="form-section">
                    <div class="form-section-header">
                        <i class="fas fa-handshake me-2"></i>Conditions commerciales
                    </div>
                    <div class="form-section-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="conditions_reglement" class="form-label">Conditions de règlement</label>
                                    <select class="form-select" id="conditions_reglement" name="conditions_reglement">
                                        <option value="30_jours">30 jours net</option>
                                        <option value="60_jours">60 jours net</option>
                                        <option value="comptant">Comptant</option>
                                        <option value="30_jours_fm">30 jours fin de mois</option>
                                        <option value="45_jours_fm">45 jours fin de mois</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="mode_reglement" class="form-label">Mode de règlement</label>
                                    <select class="form-select" id="mode_reglement" name="mode_reglement">
                                        <option value="virement">Virement bancaire</option>
                                        <option value="cheque">Chèque</option>
                                        <option value="especes">Espèces</option>
                                        <option value="cb">Carte bancaire</option>
                                        <option value="prelevement">Prélèvement</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="methode_expedition" class="form-label">Méthode d'expédition</label>
                                    <select class="form-select" id="methode_expedition" name="methode_expedition">
                                        <option value="livraison">Livraison</option>
                                        <option value="chantier">Sur chantier</option>
                                        <option value="retrait">Retrait en magasin</option>
                                        <option value="transporteur">Transporteur</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="date_livraison" class="form-label">Date de livraison prévue</label>
                                    <input type="date" class="form-control" id="date_livraison" name="date_livraison">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="modele_document" class="form-label">Modèle de document</label>
                                    <select class="form-select" id="modele_document" name="modele_document">
                                        <option value="standard">Modèle standard</option>
                                        <option value="moderne">Modèle moderne</option>
                                        <option value="classique">Modèle classique</option>
                                        <option value="personnalise">Modèle personnalisé</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Section 4: Notes et projet -->
                <div class="form-section notes-section">
                    <div class="form-section-header">
                        <i class="fas fa-sticky-note me-2"></i>Notes et informations projet
                    </div>
                    <div class="form-section-body">
                        <div class="mb-4">
                            <label for="nom_projet" class="form-label">
                                <i class="fas fa-tag me-1"></i>Nom du projet
                            </label>
                            <input type="text" class="form-control" id="nom_projet" name="nom_projet" 
                                   placeholder="Ex: Refonte site web, Impression plaquettes...">
                        </div>
                        
                        <div class="mb-4">
                            <label for="note_publique" class="form-label">
                                <i class="fas fa-eye me-1"></i>Note publique (visible par le client)
                            </label>
                            <textarea class="form-control" id="note_publique" name="note_publique" 
                                      rows="4" placeholder="Cette note sera visible sur le devis envoyé au client..."></textarea>
                        </div>
                        
                        <div class="private-notes">
                            <label for="note_privee" class="form-label">
                                <i class="fas fa-eye-slash me-1"></i>Note privée (équipe interne uniquement)
                            </label>
                            <textarea class="form-control" id="note_privee" name="note_privee" 
                                      rows="3" placeholder="Notes internes, remarques pour l'équipe..."></textarea>
                            <small class="text-muted">
                                <i class="fas fa-lock me-1"></i>Cette note ne sera pas visible par le client
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Boutons d'action -->

                <div class="d-flex justify-content-between mb-4">
                    <button type="button" class="btn btn-secondary">
                        <i class="fas fa-save me-1"></i>Sauvegarder le brouillon
                    </button>
                    <button type="button" class="btn btn-primary" id="continue-to-lines">
                        <i class="fas fa-arrow-right me-1"></i>Passer aux lignes du devis
                    </button>
                </div>
            </div>

            <!-- Panneau latéral de résumé -->
            <div class="col-lg-4">
                <div class="card shadow sticky-top" style="top: 2rem;">
                    <div class="card-header bg-primary text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-eye me-2"></i>Aperçu du devis
                        </h6>
                    </div>
                    <div class="card-body">
                        <div id="devis-summary">
                            <div class="mb-3">
                                <small class="text-muted">Numéro :</small>
                                <div class="fw-bold">{{ next_devis_number }}</div>
                            </div>
                            <div class="mb-3">
                                <small class="text-muted">Statut :</small>
                                <div><span class="badge bg-secondary">Brouillon</span></div>
                            </div>
                            <div class="mb-3">
                                <small class="text-muted">Client :</small>
                                <div id="summary-client" class="text-muted fst-italic">Non sélectionné</div>
                            </div>
                            <div class="mb-3">
                                <small class="text-muted">Contact :</small>
                                <div id="summary-contact" class="text-muted fst-italic">Non défini</div>
                            </div>
                            <div class="mb-3">
                                <small class="text-muted">Projet :</small>
                                <div id="summary-project" class="text-muted fst-italic">Non défini</div>
                            </div>
                            <hr>
                            <div class="mb-3">
                                <small class="text-muted">Commercial :</small>
                                <div>{{ app.user.prenom }} {{ app.user.nom }}</div>
                            </div>
                            <div class="mb-3">
                                <small class="text-muted">Date de création :</small>
                                <div id="summary-date-creation">{{ 'now'|date('d/m/Y') }}</div>
                            </div>
                            <div class="mb-3">
                                <small class="text-muted">Date de validité :</small>
                                <div id="summary-date-validite">{{ '+30 days'|date('d/m/Y') }}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Barre d'actions flottante -->
{% include '_partials/floating_action_bar.html.twig' with {
    'bar_color': 'blue',
    'left_buttons': [
        {'url': path('app_devis_index'), 'icon': 'fas fa-arrow-left', 'text': 'Annuler'}
    ],
    'center_text': 'Nouveau Devis - ' ~ next_devis_number,
    'center_icon': 'fas fa-plus',
    'right_buttons': [
        {'type': 'submit', 'form_id': 'devis-form', 'icon': 'fas fa-save', 'text': 'Créer le Devis', 'class': 'btn-success'}
    ]
} %}

<!-- Modal pour nouveau client -->
<div class="modal fade" id="newClientModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus me-2"></i>Nouveau Client/Prospect
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="new-client-form">
                    <!-- Ligne 1: Forme juridique et Type -->
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="new_client_forme_juridique" class="form-label">Forme juridique *</label>
                            <select class="form-select" id="new_client_forme_juridique" name="forme_juridique" required>
                                {% for forme in formes_juridiques %}
                                    <option value="{{ forme.id }}" 
                                            data-template="{{ forme.templateFormulaire }}"
                                            {{ forme.formeParDefaut ? 'selected' : '' }}>{{ forme.nom }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="new_client_type" class="form-label">Type</label>
                            <select class="form-select" id="new_client_type" name="type">
                                <option value="prospect">Prospect</option>
                                <option value="client">Client</option>
                            </select>
                        </div>
                    </div>

                    <!-- Nom d'entreprise (conditionnel) -->
                    <div class="mb-3" id="entreprise_section" style="display: none;">
                        <label for="new_client_entreprise" class="form-label">Nom de l'entreprise *</label>
                        <input type="text" class="form-control" id="new_client_entreprise" name="nom_entreprise" 
                               placeholder="Ex: Décor Pub SARL">
                    </div>

                    <!-- Ligne 2: Civilité, Nom et Prénom -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="new_client_civilite" class="form-label">Civilité</label>
                            <select class="form-select" id="new_client_civilite" name="civilite">
                                <option value="M.">M.</option>
                                <option value="Mme">Mme</option>
                                <option value="Mlle">Mlle</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="new_client_nom" class="form-label">Nom *</label>
                            <input type="text" class="form-control" id="new_client_nom" name="nom" required
                                   placeholder="Gonzalez">
                        </div>
                        <div class="col-md-5">
                            <label for="new_client_prenom" class="form-label">Prénom</label>
                            <input type="text" class="form-control" id="new_client_prenom" name="prenom"
                                   placeholder="Sophie">
                        </div>
                    </div>

                    <!-- Ligne 3: Email et Téléphone -->
                    <div class="row mb-3">
                        <div class="col-md-7">
                            <label for="new_client_email" class="form-label">Email *</label>
                            <input type="email" class="form-control" id="new_client_email" name="email" required
                                   placeholder="sophie.gonzalez@exemple.com">
                        </div>
                        <div class="col-md-5">
                            <label for="new_client_telephone" class="form-label">Téléphone</label>
                            <input type="tel" class="form-control" id="new_client_telephone" name="telephone"
                                   placeholder="06 12 34 56 78">
                        </div>
                    </div>

                    <!-- Ligne 4: Adresse -->
                    <div class="border rounded p-3 bg-light">
                        <h6 class="mb-3"><i class="fas fa-map-marker-alt me-2"></i>Adresse</h6>
                        <div class="mb-3">
                            <label for="new_client_adresse" class="form-label">Adresse</label>
                            <input type="text" class="form-control" id="new_client_adresse" name="adresse" 
                                   placeholder="123 rue de la Paix">
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="new_client_code_postal" class="form-label">Code postal</label>
                                <input type="text" class="form-control" id="new_client_code_postal" name="code_postal" 
                                       placeholder="75001" pattern="[0-9]{5}" maxlength="5"
                                       title="Code postal français (5 chiffres)">
                            </div>
                            <div class="col-md-8">
                                <label for="new_client_ville" class="form-label">Ville</label>
                                <input type="text" class="form-control" id="new_client_ville" name="ville" 
                                       placeholder="Paris" maxlength="100">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <label for="new_client_pays" class="form-label">Pays</label>
                                <input type="text" class="form-control" id="new_client_pays" name="pays" 
                                       value="France" placeholder="France">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-success" id="save-new-client">
                    <i class="fas fa-save me-1"></i>Créer et sélectionner
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal pour nouveau contact -->
<div class="modal fade" id="newContactModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">
                    <i class="fas fa-user-plus me-2"></i>Nouveau Contact
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="new-contact-form">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_civilite" class="form-label">Civilité</label>
                                <select class="form-select" id="new_contact_civilite" name="civilite">
                                    <option value="M.">M.</option>
                                    <option value="Mme">Mme</option>
                                    <option value="Mlle">Mlle</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_fonction" class="form-label">Fonction</label>
                                <input type="text" class="form-control" id="new_contact_fonction" name="fonction" 
                                       placeholder="Ex: Responsable achat, Directeur...">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_nom" class="form-label">Nom *</label>
                                <input type="text" class="form-control" id="new_contact_nom" name="nom" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_prenom" class="form-label">Prénom</label>
                                <input type="text" class="form-control" id="new_contact_prenom" name="prenom">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_email" class="form-label">Email *</label>
                                <input type="email" class="form-control" id="new_contact_email" name="email" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_telephone" class="form-label">Téléphone</label>
                                <input type="tel" class="form-control" id="new_contact_telephone" name="telephone">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="new_contact_mobile" class="form-label">Téléphone mobile</label>
                                <input type="tel" class="form-control" id="new_contact_mobile" name="telephone_mobile">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-info" id="save-new-contact">
                    <i class="fas fa-save me-1"></i>Créer et sélectionner
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // ====== AMÉLIORATION UX : AUTO-FOCUS SELECT2 ======
        // Extension globale jQuery pour appliquer l'auto-focus à tous les Select2
        $.fn.extend({
            select2AutoFocus: function(options) {
                return this.each(function() {
                    const element = $(this);
                    
                    // Ajouter une option pour désactiver la recherche si elle n'est pas nécessaire
                    const finalOptions = {
                        ...options,
                        // S'assurer que la recherche est activée
                        minimumResultsForSearch: 0
                    };
                    
                    element.select2(finalOptions);
                    
                    // Utiliser l'événement select2:open pour déclencher le focus
                    element.on('select2:open', function(e) {
                        console.log('🔍 Select2 ouvert pour:', element.attr('id'));
                        
                        // Forcer le focus après que Select2 ait fini son initialisation
                        setTimeout(function() {
                            // Méthode directe via le DOM natif
                            const searchInput = document.querySelector('.select2-container--open .select2-search__field');
                            if (searchInput) {
                                console.log('✅ Focus appliqué via DOM natif');
                                searchInput.focus();
                                // Déclencher aussi l'événement pour s'assurer que Select2 le reconnaît
                                searchInput.dispatchEvent(new Event('focus'));
                            } else {
                                console.log('❌ Aucun champ de recherche trouvé');
                            }
                        }, 1);
                    });
                });
            }
        });

        // Hook global pour attraper tous les événements Select2 open
        $(document).on('select2:open', function(e) {
            console.log('🌍 Événement global Select2:open détecté');
            
            // Triple approche pour maximiser les chances de succès
            const applyFocus = () => {
                const openContainer = document.querySelector('.select2-container--open');
                if (openContainer) {
                    const searchField = openContainer.querySelector('.select2-search__field');
                    if (searchField) {
                        console.log('🎯 Focus global appliqué!');
                        
                        // Méthode 1: Focus standard
                        searchField.focus();
                        
                        // Méthode 2: Click pour déclencher l'activation
                        searchField.click();
                        
                        // Méthode 3: Déclencher les événements manuellement
                        const focusEvent = new FocusEvent('focus', { bubbles: true });
                        const clickEvent = new MouseEvent('click', { bubbles: true });
                        searchField.dispatchEvent(focusEvent);
                        searchField.dispatchEvent(clickEvent);
                        
                        // Vérifier si le focus a été appliqué
                        setTimeout(() => {
                            if (document.activeElement === searchField) {
                                console.log('✅ Focus confirmé actif!');
                            } else {
                                console.log('⚠️ Focus appliqué mais élément pas actif:', document.activeElement);
                            }
                        }, 10);
                        
                        return true;
                    }
                }
                return false;
            };
            
            // Essayer immédiatement
            if (!applyFocus()) {
                // Réessayer avec requestAnimationFrame
                requestAnimationFrame(() => {
                    if (!applyFocus()) {
                        // Dernière tentative avec setTimeout
                        setTimeout(applyFocus, 10);
                    }
                });
            }
        });

        // Initialisation Select2 avec auto-focus (méthode simplifiée)
        $('#prospect').select2AutoFocus({
            theme: 'bootstrap-5',
            placeholder: 'Choisir un client/prospect...',
            allowClear: true
        });

        $('#contact_defaut').select2AutoFocus({
            theme: 'bootstrap-5',
            placeholder: 'Sélectionner un contact...'
        });

        $('#projet_existant').select2AutoFocus({
            theme: 'bootstrap-5',
            placeholder: 'Sélectionner un projet...'
        });

        $('#contact_facturation').select2AutoFocus({
            theme: 'bootstrap-5',
            placeholder: 'Choisir un contact...',
            allowClear: true
        });

        // Fonction pour filtrer les contacts et adresses selon le client sélectionné
        function filterContactsAndAddresses(clientId) {
            console.log('Filtrage pour client:', clientId);
            
            // Filtrer les contacts
            $('.contact-select option').each(function() {
                const $option = $(this);
                if ($option.val() === '') {
                    $option.show(); // Toujours afficher le placeholder
                } else {
                    const optionClientId = $option.attr('data-client-id');
                    if (clientId && optionClientId === clientId) {
                        $option.show();
                    } else {
                        $option.hide();
                    }
                }
            });
            
            // Filtrer les adresses  
            $('.address-select option').each(function() {
                const $option = $(this);
                if ($option.val() === '') {
                    $option.show(); // Toujours afficher le placeholder
                } else {
                    const optionClientId = $option.attr('data-client-id');
                    if (clientId && optionClientId === clientId) {
                        $option.show();
                    } else {
                        $option.hide();
                    }
                }
            });
            
            // Réinitialiser les sélections si elles ne sont plus valides
            $('.contact-select, .address-select').each(function() {
                const $select = $(this);
                const selectedOption = $select.find('option:selected');
                if (selectedOption.length && selectedOption.is(':hidden')) {
                    $select.val('').trigger('change');
                }
            });
        }


        // Gestion de la sélection de prospect
        $('#prospect').on('change', function() {
            const selectedOption = $(this).find('option:selected');
            const prospectName = selectedOption.text();
            const contacts = selectedOption.data('contacts') || [];
            const projects = selectedOption.data('projects') || [];
            const defaultFacturationId = selectedOption.data('default-facturation');
            const defaultLivraisonId = selectedOption.data('default-livraison');
            
            // METTRE À JOUR LES CONTACTS GLOBAUX EN PREMIER
            currentContacts = contacts;

            // Mise à jour du résumé
            $('#summary-client').text(prospectName || 'Non sélectionné');
            
            // Gestion des contacts - Contact en charge du projet
            const contactSelect = $('#contact_defaut');
            contactSelect.empty().append('<option value="">Choisir un contact...</option>');
            
            // Gestion des contacts - Contact de facturation
            const contactFacturationSelect = $('#contact_facturation');
            contactFacturationSelect.empty().append('<option value="">Choisir un contact...</option>');
            
            if (contacts.length > 0) {
                contacts.forEach(contact => {
                    // Créer le nom d'affichage sans parenthèses inutiles
                    let displayName = `${contact.prenom} ${contact.nom}`.trim();
                    // Ajouter la fonction seulement si elle existe et n'est pas générique
                    if (contact.fonction && contact.fonction !== 'Contact' && contact.fonction !== 'N/A') {
                        displayName += ` - ${contact.fonction}`;
                    }
                    const optionHtml = `<option value="${contact.id}">${displayName}</option>`;
                    contactSelect.append(optionHtml);
                    contactFacturationSelect.append(optionHtml);
                });
                
                // Pré-sélectionner les contacts par défaut
                if (defaultLivraisonId) {
                    contactSelect.val(defaultLivraisonId);
                } else if (contacts.length === 1) {
                    // Si pas de contact de livraison par défaut mais un seul contact, le sélectionner
                    contactSelect.val(contacts[0].id);
                }
                
                if (defaultFacturationId) {
                    contactFacturationSelect.val(defaultFacturationId);
                } else if (contacts.length === 1) {
                    // Si pas de contact de facturation par défaut mais un seul contact, le sélectionner
                    contactFacturationSelect.val(contacts[0].id);
                }
                
                // Mettre à jour le résumé du contact sélectionné
                const selectedContactOption = contactSelect.find('option:selected');
                if (selectedContactOption.val()) {
                    $('#summary-contact').text(selectedContactOption.text());
                }
                
                $('#contact-selection').show();
                
                // DÉCLENCHER les événements change pour afficher les adresses automatiquement
                setTimeout(() => {
                    if (contactSelect.val()) {
                        contactSelect.trigger('change');
                    }
                    if (contactFacturationSelect.val()) {
                        contactFacturationSelect.trigger('change');
                    }
                }, 100);
                
                // Appel direct pour s'assurer que les adresses s'affichent
                setTimeout(() => {
                    if (contactSelect.val()) {
                        updateContactAddress('projet', contactSelect.val());
                    }
                    if (contactFacturationSelect.val()) {
                        updateContactAddress('facturation', contactFacturationSelect.val());
                    }
                }, 200);
            } else {
                $('#contact-selection').show();
            }

            // Gestion des projets
            const projectSelect = $('#projet_existant');
            projectSelect.empty().append('<option value="">Nouveau projet...</option>');
            
            if (projects.length > 0) {
                projects.forEach(project => {
                    projectSelect.append(`<option value="${project.id}">${project.nom}</option>`);
                });
                $('#projects-selection').show();
            } else {
                $('#projects-selection').hide();
            }

            // Synchroniser avec le champ client caché
            const clientId = $(this).val();
            $('#client_field').val(clientId);
        });

        // Gestion du contact sélectionné et de son adresse
        $('#contact_defaut').on('change', function() {
            const selectedContact = $(this).find('option:selected').text();
            $('#summary-contact').text(selectedContact === 'Choisir un contact...' ? 'Non défini' : selectedContact);
            
            // Afficher l'adresse du contact
            updateContactAddress('projet', $(this).val());
        });

        // Gestion du contact de facturation et de son adresse
        $('#contact_facturation').on('change', function() {
            updateContactAddress('facturation', $(this).val());
        });

        // Gestion du nom de projet
        $('#nom_projet').on('input', function() {
            const projectName = $(this).val();
            $('#summary-project').text(projectName || 'Non défini');
        });

        // Gestion des dates
        $('#date_creation').on('change', function() {
            const date = new Date($(this).val());
            $('#summary-date-creation').text(date.toLocaleDateString('fr-FR'));
        });

        $('#date_validite').on('change', function() {
            const date = new Date($(this).val());
            $('#summary-date-validite').text(date.toLocaleDateString('fr-FR'));
        });

        // Bouton ajouter client
        $('#add-client-btn').on('click', function() {
            console.log('Bouton + cliqué pour nouveau client');
            $('#newClientModal').modal('show');
        });

        // Logique d'affichage conditionnel du champ entreprise selon la forme juridique
        function updateEntrepriseField() {
            const formeJuridiqueSelect = $('#new_client_forme_juridique');
            const selectedOption = formeJuridiqueSelect.find('option:selected');
            const template = selectedOption.data('template');
            const entrepriseSection = $('#entreprise_section');
            const entrepriseInput = $('#new_client_entreprise');
            
            if (template === 'personne_morale') {
                // Personne morale -> afficher le champ entreprise
                entrepriseSection.show();
                entrepriseInput.prop('required', true);
            } else {
                // Personne physique -> masquer le champ entreprise
                entrepriseSection.hide();
                entrepriseInput.prop('required', false);
                entrepriseInput.val(''); // Vider le champ
            }
        }
        
        // Mettre à jour l'affichage quand on change la forme juridique
        $('#new_client_forme_juridique').on('change', function() {
            updateEntrepriseField();
        });

        // Autocomplétion française pour l'adresse dans le popup
        function setupAddressAutocomplete() {
            const codePostalInput = $('#new_client_code_postal');
            const villeInput = $('#new_client_ville');
            
            console.log('Setup autocomplétion - Code postal found:', codePostalInput.length);
            console.log('Setup autocomplétion - Ville found:', villeInput.length);
            
            // Supprimer les anciens event listeners pour éviter les doublons
            codePostalInput.off('input.autocomplete');
            villeInput.off('input.autocomplete');
            
            // Autocomplétion code postal
            codePostalInput.on('input.autocomplete', function() {
                const query = $(this).val();
                console.log('Code postal input:', query);
                if (query.length >= 2) {
                    searchCommunes(query, 'code_postal', codePostalInput, villeInput);
                }
            });
            
            // Autocomplétion ville
            villeInput.on('input.autocomplete', function() {
                const query = $(this).val();
                console.log('Ville input:', query);
                if (query.length >= 2) {
                    searchCommunes(query, 'nom', villeInput, codePostalInput);
                }
            });
        }
        
        function searchCommunes(query, type, primaryInput, secondaryInput) {
            const url = `{{ path('app_api_communes_search') }}?q=${encodeURIComponent(query)}&type=${type}`;
            console.log('Recherche communes:', url);
            
            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    return response.json();
                })
                .then(communes => {
                    console.log('Communes trouvées:', communes.length);
                    showCommunesSuggestions(communes, primaryInput, secondaryInput, type);
                })
                .catch(error => {
                    console.error('Erreur autocomplétion:', error);
                });
        }
        
        // Fonction pour sélectionner une commune (réutilisable pour souris et clavier)
        function selectCommune(commune, primaryInput, secondaryInput, type, suggestions) {
            primaryInput.val(type === 'code_postal' ? commune.codePostal : commune.nomCommune);
            secondaryInput.val(type === 'code_postal' ? commune.nomCommune : commune.codePostal);
            suggestions.remove();
            // Retirer les événements clavier
            primaryInput.off('keydown.communes');
        }
        
        function showCommunesSuggestions(communes, primaryInput, secondaryInput, type) {
            console.log('Affichage suggestions:', communes.length, 'communes');
            // Supprimer les suggestions existantes
            $('.commune-suggestions').remove();
            
            if (communes.length === 0) return;
            
            // Créer la liste de suggestions
            const suggestions = $('<div class="commune-suggestions"></div>');
            
            // Positionnement relatif au modal pour éviter les problèmes de z-index
            const modalBody = primaryInput.closest('.modal-body');
            const inputPosition = primaryInput.position();
            const inputOffset = primaryInput.offset();
            
            suggestions.css({
                position: 'absolute',
                top: inputOffset.top + primaryInput.outerHeight(),
                left: inputOffset.left,
                width: primaryInput.outerWidth(),
                backgroundColor: 'white',
                border: '1px solid #ccc',
                borderRadius: '4px',
                maxHeight: '200px',
                overflowY: 'auto',
                zIndex: 1070, // Au-dessus des modals Bootstrap (1060)
                boxShadow: '0 2px 5px rgba(0,0,0,0.2)',
                display: 'block' // Force l'affichage
            });
            
            console.log('Position input:', inputOffset.top, inputOffset.left);
            console.log('Position suggestions:', inputOffset.top + primaryInput.outerHeight(), inputOffset.left);
            
            communes.forEach((commune, index) => {
                const item = $('<div class="commune-item"></div>');
                item.css({
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderBottom: '1px solid #eee'
                });
                
                // Ajouter un attribut data pour identifier l'élément
                item.attr('data-index', index);
                item.attr('data-commune-data', JSON.stringify(commune));
                
                if (type === 'code_postal') {
                    item.text(`${commune.codePostal} - ${commune.nomCommune}`);
                } else {
                    item.text(`${commune.nomCommune} (${commune.codePostal})`);
                }
                
                item.hover(
                    function() { 
                        // Retirer la sélection clavier quand on survole à la souris
                        $('.commune-item.keyboard-selected').removeClass('keyboard-selected');
                        $(this).addClass('mouse-hover').css('backgroundColor', '#f0f0f0'); 
                    },
                    function() { 
                        $(this).removeClass('mouse-hover').css('backgroundColor', 'white'); 
                    }
                );
                
                item.click(function() {
                    selectCommune(commune, primaryInput, secondaryInput, type, suggestions);
                });
                
                suggestions.append(item);
            });
            
            $('body').append(suggestions);
            console.log('Suggestions ajoutées au DOM:', suggestions.length, 'élément(s)');
            console.log('Suggestions HTML:', suggestions[0].outerHTML.substring(0, 200));
            console.log('Suggestions visible:', suggestions.is(':visible'));
            console.log('Suggestions CSS zIndex:', suggestions.css('z-index'));
            
            // Gestion de la navigation clavier
            let selectedIndex = -1;
            
            // Ajouter la gestion des événements clavier
            primaryInput.off('keydown.communes').on('keydown.communes', function(e) {
                const items = suggestions.find('.commune-item');
                
                switch(e.keyCode) {
                    case 38: // Flèche haut
                        e.preventDefault();
                        selectedIndex = Math.max(-1, selectedIndex - 1);
                        updateKeyboardSelection(items, selectedIndex);
                        break;
                        
                    case 40: // Flèche bas
                        e.preventDefault();
                        selectedIndex = Math.min(items.length - 1, selectedIndex + 1);
                        updateKeyboardSelection(items, selectedIndex);
                        break;
                        
                    case 13: // Entrée
                        e.preventDefault();
                        if (selectedIndex >= 0 && selectedIndex < items.length) {
                            const selectedItem = $(items[selectedIndex]);
                            const communeData = JSON.parse(selectedItem.attr('data-commune-data'));
                            selectCommune(communeData, primaryInput, secondaryInput, type, suggestions);
                        }
                        break;
                        
                    case 27: // Échap
                        e.preventDefault();
                        suggestions.remove();
                        primaryInput.off('keydown.communes');
                        break;
                }
            });
            
            // Fonction pour mettre à jour la sélection visuelle
            function updateKeyboardSelection(items, index) {
                // Retirer l'ancienne sélection
                items.removeClass('keyboard-selected').css({
                    backgroundColor: 'white',
                    color: 'black'
                });
                
                // Ajouter la nouvelle sélection
                if (index >= 0 && index < items.length) {
                    const selectedItem = $(items[index]);
                    selectedItem.addClass('keyboard-selected').css({
                        backgroundColor: '#007bff',
                        color: 'white'
                    });
                    
                    // Faire défiler pour rendre visible l'élément sélectionné
                    const suggestionsContainer = suggestions[0];
                    const selectedElement = selectedItem[0];
                    const containerTop = suggestionsContainer.scrollTop;
                    const containerBottom = containerTop + suggestionsContainer.clientHeight;
                    const elementTop = selectedElement.offsetTop;
                    const elementBottom = elementTop + selectedElement.offsetHeight;
                    
                    if (elementTop < containerTop) {
                        suggestionsContainer.scrollTop = elementTop;
                    } else if (elementBottom > containerBottom) {
                        suggestionsContainer.scrollTop = elementBottom - suggestionsContainer.clientHeight;
                    }
                }
            }
            
            // Supprimer les suggestions si on clique ailleurs
            $(document).one('click', function(e) {
                if (!suggestions.is(e.target) && suggestions.has(e.target).length === 0) {
                    suggestions.remove();
                    primaryInput.off('keydown.communes');
                }
            });
        }
        
        // Initialiser l'autocomplétion quand le modal s'ouvre
        $('#newClientModal').on('shown.bs.modal', function() {
            updateEntrepriseField();
            setupAddressAutocomplete();
        });

        // Sauvegarde nouveau client
        $('#save-new-client').on('click', function() {
            const $button = $(this);
            const formData = {
                civilite: $('#new_client_civilite').val(),
                nom: $('#new_client_nom').val(),
                prenom: $('#new_client_prenom').val(),
                nom_entreprise: $('#new_client_entreprise').val(),
                email: $('#new_client_email').val(),
                telephone: $('#new_client_telephone').val(),
                type: $('#new_client_type').val(),
                forme_juridique_id: $('#new_client_forme_juridique').val(),
                adresse: $('#new_client_adresse').val(),
                code_postal: $('#new_client_code_postal').val(),
                ville: $('#new_client_ville').val(),
                pays: $('#new_client_pays').val()
            };

            // Validation selon le type de forme juridique
            const selectedFormeOption = $('#new_client_forme_juridique option:selected');
            const template = selectedFormeOption.data('template');
            
            if (!formData.nom || !formData.email) {
                alert('Le nom et l\'email sont obligatoires');
                return;
            }
            
            // Si personne morale, vérifier que le nom d'entreprise est renseigné
            if (template === 'personne_morale' && !formData.nom_entreprise) {
                alert('Le nom de l\'entreprise est obligatoire pour une personne morale');
                return;
            }
            
            // Validation de l'adresse - si une partie est renseignée, vérifier que les champs obligatoires le sont aussi
            const hasAddressData = formData.adresse || formData.code_postal || formData.ville;
            if (hasAddressData) {
                if (!formData.adresse || !formData.code_postal || !formData.ville) {
                    alert('Si vous renseignez une adresse, les champs Adresse, Code postal et Ville sont tous obligatoires');
                    return;
                }
                
                // Validation format code postal français
                if (!/^\d{5}$/.test(formData.code_postal)) {
                    alert('Le code postal doit contenir exactement 5 chiffres');
                    return;
                }
            }

            // Désactiver le bouton pendant la requête
            $button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Création...');

            // Appel AJAX pour créer le client
            $.ajax({
                url: '/devis/ajax/create-client',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        // Construire le nom d'affichage comme dans le template Twig
                        let displayName;
                        if (response.client.nom_entreprise) {
                            displayName = response.client.nom_entreprise;
                        } else {
                            displayName = response.client.nom;
                            if (response.client.prenom) {
                                displayName += ' ' + response.client.prenom;
                            }
                        }
                        
                        const newOption = new Option(
                            displayName, 
                            response.client.id, 
                            true, 
                            true
                        );
                        
                        // Ajouter les data attributes pour les contacts et projets
                        $(newOption).attr('data-contacts', JSON.stringify(response.client.contacts || []));
                        $(newOption).attr('data-projects', JSON.stringify(response.client.projects || []));
                        $(newOption).attr('data-default-facturation', response.client.default_facturation_id || '');
                        $(newOption).attr('data-default-livraison', response.client.default_livraison_id || '');
                        
                        $('#prospect').append(newOption).trigger('change');

                        // Fermer la modal et reset le formulaire
                        $('#newClientModal').modal('hide');
                        $('#new-client-form')[0].reset();
                        
                        // Client créé et automatiquement sélectionné - pas besoin de message
                    } else {
                        alert('Erreur: ' + response.message);
                    }
                },
                error: function(xhr) {
                    let errorMessage = 'Erreur lors de la création du client';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }
                    alert(errorMessage);
                },
                complete: function() {
                    // Réactiver le bouton
                    $button.prop('disabled', false).html('<i class="fas fa-save me-1"></i>Créer et sélectionner');
                }
            });
        });

        // Bouton ajouter contact en charge du projet
        $('#add-contact-btn').on('click', function() {
            const selectedProspectId = $('#prospect').val();
            if (!selectedProspectId) {
                alert('Veuillez d\'abord sélectionner un client/prospect');
                return;
            }
            
            // Stocker l'ID du prospect et le type de contact
            $('#newContactModal').data('prospect-id', selectedProspectId);
            $('#newContactModal').data('contact-type', 'projet');
            $('#newContactModal').modal('show');
        });

        // Bouton ajouter contact de facturation
        $('#add-contact-facturation-btn').on('click', function() {
            const selectedProspectId = $('#prospect').val();
            if (!selectedProspectId) {
                alert('Veuillez d\'abord sélectionner un client/prospect');
                return;
            }
            
            // Stocker l'ID du prospect et le type de contact
            $('#newContactModal').data('prospect-id', selectedProspectId);
            $('#newContactModal').data('contact-type', 'facturation');
            $('#newContactModal').modal('show');
        });

        // Sauvegarde nouveau contact
        $('#save-new-contact').on('click', function() {
            const $button = $(this);
            const prospectId = $('#newContactModal').data('prospect-id');
            const contactType = $('#newContactModal').data('contact-type') || 'projet';
            
            if (!prospectId) {
                alert('Erreur: Aucun prospect sélectionné');
                return;
            }
            
            const formData = {
                prospect_id: prospectId,
                civilite: $('#new_contact_civilite').val(),
                nom: $('#new_contact_nom').val(),
                prenom: $('#new_contact_prenom').val(),
                fonction: $('#new_contact_fonction').val(),
                email: $('#new_contact_email').val(),
                telephone: $('#new_contact_telephone').val(),
                telephone_mobile: $('#new_contact_mobile').val()
            };

            if (!formData.nom || !formData.email) {
                alert('Le nom et l\'email sont obligatoires');
                return;
            }

            // Désactiver le bouton pendant la requête
            $button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>Création...');

            // Appel AJAX pour créer le contact
            $.ajax({
                url: '/devis/ajax/create-contact',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        // Ajouter le contact au bon select selon le type
                        const newOption = new Option(
                            response.contact.display_name,
                            response.contact.id,
                            true,
                            true
                        );
                        
                        // Ajouter aux deux dropdowns mais sélectionner dans le bon
                        $('#contact_defaut').append(newOption.cloneNode(true));
                        $('#contact_facturation').append(newOption.cloneNode(true));
                        
                        if (contactType === 'facturation') {
                            $('#contact_facturation').val(response.contact.id).trigger('change');
                        } else {
                            $('#contact_defaut').val(response.contact.id).trigger('change');
                            // Mettre à jour le résumé seulement si c'est le contact projet
                            $('#summary-contact').text(response.contact.display_name);
                        }

                        // Fermer la modal et reset le formulaire
                        $('#newContactModal').modal('hide');
                        $('#new-contact-form')[0].reset();
                        
                        // Contact créé et ajouté aux dropdowns
                    } else {
                        alert('Erreur: ' + response.message);
                    }
                },
                error: function(xhr) {
                    let errorMessage = 'Erreur lors de la création du contact';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }
                    alert(errorMessage);
                },
                complete: function() {
                    // Réactiver le bouton
                    $button.prop('disabled', false).html('<i class="fas fa-save me-1"></i>Créer et sélectionner');
                }
            });
        });

        // Bouton continuer vers les lignes
        $('#continue-to-lines').on('click', function() {
            // Validation basique
            if (!$('#prospect').val()) {
                alert('Veuillez sélectionner un client/prospect');
                return;
            }
            
            // Ici vous pourriez rediriger vers l'étape suivante
            alert('Redirection vers l\'étape de saisie des lignes du devis...');
        });

        // Variables globales pour les données des contacts
        let currentContacts = [];
        let originalAddresses = {};

        // Fonction pour mettre à jour l'affichage de l'adresse d'un contact
        function updateContactAddress(type, contactId) {
            const addressDiv = $(`#adresse-contact-${type}`);
            const statusDiv = $(`#address-status-${type}`);
            
            if (!contactId) {
                addressDiv.hide();
                return;
            }

            // Trouver le contact dans les données
            const contact = currentContacts.find(c => c.id == contactId);
            
            if (!contact) {
                addressDiv.hide();
                return;
            }

            // Afficher la section d'adresse
            addressDiv.show();

            if (contact.adresse) {
                // Contact avec adresse : pré-remplir les champs
                originalAddresses[type] = contact.adresse;
                $(`#adresse_${type}_ligne1`).val(contact.adresse.ligne1 || '');
                $(`#adresse_${type}_code_postal`).val(contact.adresse.codePostal || '');
                $(`#adresse_${type}_ville`).val(contact.adresse.ville || '');
                
                statusDiv.text('Adresse du contact - modifiable pour ce projet');
            } else {
                // Contact sans adresse : champs vides
                originalAddresses[type] = null;
                $(`#adresse_${type}_ligne1`).val('');
                $(`#adresse_${type}_code_postal`).val('');
                $(`#adresse_${type}_ville`).val('');
                
                statusDiv.text('Aucune adresse définie - saisissez une adresse pour ce projet');
            }
        }

        // Fonction pour formater l'affichage d'une adresse
        function formatAddress(adresse) {
            let formatted = '';
            if (adresse.ligne1) formatted += adresse.ligne1;
            if (adresse.ligne2) formatted += '<br>' + adresse.ligne2;
            if (adresse.codePostal || adresse.ville) {
                formatted += '<br>' + (adresse.codePostal || '') + ' ' + (adresse.ville || '');
            }
            if (adresse.pays && adresse.pays !== 'France') {
                formatted += '<br>' + adresse.pays;
            }
            return formatted || 'Adresse non définie';
        }

        // Les boutons d'édition ne sont plus nécessaires car les champs sont directement éditables

        // Les boutons de réinitialisation ont été supprimés de l'interface


        // Fonction pour réinitialiser à l'adresse originale (supprimée car plus de bouton)


        // Cette mise à jour est maintenant gérée dans le handler principal du prospect
        // Réinitialiser les adresses quand le prospect change
        $('#prospect').on('change', function() {
            // Réinitialiser les adresses
            originalAddresses = {};
            $('#adresse-contact-projet, #adresse-contact-facturation').hide();
        });
    });
    </script>
{% endblock %}