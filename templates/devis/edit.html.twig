{% extends 'base.html.twig' %}

{% block title %}Modifier Devis {{ devis.numeroDevis }}{% endblock %}

{% block body %}
<!-- Messages Flash -->
{% for type, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert alert-{{ type == 'error' ? 'danger' : (type == 'warning' ? 'warning' : (type == 'info' ? 'info' : 'success')) }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
{% endfor %}

<!-- En-tête -->
<div class="page-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-1"><i class="fas fa-edit me-3"></i>Modifier Devis {{ devis.numeroDevis }}</h1>
                <p class="mb-0">
                    <span class="badge bg-{{ devis.statutCouleur }} status-badge">{{ devis.statutLibelle }}</span>
                    {% if devis.client %}
                        <span class="ms-2">{{ devis.client.nomComplet }}</span>
                    {% endif %}
                    <span class="badge bg-info ms-2" title="Sauvegarde automatique activée">
                        <i class="fas fa-cloud-upload-alt me-1"></i>Auto-sauvegarde
                    </span>
                </p>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group">
                    <a href="{{ path('app_devis_show', {'id': devis.id}) }}" class="btn btn-light">
                        <i class="fas fa-eye"></i> Voir le devis
                    </a>
                    <a href="{{ path('app_devis_index') }}" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left"></i> Retour à la liste
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    {{ form_start(form, {'attr': {'id': 'devis-form', 'class': 'devis-form'}}) }}
    
    <div class="row">
        <div class="col-12">
            <!-- Informations générales -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Informations générales</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.client, {
                                'label': 'Client / Prospect *',
                                'attr': {
                                    'class': 'form-select prospect-select',
                                    'data-placeholder': 'Sélectionnez un client ou prospect'
                                }
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.commercial, {
                                'label': 'Commercial',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            {{ form_row(form.numeroDevis, {
                                'label': 'Numéro de devis',
                                'attr': {'class': 'form-control', 'readonly': true}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.dateCreation, {
                                'label': 'Date de création',
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.dateValidite, {
                                'label': 'Date de validité',
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.statut, {
                                'label': 'Statut',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Adresses et contacts -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-address-card me-2"></i>Adresses et contacts</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.contactFacturation, {
                                'label': 'Contact facturation',
                                'attr': {'class': 'form-select'}
                            }) }}
                            {{ form_row(form.adresseFacturation, {
                                'label': 'Adresse facturation',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.contactLivraison, {
                                'label': 'Contact livraison',
                                'attr': {'class': 'form-select'}
                            }) }}
                            {{ form_row(form.adresseLivraison, {
                                'label': 'Adresse livraison',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lignes de devis -->
            <div class="form-section">
                <div class="form-section-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-list me-2"></i>Lignes de devis</h5>
                    </div>
                </div>
                <div class="form-section-body">
                    <!-- En-têtes colonnes uniformes (90px à droite) -->
                    <div class="d-flex devis-headers mb-2 py-2 bg-light rounded align-items-start" style="gap: 2px; height: 35px;">
                        <div style="width: 120px; padding: 4px;"><small class="fw-bold">Code</small></div>
                        <div style="width: 225px; padding: 4px;"><small class="fw-bold">Désignation</small></div>
                        <div class="flex-fill" style="padding: 4px;"><small class="fw-bold">Description détaillée</small></div>
                        <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">Qté</small></div>
                        <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">PU HT</small></div>
                        <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">% Rem.</small></div>
                        <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">TVA</small></div>
                        <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">Total HT</small></div>
                        {% if devis.statut == 'brouillon' %}
                        <div style="width: 30px; padding: 4px;"><small class="fw-bold"></small></div>
                        {% endif %}
                    </div>

                    <div class="devis-items-collection" id="devis_devisItems" data-prototype="{{ form_row(form.devisItems.vars.prototype)|e('html_attr') }}" data-index="{{ form.devisItems|length }}">
                        {% for item in form.devisItems %}
                            <div class="devis-item mb-1 border-bottom">
                                <div class="d-flex align-items-start" style="gap: 2px; min-height: 35px;">
                                    <!-- Code article (1,5x = 120px) -->
                                    <div style="width: 120px; padding: 4px;">
                                        <input type="text" class="form-control form-control-sm code-article-input" 
                                               placeholder="Code..." readonly value="{{ item.vars.data.produit ? item.vars.data.produit.reference : '' }}" />
                                    </div>
                                    
                                    <!-- Désignation (1,5x = 225px) -->
                                    <div style="width: 225px; padding: 4px;">
                                        {{ form_widget(item.designation, {'attr': {'class': 'form-control form-control-sm designation-input'}}) }}
                                    </div>
                                    
                                    <!-- Description détaillée (espace restant) -->
                                    <div class="flex-fill" style="padding: 4px;">
                                        {{ form_widget(item.description, {'attr': {'class': 'form-control form-control-sm description-input', 'placeholder': 'Description détaillée...'}}) }}
                                    </div>
                                    
                                    <!-- Quantité (1,5x = 90px) -->
                                    <div style="width: 90px; padding: 4px;">
                                        {{ form_widget(item.quantite, {'attr': {'class': 'form-control form-control-sm text-center quantity-input'}}) }}
                                    </div>
                                    
                                    <!-- Prix unitaire HT sans € -->
                                    <div style="width: 90px; padding: 4px;">
                                        {{ form_widget(item.prixUnitaireHt, {'attr': {'class': 'form-control form-control-sm text-end price-input', 'placeholder': '0.00', 'type': 'number', 'step': '0.01'}}) }}
                                    </div>
                                    
                                    <!-- % Remise (uniforme = 90px) -->
                                    <div style="width: 90px; padding: 4px;">
                                        {{ form_widget(item.remisePercent, {'attr': {'class': 'form-control form-control-sm text-center remise-input', 'placeholder': '0.0', 'step': '0.1'}}) }}
                                    </div>
                                    
                                    <!-- TVA (uniforme = 90px) -->
                                    <div style="width: 90px; padding: 4px;">
                                        <select class="form-select form-select-sm tva-select" name="{{ item.tvaPercent.vars.full_name }}" data-current-value="{{ item.vars.data.tvaPercent ?? '20.00' }}">
                                            <!-- Options seront chargées via JavaScript depuis admin -->
                                        </select>
                                    </div>
                                    
                                    <!-- Total HT ligne (uniforme = 90px) -->
                                    <div style="width: 90px; padding: 4px;" class="text-center">
                                        <small class="total-ligne-display fw-bold text-success" style="font-size: 0.75rem; line-height: 23px;">{{ item.vars.data.totalLigneHt ?? '0.00' }}</small>
                                    </div>
                                    
                                    <!-- Action -->
                                    {% if devis.statut == 'brouillon' %}
                                    <div style="width: 30px; padding: 4px;" class="text-center">
                                        <button type="button" class="btn btn-outline-danger btn-sm remove-item-btn" title="Supprimer" style="padding: 2px 4px; font-size: 10px;">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                    {% endif %}
                                </div>
                                {# Masquer les champs restants pour éviter les doublons #}
                                <div style="display: none;">
                                    {{ form_widget(item.produit) }}
                                    {{ form_widget(item.ordreAffichage) }}
                                    {{ form_widget(item.totalLigneHt) }}
                                    {{ form_widget(item.remiseMontant) }}
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                    
                    <!-- Bouton unique pour ajouter une ligne -->
                    {% if devis.statut == 'brouillon' %}
                        <div class="mt-3 text-center">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-success add-item-btn">
                                    <i class="fas fa-plus me-2"></i>Ajouter une ligne
                                </button>
                                <button type="button" class="btn btn-success dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item add-free-line" href="#">
                                        <i class="fas fa-edit me-2"></i>Ligne libre
                                    </a></li>
                                    <li><a class="dropdown-item catalogue-product-btn" href="#">
                                        <i class="fas fa-book me-2"></i>Produit du catalogue
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>

            <!-- Conditions commerciales -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-handshake me-2"></i>Conditions commerciales</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.acomptePercent, {
                                'label': 'Acompte (%)',
                                'attr': {'class': 'form-control', 'min': 0, 'max': 100, 'step': 0.01}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.acompteMontant, {
                                'label': 'Acompte (montant fixe)',
                                'attr': {'class': 'form-control', 'min': 0, 'step': 0.01}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.remiseGlobalePercent, {
                                'label': 'Remise globale (%)',
                                'attr': {'class': 'form-control', 'min': 0, 'max': 100, 'step': 0.01}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.delaiLivraison, {
                                'label': 'Délai de livraison',
                                'attr': {'class': 'form-control', 'placeholder': 'Ex: 2-3 semaines'}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            {{ form_row(form.notesClient, {
                                'label': 'Notes client',
                                'attr': {'class': 'form-control', 'rows': 3, 'placeholder': 'Notes visibles par le client'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Historique -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-history me-2"></i>Historique</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Créé le :</strong> {{ devis.createdAt|date('d/m/Y à H:i') }}</p>
                            {% if devis.dateEnvoi %}
                                <p><strong>Envoyé le :</strong> {{ devis.dateEnvoi|date('d/m/Y à H:i') }}</p>
                            {% endif %}
                        </div>
                        <div class="col-md-6">
                            {% if devis.updatedAt %}
                                <p><strong>Modifié le :</strong> {{ devis.updatedAt|date('d/m/Y à H:i') }}</p>
                            {% endif %}
                            {% if devis.dateSignature %}
                                <p><strong>Signé le :</strong> {{ devis.dateSignature|date('d/m/Y à H:i') }}</p>
                                <p><strong>Par :</strong> {{ devis.signatureNom }} ({{ devis.signatureEmail }})</p>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            <!-- Message d'alerte pour devis envoyé -->
            {% if devis.statut in ['envoye', 'signe'] %}
                <div class="alert alert-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Attention :</strong> Ce devis a déjà été envoyé. 
                    Toute modification créera automatiquement une version pour conserver l'historique.
                </div>
            {% endif %}
        </div>
    </div>

    {# Render devisItems field as hidden to prevent form_rest from creating duplicate buttons #}
    <div style="display: none;">
        {{ form_widget(form.devisItems) }}
    </div>
    
    {{ form_rest(form) }}
    {{ form_end(form) }}
</div>

<!-- Panneau récapitulatif flottant -->
<div class="floating-summary" id="floating-summary">
    <div class="floating-summary-toggle" id="summary-toggle">
        <i class="fas fa-calculator me-2"></i>
        <span class="summary-total-display">{{ devis.totalTtc }}€ TTC</span>
        <i class="fas fa-chevron-up toggle-icon"></i>
    </div>
    <div class="floating-summary-content" id="summary-content">
        <div class="row">
            <div class="col-md-3">
                <div class="summary-item">
                    <span class="summary-label">Total HT :</span>
                    <span class="summary-value total-ht">{{ devis.totalHt }}€</span>
                </div>
            </div>
            <div class="col-md-3">
                <div class="summary-item">
                    <span class="summary-label">TVA :</span>
                    <span class="summary-value total-tva">{{ devis.totalTva }}€</span>
                </div>
            </div>
            <div class="col-md-3">
                <div class="summary-item">
                    <span class="summary-label">Total TTC :</span>
                    <span class="summary-value total-ttc fw-bold text-success">{{ devis.totalTtc }}€</span>
                </div>
            </div>
            {% if devis.acomptePercent or devis.acompteMontant %}
            <div class="col-md-3">
                <div class="summary-item">
                    <span class="summary-label">Acompte :</span>
                    <span class="summary-value acompte-montant">{{ devis.calculateAcompte }}€</span>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- Barre flottante d'actions -->
<div class="floating-action-bar" id="floating-actions">
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span class="text-white me-3">
                    <i class="fas fa-file-invoice me-2"></i>
                    <strong>{{ devis.numeroDevis }}</strong>
                    <span class="badge bg-{{ devis.statutCouleur }} ms-2">{{ devis.statutLibelle }}</span>
                </span>
            </div>
            <div class="d-flex gap-2">
                <button type="submit" name="action" value="save" class="btn btn-light" form="devis-form">
                    <i class="fas fa-save me-1"></i>
                    {% if devis.statut in ['envoye', 'signe'] %}
                        Modifier et créer une version
                    {% else %}
                        Enregistrer les modifications
                    {% endif %}
                </button>
                
                {% if devis.statut == 'brouillon' %}
                    <button type="submit" name="action" value="save_and_send" class="btn btn-success" form="devis-form">
                        <i class="fas fa-paper-plane me-1"></i>Enregistrer et envoyer
                    </button>
                {% endif %}
                
                <a href="{{ path('app_devis_pdf', {'id': devis.id}) }}" target="_blank" class="btn btn-info">
                    <i class="fas fa-file-pdf me-1"></i>PDF
                </a>
                
                <a href="{{ path('app_devis_show', {'id': devis.id}) }}" class="btn btn-secondary">
                    <i class="fas fa-eye me-1"></i>Voir
                </a>
                
                <a href="{{ path('app_devis_index') }}" class="btn btn-outline-light">
                    <i class="fas fa-times me-1"></i>Annuler
                </a>
            </div>
        </div>
    </div>
</div>

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet">
    <style>
        .page-header {
            background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
            color: white;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
        }
        .form-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }
        .form-section-header {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
            padding: 1rem 1.5rem;
            font-weight: 600;
        }
        .form-section-body {
            padding: 1.5rem;
        }
        
        /* Alignement parfait des lignes de devis */
        .devis-item .d-flex > div {
            display: flex;
            align-items: flex-start !important;
        }
        
        .devis-item .form-control,
        .devis-item .form-select {
            margin: 0 !important;
            padding-top: 0.25rem !important;
            padding-bottom: 0.25rem !important;
            height: 31px !important;
            line-height: 1.2 !important;
        }
        
        .devis-headers > div,
        .devis-item .d-flex > div {
            vertical-align: top !important;
            display: flex !important;
            align-items: flex-start !important;
        }
        
        /* Forcer l'alignement des en-têtes avec les colonnes */
        .devis-headers {
            border: 1px solid #dee2e6;
        }
        
        .devis-headers > div {
            border-right: 1px solid #e9ecef;
            padding-left: 4px !important;
            padding-right: 4px !important;
        }
        
        .devis-item .d-flex > div {
            border-right: 1px solid rgba(0,0,0,0.05);
            padding-left: 4px !important;
            padding-right: 4px !important;
        }
        /* Barre flottante d'actions */
        .floating-action-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
            z-index: 1050;
            padding: 12px 0;
        }
        
        /* Lignes de devis compactes */
        .devis-item {
            transition: background-color 0.2s;
        }
        
        .devis-item:hover {
            background-color: #f8f9fa;
        }
        
        .devis-headers {
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        /* Ajustement pour éviter que le contenu passe sous les barres flottantes */
        body {
            padding-bottom: 140px; /* Augmenté pour la double barre */
        }
        
        /* Panneau récapitulatif flottant */
        .floating-summary {
            position: fixed;
            bottom: 70px; /* Au-dessus de la barre d'actions */
            right: 20px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1040;
            min-width: 320px;
            max-width: 600px;
        }
        
        .floating-summary-toggle {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 12px 16px;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-weight: 600;
            transition: background 0.2s;
        }
        
        .floating-summary-toggle:hover {
            background: linear-gradient(135deg, #218838 0%, #1fa085 100%);
        }
        
        .floating-summary-content {
            padding: 16px;
            border-radius: 0 0 8px 8px;
            display: none; /* Caché par défaut */
        }
        
        .floating-summary.expanded .floating-summary-content {
            display: block;
        }
        
        .floating-summary.expanded .toggle-icon {
            transform: rotate(180deg);
        }
        
        .toggle-icon {
            transition: transform 0.2s;
        }
        
        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 4px 0;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .summary-item:last-child {
            border-bottom: none;
        }
        
        .summary-label {
            color: #6c757d;
            font-size: 0.875rem;
        }
        
        .summary-value {
            font-weight: 600;
            color: #495057;
        }
        
        .summary-total-display {
            font-size: 1.1rem;
            font-weight: 700;
        }
        
        /* Champs compacts */
        .form-control-sm {
            font-size: 0.875rem;
        }
        
        /* Totaux mis en évidence */
        .total-display, .total-ligne-display {
            font-weight: 600;
            color: #198754;
        }
        
        /* Responsive pour écrans plus petits */
        @media (max-width: 768px) {
            .floating-action-bar .d-flex {
                flex-direction: column;
                gap: 8px;
            }
            .floating-action-bar {
                padding: 8px 0;
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>


<script>
$(document).ready(function() {
    // Désactiver la modification des lignes si le devis n'est pas en brouillon
    {% if devis.statut != 'brouillon' %}
        $('.devis-item input, .devis-item select, .devis-item textarea').each(function() {
            $(this).attr('readonly', true).attr('disabled', true);
        });
        
        // Masquer les boutons d'ajout/suppression
        $('.add-item-btn, .remove-item-btn').hide();
        
        // Message d'information
        const info = $('<div class="alert alert-info"><i class="fas fa-info-circle me-2"></i>Ce devis a été envoyé. Les modifications créeront une version pour conserver l\'historique.</div>');
        $('.devis-items-collection').before(info);
    {% else %}
    
    // Gestion de la collection de lignes de devis (seulement si brouillon)
    const $collectionHolder = $('#devis_devisItems');
    let index = $collectionHolder.find('.devis-item').length;

    function addNewDevisItem() {
        // Protection contre les doubles appels
        if (window.addingInProgress) {
            return;
        }
        window.addingInProgress = true;
        
        // Utiliser le prototype du formulaire Symfony
        const prototype = $collectionHolder.data('prototype');
        const newForm = prototype.replace(/__name__/g, index);
        index++;

        const $newItem = $('<div class="devis-item"></div>').html(newForm);
        
        // Créer une nouvelle ligne avec largeurs uniformes (90px à droite)
        const $newItemCompact = $(`
        <div class="devis-item mb-1 border-bottom" data-index="${index}">
            <div class="d-flex align-items-start" style="gap: 2px; min-height: 35px;">
                <!-- Code article (120px) -->
                <div style="width: 120px; padding: 4px;">
                    <input type="text" class="form-control form-control-sm code-article-input" placeholder="Code..." />
                </div>
                
                <!-- Désignation (225px) -->
                <div style="width: 225px; padding: 4px;">
                </div>
                
                <!-- Description détaillée (espace restant) -->
                <div class="flex-fill" style="padding: 4px;">
                </div>
                
                <!-- Quantité (90px) -->
                <div style="width: 90px; padding: 4px;">
                </div>
                
                <!-- Prix unitaire HT (90px uniforme) -->
                <div style="width: 90px; padding: 4px;">
                </div>
                
                <!-- % Remise (90px uniforme) -->
                <div style="width: 90px; padding: 4px;">
                </div>
                
                <!-- TVA (90px uniforme) -->
                <div style="width: 90px; padding: 4px;">
                </div>
                
                <!-- Total HT ligne (90px uniforme) -->
                <div style="width: 90px; padding: 4px;" class="text-center">
                    <small class="total-ligne-display fw-bold text-success" style="font-size: 0.75rem; line-height: 23px;">0.00</small>
                </div>
                
                <!-- Action -->
                <div style="width: 30px; padding: 4px;" class="text-center action-column">
                    <button type="button" class="btn btn-outline-danger btn-sm remove-item-btn" title="Supprimer" style="padding: 2px 4px; font-size: 10px;">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <!-- Champs Symfony cachés -->
            <div style="display: none;" class="symfony-fields"></div>
        </div>
        `);
        
        // Déplacer les champs Symfony dans la partie cachée et les adapter
        const $symFields = $newItem.find('input, select, textarea').clone();
        $newItemCompact.find('.symfony-fields').append($symFields);
        
        // Remplacer les champs visibles par les bons
        const designationField = $newItemCompact.find('.symfony-fields').find('[id$="_designation"]');
        const descriptionField = $newItemCompact.find('.symfony-fields').find('[id$="_description"]');
        const quantiteField = $newItemCompact.find('.symfony-fields').find('[id$="_quantite"]');
        const prixField = $newItemCompact.find('.symfony-fields').find('[id$="_prixUnitaireHt"]');
        const remiseField = $newItemCompact.find('.symfony-fields').find('[id$="_remisePercent"]');
        const tvaField = $newItemCompact.find('.symfony-fields').find('[id$="_tvaPercent"]');
        const produitField = $newItemCompact.find('.symfony-fields').find('[id$="_produit"]');
        
        // Intégrer les champs avec largeurs uniformes (90px à droite)
        $newItemCompact.find('div[style*="width: 225px"]').append(designationField.addClass('form-control form-control-sm designation-input'));
        $newItemCompact.find('div.flex-fill').append(descriptionField.addClass('form-control form-control-sm description-input').attr('placeholder', 'Description détaillée...'));
        $newItemCompact.find('div[style*="width: 90px"]').eq(0).append(quantiteField.addClass('form-control form-control-sm text-center quantity-input').val('1'));
        $newItemCompact.find('div[style*="width: 90px"]').eq(1).append(prixField.addClass('form-control form-control-sm text-end price-input').val('0.00').attr('placeholder', '0.00').attr('type', 'number').attr('step', '0.01'));
        $newItemCompact.find('div[style*="width: 90px"]').eq(2).append(remiseField.addClass('form-control form-control-sm text-center remise-input').attr('max', '100').attr('min', '0').attr('step', '0.1').attr('placeholder', ''));
        $newItemCompact.find('div[style*="width: 90px"]').eq(3).append(tvaField.addClass('form-select form-select-sm tva-select'));
        
        // Ajouter champ produit caché pour l'autocomplétion
        $newItemCompact.find('.symfony-fields').append(produitField.addClass('produit-id-input'));
        
        $collectionHolder.append($newItemCompact);
        
        // Masquer la colonne d'action si le devis n'est pas en brouillon
        {% if devis.statut != 'brouillon' %}
        $newItemCompact.find('.action-column').hide();
        {% endif %}
        
        // Initialiser l'autocomplétion pour cette ligne
        initAutocompleteForItem($newItemCompact);
        
        // Charger les taux de TVA
        loadTauxTva($newItemCompact);
        
        // Lier les événements de calcul
        bindCalculationEvents($newItemCompact);
        
        // Calculer les totaux
        calculateTotals();
        
        // Libérer le verrou
        setTimeout(function() {
            window.addingInProgress = false;
        }, 100);
    }

    // Attacher l'événement au bouton principal "Ajouter une ligne" (par défaut: ligne libre)
    $('.add-item-btn').off('click').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        addNewDevisItem();
    });
    
    // Attacher l'événement au lien "Ligne libre" du dropdown
    $('.add-free-line').off('click').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        addNewDevisItem();
    });
    
    // Attacher l'événement au lien "Produit du catalogue" du dropdown
    $('.catalogue-product-btn').off('click').on('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        openCatalogueModal();
    });

    // Fonction d'initialisation de l'autocomplétion pour une ligne
    function initAutocompleteForItem($item) {
        const $codeInput = $item.find('.code-article-input');
        const $designationInput = $item.find('[id$="_designation"], .designation-input');
        const $produitIdInput = $item.find('[id$="_produit"], .produit-id-input');
        const $priceInput = $item.find('[id$="_prixUnitaireHt"], .price-input');
        const $tvaSelect = $item.find('[id$="_tvaPercent"], .tva-select');
        
        // Fonction commune de recherche produit
        function searchProducts(term, $inputField) {
            if (term.length < 2) {
                return;
            }
            
            $.ajax({
                url: '/devis/api/produits',
                method: 'GET',
                data: { q: term },
                success: function(products) {
                    // Supprimer les dropdowns existantes de cette ligne
                    $item.find('.autocomplete-dropdown').remove();
                    
                    if (products.length > 0) {
                        const $dropdown = $('<div class="autocomplete-dropdown list-group position-absolute" style="z-index: 1000; max-height: 200px; overflow-y: auto; width: 100%; background: white; border: 1px solid #ddd; border-radius: 4px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);"></div>');
                        
                        products.forEach(function(product) {
                            const $option = $('<a href="#" class="list-group-item list-group-item-action small py-2"></a>');
                            $option.html(`
                                <div class="fw-bold">${product.designation}</div>
                                <small class="text-muted">Code: ${product.reference} - Prix: ${product.prix_vente_ht}€ HT</small>
                            `);
                            
                            $option.on('click', function(e) {
                                e.preventDefault();
                                
                                // Remplir tous les champs avec les données du produit
                                $codeInput.val(product.reference);
                                $produitIdInput.val(product.id);
                                $designationInput.val(product.designation);
                                $priceInput.val(parseFloat(product.prix_vente_ht));
                                
                                // Sélectionner le taux de TVA correspondant
                                if (product.taux_tva) {
                                    $tvaSelect.val(product.taux_tva);
                                }
                                
                                $dropdown.remove();
                                
                                // Déclencher le calcul
                                calculateTotals();
                                
                                // Déclencher auto-sauvegarde
                                if (hasDataChanged()) {
                                    scheduleAutoSave();
                                }
                            });
                            $dropdown.append($option);
                        });
                        
                        $inputField.parent().append($dropdown);
                    }
                },
                error: function() {
                    console.error('Erreur lors de la recherche de produits');
                }
            });
        }
        
        // Autocomplétion sur le champ Code
        $codeInput.on('input', function() {
            const term = $(this).val();
            searchProducts(term, $codeInput);
        });
        
        // Autocomplétion sur le champ Désignation
        $designationInput.on('input', function() {
            const term = $(this).val();
            searchProducts(term, $designationInput);
        });
        
        // Fermer les dropdowns quand on clique ailleurs
        $(document).on('click', function(e) {
            if (!$(e.target).closest($item).length) {
                $item.find('.autocomplete-dropdown').remove();
            }
        });
    }

    // Fonction de chargement des taux de TVA depuis admin
    function loadTauxTva($item) {
        const $select = $item.find('[id$="_tvaPercent"], .tva-select');
        
        $.ajax({
            url: '/devis/api/taux-tva',
            method: 'GET',
            success: function(tauxList) {
                $select.empty();
                $select.append('<option value="">Sélectionner TVA</option>');
                
                tauxList.forEach(function(taux) {
                    const $option = $('<option></option>');
                    // Format avec 2 décimales pour compatibilité
                    const tauxValue = parseFloat(taux.taux).toFixed(2);
                    $option.val(tauxValue);
                    // Affichage simplifié : juste le pourcentage
                    $option.text(parseFloat(taux.taux) + '%');
                    if (taux.parDefaut || taux.taux == 20) {
                        $option.prop('selected', true);
                    }
                    $select.append($option);
                });
            },
            error: function() {
                console.error('Erreur lors du chargement des taux de TVA depuis admin');
                // Fallback avec taux standard français
                $select.empty();
                $select.append('<option value="0.00">0%</option>');
                $select.append('<option value="5.50">5.5%</option>');
                $select.append('<option value="10.00">10%</option>');
                $select.append('<option value="20.00" selected>20%</option>');
            }
        });
    }

    // Fonction pour calculer les totaux
    function calculateTotals() {
        let totalHt = 0;
        let totalTva = 0;

        $('.devis-item').each(function() {
            // Utiliser les nouvelles classes CSS pour les champs
            const qte = parseFloat($(this).find('.quantity-input, [id$="_quantite"]').val()) || 0;
            const prixUnitaire = parseFloat($(this).find('.price-input, [id$="_prixUnitaireHt"]').val()) || 0;
            
            // Gérer la remise - garder vide si pas de valeur
            const remiseValue = $(this).find('.remise-input, [id$="_remisePercent"]').val();
            let remisePercent = 0;
            if (remiseValue && remiseValue !== '') {
                remisePercent = parseFloat(remiseValue);
                remisePercent = Math.min(Math.max(remisePercent, 0), 100); // Entre 0 et 100
                // Ne pas remettre à jour le champ avec toFixed si c'est en cours d'édition
            }
            
            let tvaPercent = parseFloat($(this).find('.tva-select, [id$="_tvaPercent"]').val()) || 20;
            tvaPercent = Math.min(Math.max(tvaPercent, 0), 100); // Entre 0 et 100

            // Calcul avec remise
            const sousTotal = qte * prixUnitaire;
            const montantRemise = sousTotal * remisePercent / 100;
            const totalLigneHt = sousTotal - montantRemise;
            const tvaLigne = totalLigneHt * tvaPercent / 100;

            // Mettre à jour les champs cachés
            $(this).find('.total-ligne-ht-input, [id$="_totalLigneHt"]').val(totalLigneHt.toFixed(2));
            
            // Mettre à jour l'affichage du montant net HT (sans signe euro)
            $(this).find('.total-display, .total-line-display, .total-ligne-display').text(totalLigneHt.toFixed(2));

            totalHt += totalLigneHt;
            totalTva += tvaLigne;
        });

        const totalTtc = totalHt + totalTva;

        // Mettre à jour les totaux dans le récapitulatif
        $('.subtotal-ht, .total-ht').text(totalHt.toFixed(2) + '€');
        $('.total-tva').text(totalTva.toFixed(2) + '€');
        $('.total-ttc').text(totalTtc.toFixed(2) + '€');

        // Mettre à jour les champs cachés du formulaire principal
        $('input[name*="[totalHt]"]').val(totalHt.toFixed(2));
        $('input[name*="[totalTva]"]').val(totalTva.toFixed(2));
        $('input[name*="[totalTtc]"]').val(totalTtc.toFixed(2));
    }

    // Fonction pour lier les événements de calcul
    function bindCalculationEvents($container) {
        $container = $container || $(document);
        
        // Événements pour les anciens champs (lignes existantes)
        $container.find('[id$="_quantite"], [id$="_prixUnitaireHt"], [id$="_tvaPercent"], [id$="_remisePercent"]')
            .off('input change keyup')
            .on('input change keyup', function() {
                calculateTotals();
            });
            
        // Événements pour les nouveaux champs (nouvelles lignes)
        $container.find('.quantity-input, .price-input, .remise-input, .tva-select')
            .off('input change keyup')
            .on('input change keyup', function() {
                // Validation des limites pour les champs de pourcentage
                if ($(this).hasClass('remise-input')) {
                    let val = parseFloat($(this).val());
                    // Si la valeur est invalide, on la laisse vide plutôt que de forcer 0
                    if (!isNaN(val)) {
                        if (val < 0) $(this).val('0');
                        else if (val > 100) $(this).val('100');
                    }
                }
                calculateTotals();
            });
            
        // Gestion des boutons de suppression
        $container.find('.remove-item-btn').off('click').on('click', function() {
            const $item = $(this).closest('.devis-item');
            $item.remove();
            calculateTotals();
        });
        
        // Gestion des boutons catalogue
        $container.find('.catalogue-btn').off('click').on('click', function() {
            const $item = $(this).closest('.devis-item');
            openCatalogueModal($item);
        });
    }
    
    // Fonction pour ouvrir la modal du catalogue
    function openCatalogueModal() {
        // Créer une modal Bootstrap pour sélectionner un produit
        const modalHtml = `
        <div class="modal fade" id="catalogueModal" tabindex="-1" aria-labelledby="catalogueModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="catalogueModalLabel">
                            <i class="fas fa-book me-2"></i>Sélectionner un produit du catalogue
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <input type="text" class="form-control" id="productSearch" placeholder="Rechercher un produit...">
                        </div>
                        <div id="productList" class="row">
                            <div class="col-12 text-center">
                                <i class="fas fa-spinner fa-spin"></i> Chargement des produits...
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    </div>
                </div>
            </div>
        </div>`;
        
        // Supprimer une éventuelle modal existante
        $('#catalogueModal').remove();
        
        // Ajouter la modal au DOM
        $('body').append(modalHtml);
        
        // Afficher la modal
        const modal = new bootstrap.Modal(document.getElementById('catalogueModal'));
        modal.show();
        
        // Charger les produits
        loadProductsInModal();
    }
    
    // Fonction pour charger les produits dans la modal
    function loadProductsInModal() {
        $.ajax({
            url: '/devis/api/produits',
            method: 'GET',
            data: { q: '' }, // Tous les produits
            success: function(products) {
                const $productList = $('#productList');
                $productList.empty();
                
                if (products.length === 0) {
                    $productList.html('<div class="col-12 text-center text-muted">Aucun produit disponible</div>');
                    return;
                }
                
                products.forEach(function(product) {
                    const productCard = `
                    <div class="col-md-6 mb-2">
                        <div class="card product-card" data-product-id="${product.id}" style="cursor: pointer;">
                            <div class="card-body p-2">
                                <h6 class="card-title mb-1">${product.designation}</h6>
                                <small class="text-muted d-block mb-1">Code: ${product.reference}</small>
                                <small class="text-success fw-bold">${product.prix_vente_ht}€ HT</small>
                                ${product.taux_tva ? '<small class="text-info ms-2">TVA: ' + product.taux_tva + '%</small>' : ''}
                            </div>
                        </div>
                    </div>`;
                    $productList.append(productCard);
                });
                
                // Ajouter les événements de clic sur les produits
                $('.product-card').on('click', function() {
                    const productId = $(this).data('product-id');
                    const product = products.find(p => p.id == productId);
                    if (product) {
                        addNewDevisItemFromProduct(product);
                        bootstrap.Modal.getInstance(document.getElementById('catalogueModal')).hide();
                    }
                });
            },
            error: function() {
                $('#productList').html('<div class="col-12 text-center text-danger">Erreur lors du chargement des produits</div>');
            }
        });
    }
    
    // Fonction pour ajouter une ligne de devis à partir d'un produit du catalogue
    function addNewDevisItemFromProduct(product) {
        // Créer d'abord une ligne vide
        addNewDevisItem();
        
        // Ensuite remplir avec les données du produit
        setTimeout(function() {
            const $lastItem = $('.devis-item').last();
            $lastItem.find('.code-article-input').val(product.reference);
            $lastItem.find('.designation-input').val(product.designation);
            $lastItem.find('.description-input').val(product.description || '');
            $lastItem.find('.price-input').val(parseFloat(product.prix_vente_ht));
            $lastItem.find('.tva-select').val(product.taux_tva ? parseFloat(product.taux_tva).toFixed(2) : '20.00');
            
            // Recalculer les totaux
            calculateTotals();
        }, 100);
    }

    // Charger les taux TVA et initialiser autocomplétion pour toutes les lignes existantes
    $('.devis-item').each(function() {
        const $item = $(this);
        const $select = $item.find('.tva-select');
        const currentValue = $select.data('current-value');
        
        // Charger les taux de TVA
        loadTauxTva($item);
        
        // Restaurer la valeur après chargement
        if (currentValue) {
            setTimeout(() => {
                $select.val(parseFloat(currentValue).toFixed(2));
            }, 200);
        }
        
        // Initialiser l'autocomplétion pour cette ligne
        initAutocompleteForItem($item);
    });
    
    // Lier les événements pour les lignes existantes
    bindCalculationEvents();
    
    // Calculer les totaux au chargement
    calculateTotals();

    {% endif %}
    
    // =============================================
    // SYSTÈME D'AUTO-SAUVEGARDE INTELLIGENT
    // =============================================
    
    let autoSaveTimer;
    let isAutoSaving = false;
    let hasUnsavedChanges = false;
    let lastSaveData = null;

    // Configuration auto-sauvegarde
    const AUTOSAVE_DELAY = 3000; // 3 secondes après la dernière modification
    const AUTOSAVE_URL = '/devis/{{ devis.id }}/auto-save';

    // Indicateur visuel de sauvegarde
    function showSaveStatus(message, isError = false) {
        let $indicator = $('#autosave-indicator');
        if ($indicator.length === 0) {
            $indicator = $('<div id="autosave-indicator" style="position: fixed; top: 70px; right: 20px; z-index: 1060; padding: 8px 12px; border-radius: 4px; font-size: 0.875rem; font-weight: 500; min-width: 200px; text-align: center;"></div>');
            $('body').append($indicator);
        }
        
        $indicator
            .removeClass('bg-success bg-warning bg-danger text-white')
            .addClass(isError ? 'bg-danger text-white' : 'bg-success text-white')
            .text(message)
            .fadeIn(200);
        
        setTimeout(() => {
            $indicator.fadeOut(200);
        }, 2000);
    }

    // Collecter les données du formulaire
    function collectFormData() {
        // Convertir les IDs en entiers ou null
        const clientId = $('#devis_client').val();
        const contactFacturationId = $('#devis_contactFacturation').val();
        const contactLivraisonId = $('#devis_contactLivraison').val();
        const adresseFacturationId = $('#devis_adresseFacturation').val();
        const adresseLivraisonId = $('#devis_adresseLivraison').val();

        const data = {
            client_id: (clientId && clientId !== '') ? parseInt(clientId) : null,
            contact_facturation_id: (contactFacturationId && contactFacturationId !== '') ? parseInt(contactFacturationId) : null,
            contact_livraison_id: (contactLivraisonId && contactLivraisonId !== '') ? parseInt(contactLivraisonId) : null,
            adresse_facturation_id: (adresseFacturationId && adresseFacturationId !== '') ? parseInt(adresseFacturationId) : null,
            adresse_livraison_id: (adresseLivraisonId && adresseLivraisonId !== '') ? parseInt(adresseLivraisonId) : null,
            items: []
        };

        // Collecter les données des lignes de devis
        $('.devis-item').each(function(index) {
            const $item = $(this);
            let itemId = $item.find('[id$="_id"]').val();
            // Convertir l'ID en integer si présent, sinon null
            itemId = (itemId && itemId !== '') ? parseInt(itemId) : null;
            
            // Gérer les remises (peuvent être vides)
            const remisePercentValue = $item.find('.remise-input, [id$="_remisePercent"]').val();
            const remisePercent = (remisePercentValue && remisePercentValue !== '') ? parseFloat(remisePercentValue) : null;
            
            const remiseMontantValue = $item.find('.remise-montant-input, [id$="_remiseMontant"]').val();
            const remiseMontant = (remiseMontantValue && remiseMontantValue !== '') ? parseFloat(remiseMontantValue) : null;
            
            // Validation des valeurs numériques
            const quantite = parseFloat($item.find('.quantity-input, [id$="_quantite"]').val());
            const prixUnitaireHt = parseFloat($item.find('.price-input, [id$="_prixUnitaireHt"]').val());
            const tvaPercent = parseFloat($item.find('.tva-select, [id$="_tvaPercent"]').val());
            
            const itemData = {
                id: itemId,
                designation: $item.find('.designation-input, [id$="_designation"]').val() || '',
                description: $item.find('.description-input, [id$="_description"]').val() || '',
                quantite: isNaN(quantite) ? 1 : quantite,
                prix_unitaire_ht: isNaN(prixUnitaireHt) ? 0 : prixUnitaireHt,
                remise_percent: remisePercent,
                remise_montant: remiseMontant,
                tva_percent: isNaN(tvaPercent) ? 20 : tvaPercent,
                ordre_affichage: index + 1
            };
            
            data.items.push(itemData);
        });

        return data;
    }

    // Vérifier si les données ont changé
    function hasDataChanged() {
        const currentData = JSON.stringify(collectFormData());
        if (lastSaveData === null) {
            lastSaveData = currentData;
            return false;
        }
        return currentData !== lastSaveData;
    }

    // Fonction d'auto-sauvegarde
    function performAutoSave() {
        if (isAutoSaving || !hasUnsavedChanges) return;
        
        isAutoSaving = true;
        const formData = collectFormData();
        
        // Afficher indicateur de sauvegarde en cours
        showSaveStatus('💾 Sauvegarde en cours...');
        
        $.ajax({
            url: AUTOSAVE_URL,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
                if (response.success) {
                    hasUnsavedChanges = false;
                    lastSaveData = JSON.stringify(formData);
                    showSaveStatus('✅ Sauvé à ' + response.saved_at);
                    
                    // Mettre à jour les totaux dans l'interface si fournis
                    if (response.totals) {
                        $('.total-ht').text(parseFloat(response.totals.total_ht).toFixed(2) + '€');
                        $('.total-tva').text(parseFloat(response.totals.total_tva).toFixed(2) + '€');
                        $('.total-ttc').text(parseFloat(response.totals.total_ttc).toFixed(2) + '€');
                        $('.summary-total-display').text(parseFloat(response.totals.total_ttc).toFixed(2) + '€ TTC');
                    }
                } else {
                    showSaveStatus('❌ ' + response.message, true);
                }
            },
            error: function(xhr) {
                let message = 'Erreur de sauvegarde';
                try {
                    const response = JSON.parse(xhr.responseText);
                    message = response.message || message;
                } catch (e) {
                    // Garder le message par défaut
                }
                showSaveStatus('❌ ' + message, true);
            },
            complete: function() {
                isAutoSaving = false;
            }
        });
    }

    // Déclencher l'auto-sauvegarde avec délai
    function scheduleAutoSave() {
        hasUnsavedChanges = true;
        clearTimeout(autoSaveTimer);
        autoSaveTimer = setTimeout(performAutoSave, AUTOSAVE_DELAY);
    }

    // Détecter les modifications sur tous les champs pertinents
    $(document).on('input change keyup', 
        '#devis_client, #devis_contactFacturation, #devis_contactLivraison, #devis_adresseFacturation, #devis_adresseLivraison, ' +
        '.designation-input, [id$="_designation"], .description-input, [id$="_description"], ' +
        '.quantity-input, [id$="_quantite"], .price-input, [id$="_prixUnitaireHt"], ' +
        '.remise-input, [id$="_remisePercent"], .remise-montant-input, [id$="_remiseMontant"], .tva-select, [id$="_tvaPercent"]', 
        function() {
            if (hasDataChanged()) {
                scheduleAutoSave();
            }
        }
    );

    // Forcer une sauvegarde avant fermeture/navigation
    window.addEventListener('beforeunload', function(e) {
        if (hasUnsavedChanges && !isAutoSaving) {
            e.preventDefault();
            e.returnValue = 'Vous avez des modifications non sauvegardées. Êtes-vous sûr de vouloir quitter ?';
        }
    });

    // =============================================
    // FILTRAGE CONTACTS ET ADRESSES PAR CLIENT
    // =============================================
    
    // Stocker les données contacts et adresses pour éviter les doublons
    let currentClientContacts = [];
    let currentClientAddresses = [];
    
    // Fonction pour filtrer les contacts et adresses selon le client sélectionné
    function filterContactsAndAddresses(clientId) {
        console.log('🔄 DÉBUT filterContactsAndAddresses pour client:', clientId);
        
        // Compter les options AVANT vidage
        console.log('📊 AVANT vidage:');
        console.log('  - Contact Facturation:', $('#devis_contactFacturation option').length, 'options');
        console.log('  - Contact Livraison:', $('#devis_contactLivraison option').length, 'options');
        console.log('  - Adresse Facturation:', $('#devis_adresseFacturation option').length, 'options');
        console.log('  - Adresse Livraison:', $('#devis_adresseLivraison option').length, 'options');
        
        // Vider complètement les dropdowns (y compris les options Symfony)
        $('#devis_contactFacturation, #devis_contactLivraison').empty();
        $('#devis_adresseFacturation, #devis_adresseLivraison').empty();
        
        // Vérifier le vidage
        console.log('🧹 APRÈS vidage:');
        console.log('  - Contact Facturation:', $('#devis_contactFacturation option').length, 'options');
        console.log('  - Contact Livraison:', $('#devis_contactLivraison option').length, 'options');
        
        if (clientId && clientId !== '') {
            // Charger les contacts du client sélectionné
            $.ajax({
                url: '/client/' + clientId + '/contacts',
                method: 'GET',
                success: function(contacts) {
                    console.log('📞 Contacts reçus de l\'API:', contacts.length, 'contacts');
                    console.log('📞 Détail des contacts:', contacts);
                    currentClientContacts = contacts;
                    
                    // Ajouter option vide à chaque dropdown séparément
                    console.log('➕ Ajout options vides...');
                    $('#devis_contactFacturation').append('<option value="">Sélectionner un contact</option>');
                    $('#devis_contactLivraison').append('<option value="">Sélectionner un contact</option>');
                    
                    // Vérifier après ajout options vides
                    console.log('📊 Après options vides:');
                    console.log('  - Contact Facturation:', $('#devis_contactFacturation option').length, 'options');
                    console.log('  - Contact Livraison:', $('#devis_contactLivraison option').length, 'options');
                    
                    // Ajouter chaque contact aux deux dropdowns (options séparées)
                    console.log('➕ Ajout des', contacts.length, 'contacts...');
                    contacts.forEach(function(contact, index) {
                        console.log(`  ➕ Ajout contact ${index + 1}:`, contact.label, 'ID:', contact.id);
                        const optionFacturation = `<option value="${contact.id}" data-adresse-id="${contact.adresse_id || ''}">${contact.label}</option>`;
                        const optionLivraison = `<option value="${contact.id}" data-adresse-id="${contact.adresse_id || ''}">${contact.label}</option>`;
                        
                        $('#devis_contactFacturation').append(optionFacturation);
                        console.log('    ✅ Ajouté dans facturation, total maintenant:', $('#devis_contactFacturation option').length);
                        
                        $('#devis_contactLivraison').append(optionLivraison);
                        console.log('    ✅ Ajouté dans livraison, total maintenant:', $('#devis_contactLivraison option').length);
                    });
                    
                    // Compter le total final
                    console.log('📊 TOTAL FINAL contacts:');
                    console.log('  - Contact Facturation:', $('#devis_contactFacturation option').length, 'options');
                    console.log('  - Contact Livraison:', $('#devis_contactLivraison option').length, 'options');
                    
                    // Mettre à jour les données pour la sélection automatique
                    currentClientContacts = contacts;
                },
                error: function() {
                    console.error('Erreur lors du chargement des contacts');
                    $('#devis_contactFacturation').append('<option value="">Aucun contact trouvé</option>');
                    $('#devis_contactLivraison').append('<option value="">Aucun contact trouvé</option>');
                }
            });
            
            // Charger les adresses du client sélectionné
            $.ajax({
                url: '/client/' + clientId + '/addresses',
                method: 'GET',
                success: function(adresses) {
                    console.log('Adresses reçues:', adresses);
                    currentClientAddresses = adresses;
                    
                    // Ajouter option vide à chaque dropdown séparément
                    $('#devis_adresseFacturation').append('<option value="">Sélectionner une adresse</option>');
                    $('#devis_adresseLivraison').append('<option value="">Sélectionner une adresse</option>');
                    
                    // Ajouter chaque adresse aux deux dropdowns (options séparées)
                    adresses.forEach(function(adresse) {
                        const optionFacturation = `<option value="${adresse.id}">${adresse.label}</option>`;
                        const optionLivraison = `<option value="${adresse.id}">${adresse.label}</option>`;
                        $('#devis_adresseFacturation').append(optionFacturation);
                        $('#devis_adresseLivraison').append(optionLivraison);
                    });
                },
                error: function() {
                    console.error('Erreur lors du chargement des adresses');
                    $('#devis_adresseFacturation').append('<option value="">Aucune adresse trouvée</option>');
                    $('#devis_adresseLivraison').append('<option value="">Aucune adresse trouvée</option>');
                }
            });
        } else {
            // Aucun client sélectionné
            $('#devis_contactFacturation').append('<option value="">Sélectionner d\'abord un client</option>');
            $('#devis_contactLivraison').append('<option value="">Sélectionner d\'abord un client</option>');
            $('#devis_adresseFacturation').append('<option value="">Sélectionner d\'abord un client</option>');
            $('#devis_adresseLivraison').append('<option value="">Sélectionner d\'abord un client</option>');
        }
    }

    // Gestion du changement de client - Mise à jour dynamique des contacts/adresses
    $('#devis_client').off('change').on('change', function() {
        const clientId = $(this).val();
        console.log('Client changé:', clientId, '- Mise à jour des contacts/adresses');
        
        if (clientId) {
            // Réactiver le filtrage dynamique car on change de client
            filterContactsAndAddresses(clientId);
        } else {
            // Si aucun client sélectionné, vider les dropdowns
            $('#devis_contactFacturation').empty().append('<option value="">Sélectionner d\'abord un client</option>');
            $('#devis_contactLivraison').empty().append('<option value="">Sélectionner d\'abord un client</option>');
            $('#devis_adresseFacturation').empty().append('<option value="">Sélectionner d\'abord un client</option>');
            $('#devis_adresseLivraison').empty().append('<option value="">Sélectionner d\'abord un client</option>');
        }
    });

    // Charger les données contacts au chargement pour permettre la sélection automatique d'adresses
    function loadInitialContactsData() {
        const initialClientId = $('#devis_client').val();
        if (initialClientId) {
            // Charger les contacts pour la sélection automatique d'adresses
            $.ajax({
                url: '/client/' + initialClientId + '/contacts',
                method: 'GET',
                success: function(contacts) {
                    currentClientContacts = contacts;
                    console.log('Contacts chargés pour sélection automatique:', contacts);
                },
                error: function() {
                    console.error('Erreur lors du chargement des contacts pour sélection automatique');
                }
            });
        }
    }
    
    // Gestion de la sélection automatique d'adresse quand on choisit un contact
    $('#devis_contactFacturation').off('change').on('change', function() {
        const contactId = $(this).val();
        if (contactId) {
            // Récupérer l'adresse ID depuis l'attribut data de l'option sélectionnée
            const selectedOption = $(this).find('option:selected');
            const adresseId = selectedOption.data('adresse-id');
            
            if (adresseId) {
                $('#devis_adresseFacturation').val(adresseId);
                console.log('Adresse facturation auto-sélectionnée:', adresseId);
            }
        }
    });

    $('#devis_contactLivraison').off('change').on('change', function() {
        const contactId = $(this).val();
        if (contactId) {
            // Récupérer l'adresse ID depuis l'attribut data de l'option sélectionnée
            const selectedOption = $(this).find('option:selected');
            const adresseId = selectedOption.data('adresse-id');
            
            if (adresseId) {
                $('#devis_adresseLivraison').val(adresseId);
                console.log('Adresse livraison auto-sélectionnée:', adresseId);
            }
        }
    });

    // Filtrage initial au chargement de la page - DÉSACTIVÉ pour éviter les doublons en édition
    // En mode édition, les contacts et adresses sont déjà chargés via le formulaire Symfony
    // $(document).ready(function() {
    //     const initialClientId = $('#devis_client').val();
    //     if (initialClientId) {
    //         filterContactsAndAddresses(initialClientId);
    //     }
    // });

    // Charger les données contacts au démarrage SEULEMENT pour la sélection automatique
    // Pas de filtrage pour éviter les doublons au premier chargement
    loadInitialContactsData();
    
    // Sauvegarde initiale après chargement complet
    setTimeout(function() {
        lastSaveData = JSON.stringify(collectFormData());
    }, 1000);
    
    // Gestion du panneau récapitulatif flottant - avec délégation d'événement
    $(document).on('click', '#summary-toggle', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Bouton summary cliqué'); // Debug
        
        const $summary = $('#floating-summary');
        const $content = $('#summary-content');
        
        $summary.toggleClass('expanded');
        
        if ($summary.hasClass('expanded')) {
            $content.slideDown(200);
        } else {
            $content.slideUp(200);
        }
    });
    
    // Fonction pour mettre à jour le récapitulatif flottant
    function updateFloatingSummary() {
        const totalHt = $('.total-ht').first().text();
        const totalTva = $('.total-tva').first().text();
        const totalTtc = $('.total-ttc').first().text();
        
        // Mettre à jour l'affichage dans le toggle
        $('.summary-total-display').text(totalTtc + ' TTC');
    }
    
    // Mettre à jour le récapitulatif après chaque calcul
    const originalCalculateTotals = calculateTotals;
    calculateTotals = function() {
        originalCalculateTotals();
        setTimeout(updateFloatingSummary, 50);
    };
});
</script>
{% endblock %}

{% endblock %}