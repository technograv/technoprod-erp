{% extends 'base.html.twig' %}

{% block title %}Modifier Devis {{ devis.numeroDevis }}{% endblock %}

{% block body %}
<!-- Messages Flash -->
{% for type, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert alert-{{ type == 'error' ? 'danger' : (type == 'warning' ? 'warning' : (type == 'info' ? 'info' : 'success')) }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
{% endfor %}

<!-- En-tête -->
<div class="page-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-1"><i class="fas fa-edit me-3"></i>Modifier Devis {{ devis.numeroDevis }}</h1>
                <p class="mb-0">
                    <span class="badge bg-{{ devis.statutCouleur }} status-badge">{{ devis.statutLibelle }}</span>
                    {% if devis.client %}
                        <span class="ms-2">{{ devis.client.nomComplet }}</span>
                    {% endif %}
                    <span class="badge bg-info ms-2" title="Sauvegarde automatique activée">
                        <i class="fas fa-cloud-upload-alt me-1"></i>Auto-sauvegarde
                    </span>
                </p>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group">
                    <a href="{{ path('app_devis_show', {'id': devis.id}) }}" class="btn btn-light">
                        <i class="fas fa-eye"></i> Voir le devis
                    </a>
                    <a href="{{ path('app_devis_index') }}" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left"></i> Retour à la liste
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    {{ form_start(form, {'attr': {'id': 'devis-form', 'class': 'devis-form'}}) }}
    
    <div class="row">
        <div class="col-12">
            <!-- Informations générales -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Informations générales</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.client, {
                                'label': 'Client / Prospect *',
                                'attr': {
                                    'class': 'form-select prospect-select',
                                    'data-placeholder': 'Sélectionnez un client ou prospect'
                                }
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.commercial, {
                                'label': 'Commercial',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            {{ form_row(form.numeroDevis, {
                                'label': 'Numéro de devis',
                                'attr': {'class': 'form-control', 'readonly': true}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.dateCreation, {
                                'label': 'Date de création',
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.dateValidite, {
                                'label': 'Date de validité',
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.statut, {
                                'label': 'Statut',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Adresses et contacts -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-address-card me-2"></i>Adresses et contacts</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.contactFacturation, {
                                'label': 'Contact facturation',
                                'attr': {'class': 'form-select'}
                            }) }}
                            {{ form_row(form.adresseFacturation, {
                                'label': 'Adresse facturation',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.contactLivraison, {
                                'label': 'Contact livraison',
                                'attr': {'class': 'form-select'}
                            }) }}
                            {{ form_row(form.adresseLivraison, {
                                'label': 'Adresse livraison',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Éléments du devis -->
            <div class="form-section">
                <div class="form-section-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <h5 class="mb-0 me-3"><i class="fas fa-list me-2"></i>Éléments du devis</h5>
                            
                            {% if devis.statut == 'brouillon' %}
                            <div class="btn-group">
                                <button type="button" class="btn btn-primary btn-sm" id="add-product-btn">
                                    <i class="fas fa-plus"></i> Ajouter produit
                                </button>
                                <button type="button" class="btn btn-secondary btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                                    <span class="visually-hidden">Toggle Dropdown</span>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" data-element-type="section_title">
                                        <i class="fas fa-heading"></i> Titre de section</a></li>
                                    <li><a class="dropdown-item" href="#" data-element-type="subtotal">
                                        <i class="fas fa-calculator"></i> Sous-total</a></li>
                                    <li><a class="dropdown-item" href="#" data-element-type="line_break">
                                        <i class="fas fa-minus"></i> Saut de ligne</a></li>
                                    <li><a class="dropdown-item" href="#" data-element-type="page_break">
                                        <i class="fas fa-file-alt"></i> Saut de page</a></li>
                                    <li><a class="dropdown-item" href="#" data-element-type="separator">
                                        <i class="fas fa-ellipsis-h"></i> Séparateur</a></li>
                                </ul>
                            </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
                <div class="form-section-body">
                    <!-- Conteneur des éléments -->
                    <div id="elements-container" class="border rounded p-3">
                        <!-- Les éléments seront chargés ici via JavaScript -->
                        <div class="text-center text-muted p-4">
                            <i class="fas fa-spinner fa-spin"></i> Chargement des éléments...
                        </div>
                    </div>

                </div>
            </div>

            <!-- Conditions commerciales -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-handshake me-2"></i>Conditions commerciales</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.acomptePercent, {
                                'label': 'Acompte (%)',
                                'attr': {'class': 'form-control', 'min': 0, 'max': 100, 'step': 0.01}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.acompteMontant, {
                                'label': 'Acompte (montant fixe)',
                                'attr': {'class': 'form-control', 'min': 0, 'step': 0.01}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.remiseGlobalePercent, {
                                'label': 'Remise globale (%)',
                                'attr': {'class': 'form-control', 'min': 0, 'max': 100, 'step': 0.01}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.delaiLivraison, {
                                'label': 'Délai de livraison',
                                'attr': {'class': 'form-control', 'placeholder': 'Ex: 2-3 semaines'}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            {{ form_row(form.notesClient, {
                                'label': 'Notes client',
                                'attr': {'class': 'form-control', 'rows': 3, 'placeholder': 'Notes visibles par le client'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Historique -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-history me-2"></i>Historique</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Créé le :</strong> {{ devis.createdAt|date('d/m/Y à H:i') }}</p>
                            {% if devis.dateEnvoi %}
                                <p><strong>Envoyé le :</strong> {{ devis.dateEnvoi|date('d/m/Y à H:i') }}</p>
                            {% endif %}
                        </div>
                        <div class="col-md-6">
                            {% if devis.updatedAt %}
                                <p><strong>Modifié le :</strong> {{ devis.updatedAt|date('d/m/Y à H:i') }}</p>
                            {% endif %}
                            {% if devis.dateSignature %}
                                <p><strong>Signé le :</strong> {{ devis.dateSignature|date('d/m/Y à H:i') }}</p>
                                <p><strong>Par :</strong> {{ devis.signatureNom }} ({{ devis.signatureEmail }})</p>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            <!-- Message d'alerte pour devis envoyé -->
            {% if devis.statut in ['envoye', 'signe'] %}
                <div class="alert alert-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Attention :</strong> Ce devis a déjà été envoyé. 
                    Toute modification créera automatiquement une version pour conserver l'historique.
                </div>
            {% endif %}
        </div>
    </div>

    {# Render devisItems field as hidden to prevent form_rest from creating duplicate buttons #}
    <div style="display: none;">
        {{ form_widget(form.devisItems) }}
    </div>
    
    {{ form_rest(form) }}
    {{ form_end(form) }}
</div>

<!-- Panneau récapitulatif flottant -->
<div class="floating-summary" id="floating-summary">
    <div class="floating-summary-toggle" id="summary-toggle">
        <i class="fas fa-calculator me-2"></i>
        <span class="summary-total-display">{{ devis.totalHt }}€ HT</span>
        <i class="fas fa-chevron-up toggle-icon"></i>
    </div>
    <div class="floating-summary-content" id="summary-content">
        <div class="summary-breakdown">
            <!-- Total HT (dans la bande verte) -->
            <div class="summary-line total-ht-line">
                <span class="summary-label">Total HT :</span>
                <span class="summary-value total-ht">{{ devis.totalHt }}€</span>
            </div>
            
            <!-- Remise globale -->
            <div class="summary-line remise-line">
                <span class="summary-label">Remise globale :</span>
                <div class="remise-controls">
                    <div class="input-group input-group-sm">
                        <input type="number" class="form-control" id="remise-percent" 
                               placeholder="%" min="0" max="100" step="0.1"
                               value="{{ devis.remiseGlobalePercent ?? 0 }}">
                        <span class="input-group-text">%</span>
                        <input type="number" class="form-control" id="remise-montant" 
                               placeholder="€" min="0" step="0.01"
                               value="{{ devis.remiseGlobaleMontant ?? 0 }}">
                        <span class="input-group-text">€</span>
                    </div>
                </div>
            </div>
            
            <!-- Total HT après remise -->
            <div class="summary-line total-ht-remise-line">
                <span class="summary-label">Total HT remisé :</span>
                <span class="summary-value total-ht-remise">{{ (devis.totalHt - (devis.remiseGlobaleMontant ?? 0)) }}€</span>
            </div>
            
            <!-- TVA globale -->
            <div class="summary-line tva-line">
                <span class="summary-label">TVA :</span>
                <span class="summary-value total-tva">{{ devis.totalTva }}€</span>
            </div>
            
            <!-- Total TTC final -->
            <div class="summary-line total-ttc-line">
                <span class="summary-label">Total TTC :</span>
                <span class="summary-value total-ttc fw-bold">{{ devis.totalTtc }}€</span>
            </div>
        </div>
    </div>
</div>

<!-- Barre flottante d'actions -->
<div class="floating-action-bar" id="floating-actions">
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span class="text-white me-3">
                    <i class="fas fa-file-invoice me-2"></i>
                    <strong>{{ devis.numeroDevis }}</strong>
                    <span class="badge bg-{{ devis.statutCouleur }} ms-2">{{ devis.statutLibelle }}</span>
                </span>
            </div>
            <div class="d-flex gap-2">
                <button type="submit" name="action" value="save" class="btn btn-light" form="devis-form">
                    <i class="fas fa-save me-1"></i>
                    {% if devis.statut in ['envoye', 'signe'] %}
                        Modifier et créer une version
                    {% else %}
                        Enregistrer les modifications
                    {% endif %}
                </button>
                
                {% if devis.statut == 'brouillon' %}
                    <button type="submit" name="action" value="save_and_send" class="btn btn-success" form="devis-form">
                        <i class="fas fa-paper-plane me-1"></i>Enregistrer et envoyer
                    </button>
                {% endif %}
                
                <a href="{{ path('app_devis_pdf', {'id': devis.id}) }}" target="_blank" class="btn btn-info">
                    <i class="fas fa-file-pdf me-1"></i>PDF
                </a>
                
                <a href="{{ path('app_devis_show', {'id': devis.id}) }}" class="btn btn-secondary">
                    <i class="fas fa-eye me-1"></i>Voir
                </a>
                
                <a href="{{ path('app_devis_index') }}" class="btn btn-outline-light">
                    <i class="fas fa-times me-1"></i>Annuler
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Modal pour éditer un élément -->
<div class="modal fade" id="element-modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="element-modal-title">Modifier l'élément</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Le contenu sera injecté dynamiquement -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="save-element-btn">Enregistrer</button>
            </div>
        </div>
    </div>
</div>

<!-- Panneau flottant pour éléments de mise en forme -->
{% if devis.statut == 'brouillon' %}
<div id="layout-elements-panel" class="layout-panel">
    <div class="layout-panel-header">
        <h6 class="mb-0"><i class="fas fa-magic me-2"></i>Mise en forme</h6>
        <button type="button" class="btn-close btn-close-white" id="close-layout-panel"></button>
    </div>
    <div class="layout-panel-body">
        <p class="small text-muted mb-3">Glissez les éléments dans le devis</p>
        
        <div class="layout-element-item" draggable="true" data-element-type="section_title">
            <i class="fas fa-heading"></i>
            <span>Titre de section</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="subtotal">
            <i class="fas fa-calculator"></i>
            <span>Sous-total</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="line_break">
            <i class="fas fa-minus"></i>
            <span>Saut de ligne</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="page_break">
            <i class="fas fa-file-alt"></i>
            <span>Saut de page</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="separator">
            <i class="fas fa-ellipsis-h"></i>
            <span>Séparateur</span>
        </div>
    </div>
</div>

<!-- Bouton pour ouvrir le panneau -->
<button type="button" id="open-layout-panel" class="btn btn-secondary layout-panel-toggle">
    <i class="fas fa-magic"></i>
</button>
{% endif %}

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet">
    <style>
        .page-header {
            background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
            color: white;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
        }
        .form-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }
        .form-section-header {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
            padding: 1rem 1.5rem;
            font-weight: 600;
        }
        .form-section-body {
            padding: 1.5rem;
        }
        
        /* Alignement parfait des lignes de devis */
        .devis-item .d-flex > div {
            display: flex;
            align-items: flex-start !important;
        }
        
        .devis-item .form-control,
        .devis-item .form-select {
            margin: 0 !important;
            padding-top: 0.25rem !important;
            padding-bottom: 0.25rem !important;
            height: 31px !important;
            line-height: 1.2 !important;
        }
        
        .devis-headers > div,
        .devis-item .d-flex > div {
            vertical-align: top !important;
            display: flex !important;
            align-items: flex-start !important;
        }
        
        /* Forcer l'alignement des en-têtes avec les colonnes */
        .devis-headers {
            border: 1px solid #dee2e6;
        }
        
        .devis-headers > div {
            border-right: 1px solid #e9ecef;
            padding-left: 4px !important;
            padding-right: 4px !important;
        }
        
        .devis-item .d-flex > div {
            border-right: 1px solid rgba(0,0,0,0.05);
            padding-left: 4px !important;
            padding-right: 4px !important;
        }
        /* Barre flottante d'actions */
        .floating-action-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
            z-index: 1050;
            padding: 12px 0;
        }
        
        /* Lignes de devis compactes */
        .devis-item {
            transition: background-color 0.2s;
        }
        
        .devis-item:hover {
            background-color: #f8f9fa;
        }
        
        .devis-headers {
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        /* Ajustement pour éviter que le contenu passe sous les barres flottantes */
        body {
            padding-bottom: 140px; /* Augmenté pour la double barre */
        }
        
        /* Panneau récapitulatif flottant */
        .floating-summary {
            position: fixed;
            bottom: 70px; /* Au-dessus de la barre d'actions */
            right: 20px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1040;
            min-width: 320px;
            max-width: 600px;
        }
        
        .floating-summary-toggle {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 12px 16px;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-weight: 600;
            transition: background 0.2s;
        }
        
        .floating-summary-toggle:hover {
            background: linear-gradient(135deg, #218838 0%, #1fa085 100%);
        }
        
        .floating-summary-content {
            padding: 16px;
            border-radius: 0 0 8px 8px;
            display: none; /* Caché par défaut */
            background: white;
        }
        
        .floating-summary.expanded .floating-summary-content {
            display: block;
        }
        
        .floating-summary.expanded .toggle-icon {
            transform: rotate(180deg);
        }
        
        .toggle-icon {
            transition: transform 0.2s;
        }
        
        /* Nouvelles lignes du récapitulatif */
        .summary-breakdown {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .summary-line {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }
        
        .summary-line:last-child {
            border-bottom: none;
            border-top: 2px solid #28a745;
            padding-top: 12px;
            margin-top: 8px;
        }
        
        .summary-label {
            font-weight: 600;
            color: #495057;
        }
        
        .summary-value {
            font-weight: 600;
            color: #28a745;
        }
        
        .total-ttc-line .summary-value {
            font-size: 1.1rem;
            color: #28a745;
        }
        
        .remise-controls {
            flex: 1;
            margin-left: 16px;
        }
        
        .remise-line .input-group {
            max-width: 200px;
        }
        
        .remise-line .input-group .form-control {
            font-size: 0.875rem;
        }
        
        /* Masquer les flèches des inputs numériques */
        .no-spinners::-webkit-outer-spin-button,
        .no-spinners::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        .no-spinners {
            -moz-appearance: textfield;
        }
        
        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 4px 0;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .summary-item:last-child {
            border-bottom: none;
        }
        
        .summary-label {
            color: #6c757d;
            font-size: 0.875rem;
        }
        
        .summary-value {
            font-weight: 600;
            color: #495057;
        }
        
        .summary-total-display {
            font-size: 1.1rem;
            font-weight: 700;
        }
        
        /* Champs compacts */
        .form-control-sm {
            font-size: 0.875rem;
        }
        
        /* Totaux mis en évidence */
        .total-display, .total-ligne-display {
            font-weight: 600;
            color: #198754;
        }
        
        /* Responsive pour écrans plus petits */
        @media (max-width: 768px) {
            .floating-action-bar .d-flex {
                flex-direction: column;
                gap: 8px;
            }
            .floating-action-bar {
                padding: 8px 0;
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
// Configuration globale
const DEVIS_ID = {{ devis.id }};
const IS_EDITABLE = {{ devis.statut == 'brouillon' ? 'true' : 'false' }};

let elements = [];
let sortable = null;

// ==========================================
// INITIALISATION
// ==========================================

async function init() {
    try {
        await loadElements();
        if (IS_EDITABLE) {
            initSortable();
            initEventListeners();
            initLayoutPanel();
        }
        calculateTotals();
    } catch (error) {
        console.error('Erreur d\'initialisation:', error);
        showError('Erreur lors du chargement des données');
    }
}

// ==========================================
// CHARGEMENT DES ÉLÉMENTS
// ==========================================

async function loadElements() {
    try {
        const response = await fetch(`/devis/${DEVIS_ID}/element`);
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }
        
        elements = data.elements;
        renderElements();
        
    } catch (error) {
        console.error('Erreur chargement éléments:', error);
        showError('Impossible de charger les éléments du devis');
    }
}

// ==========================================
// RENDU DES ÉLÉMENTS
// ==========================================

function renderElements() {
    const container = document.getElementById('elements-container');
    
    let html = '';
    
    // En-têtes colonnes si on a des éléments ou si éditable
    if (elements.length > 0 || IS_EDITABLE) {
        html += `
            <!-- En-têtes colonnes uniformes (90px à droite) -->
            <div class="d-flex devis-headers mb-2 py-2 bg-light rounded align-items-start" style="gap: 2px; height: 35px;">
                ${IS_EDITABLE ? '<div style="width: 25px; padding: 4px;" class="text-center"><small class="fw-bold text-muted"><i class="fas fa-arrows-alt-v" title="Réorganiser"></i></small></div>' : ''}
                <div style="width: 120px; padding: 4px;"><small class="fw-bold">Code</small></div>
                <div style="width: 225px; padding: 4px;"><small class="fw-bold">Désignation</small></div>
                <div class="flex-fill" style="padding: 4px;"><small class="fw-bold">Description détaillée</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">Qté</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">PU HT</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">% Rem.</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">TVA</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">Total HT</small></div>
                ${IS_EDITABLE ? '<div style="width: 30px; padding: 4px;"><small class="fw-bold"></small></div>' : ''}
            </div>
        `;
    }
    
    if (elements.length === 0) {
        html += `
            <div class="text-center text-muted p-4">
                <i class="fas fa-inbox"></i>
                <p class="mt-2">Aucun élément dans ce devis</p>
                ${IS_EDITABLE ? '<p class="small">Utilisez le bouton "Ajouter produit" pour commencer</p>' : ''}
            </div>
        `;
    } else {
        html += elements.map(element => renderElement(element)).join('');
    }
    
    // Bouton d'ajout de produit en bas
    if (IS_EDITABLE) {
        html += `
            <div class="mt-3 text-center">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-success add-item-btn" onclick="addElement('product')">
                        <i class="fas fa-plus me-2"></i>Ajouter une ligne
                    </button>
                    <button type="button" class="btn btn-success dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="visually-hidden">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="addElement('product')">
                            <i class="fas fa-edit me-2"></i>Ligne libre
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="showProductCatalog()">
                            <i class="fas fa-book me-2"></i>Produit du catalogue
                        </a></li>
                    </ul>
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
    
    // Initialiser l'autocomplétion après le rendu
    if (IS_EDITABLE) {
        setTimeout(() => initProductAutocomplete(), 100);
    }
}

function renderElement(element) {
    if (element.is_product) {
        return renderProductElement(element);
    } else {
        return renderLayoutElement(element);
    }
}

function renderProductElement(element) {
    const dragHandle = IS_EDITABLE ? `
        <div style="width: 25px; padding: 4px;" class="text-center drag-handle" title="Glisser pour réorganiser">
            <i class="fas fa-grip-vertical text-muted" style="cursor: grab;"></i>
        </div>
    ` : '';

    const deleteButton = IS_EDITABLE ? `
        <div style="width: 30px; padding: 4px;" class="text-center">
            <button type="button" class="btn btn-outline-danger btn-sm remove-item-btn" title="Supprimer" style="padding: 2px 4px; font-size: 10px;" onclick="event.preventDefault(); event.stopPropagation(); deleteElement(${element.id}); return false;">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    ` : '';

    if (IS_EDITABLE) {
        return `
            <div class="element-item mb-1 border-bottom" data-element-id="${element.id}" data-element-type="product">
                <div class="d-flex align-items-start" style="gap: 2px; min-height: 35px;">
                    ${dragHandle}
                    
                    <!-- Code article (120px) -->
                    <div style="width: 120px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm code-article-input" 
                               placeholder="Code..." value="${element.produit_reference || ''}"
                               data-element-id="${element.id}"
                               onchange="updateElement(${element.id}, 'produit_reference', this.value)"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Désignation (225px) -->
                    <div style="width: 225px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm designation-input" 
                               placeholder="Désignation..."
                               value="${element.designation || ''}" 
                               data-element-id="${element.id}"
                               onchange="updateElement(${element.id}, 'designation', this.value)"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Description détaillée (flex-fill) -->
                    <div class="flex-fill" style="padding: 4px;">
                        <input type="text" class="form-control form-control-sm description-input" 
                               placeholder="Description détaillée..." 
                               value="${element.description || ''}"
                               onchange="updateElement(${element.id}, 'description', this.value)"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Quantité (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm text-center quantity-input no-spinners" 
                               value="${element.quantite || 1}" 
                               pattern="[0-9]*[.,]?[0-9]*"
                               onchange="updateElement(${element.id}, 'quantite', this.value)"
                               oninput="this.value = this.value.replace(/[^0-9.,]/g, '')"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Prix unitaire HT (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm text-end price-input no-spinners" 
                               placeholder="0.00"
                               value="${parseFloat(element.prix_unitaire_ht || 0).toFixed(2)}"
                               pattern="[0-9]*[.,]?[0-9]*"
                               onchange="updateElement(${element.id}, 'prix_unitaire_ht', this.value)"
                               oninput="this.value = this.value.replace(/[^0-9.,]/g, '')"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- % Remise (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm text-center remise-input no-spinners" 
                               placeholder="0.0"
                               value="${parseFloat(element.remise_percent || 0).toFixed(1)}"
                               pattern="[0-9]*[.,]?[0-9]*"
                               onchange="updateElement(${element.id}, 'remise_percent', this.value)"
                               oninput="this.value = this.value.replace(/[^0-9.,]/g, '')"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- TVA (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <select class="form-select form-select-sm tva-select" 
                                onchange="updateElement(${element.id}, 'tva_percent', this.value)">
                            <option value="0" ${element.tva_percent == 0 ? 'selected' : ''}>0%</option>
                            <option value="5.5" ${element.tva_percent == 5.5 ? 'selected' : ''}>5.5%</option>
                            <option value="10" ${element.tva_percent == 10 ? 'selected' : ''}>10%</option>
                            <option value="20" ${element.tva_percent == 20 ? 'selected' : ''}>20%</option>
                        </select>
                    </div>
                    
                    <!-- Total HT ligne (90px) -->
                    <div style="width: 90px; padding: 4px;" class="text-center">
                        <small class="total-ligne-display fw-bold text-success" style="font-size: 0.75rem; line-height: 23px;">
                            ${parseFloat(element.total_ligne_ht || 0).toFixed(2)} €
                        </small>
                    </div>
                    
                    ${deleteButton}
                </div>
            </div>
        `;
    } else {
        // Mode lecture seule
        return `
            <div class="element-item border rounded p-3 mb-2" data-element-id="${element.id}" data-element-type="product">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="row">
                            <div class="col-md-4">
                                <strong>${element.designation || 'Produit sans nom'}</strong>
                                ${element.description ? `<br><small class="text-muted">${element.description}</small>` : ''}
                            </div>
                            <div class="col-md-2 text-center">
                                ${parseFloat(element.quantite || 0)}
                            </div>
                            <div class="col-md-2 text-end">
                                ${parseFloat(element.prix_unitaire_ht || 0).toFixed(2)} €
                            </div>
                            <div class="col-md-2 text-center">
                                ${parseFloat(element.remise_percent || 0)}%
                            </div>
                            <div class="col-md-2 text-end">
                                <strong>${parseFloat(element.total_ligne_ht || 0).toFixed(2)} €</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
}

function renderLayoutElement(element) {
    const dragHandle = IS_EDITABLE ? `
        <div class="drag-handle me-2" style="cursor: grab;">
            <i class="fas fa-grip-vertical text-muted"></i>
        </div>
    ` : '';

    const deleteButton = IS_EDITABLE ? `
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="event.preventDefault(); event.stopPropagation(); deleteElement(${element.id}); return false;">
            <i class="fas fa-trash"></i>
        </button>
    ` : '';

    let content = '';
    switch(element.type) {
        case 'section_title':
            if (IS_EDITABLE) {
                content = `<div class="d-flex align-items-center">
                    <i class="${element.icon} me-2"></i>
                    <input type="text" class="form-control form-control-sm fw-bold border-0 bg-transparent" 
                           value="${element.titre || element.display_label || ''}" 
                           placeholder="Titre de la section..."
                           style="font-size: 1.25rem; color: inherit;"
                           onchange="updateElement(${element.id}, 'titre', this.value)"
                           onblur="updateElement(${element.id}, 'titre', this.value)"
                           onkeypress="preventEnterSubmit(event)" />
                </div>`;
            } else {
                content = `<h5 class="mb-0"><i class="${element.icon}"></i> ${element.titre || element.display_label}</h5>`;
            }
            break;
        case 'subtotal':
            content = `<div class="d-flex justify-content-between align-items-center">
                <span><i class="${element.icon}"></i> ${element.display_label}</span>
                <strong class="subtotal-amount">${calculateSubtotalUpTo(element.position).toFixed(2)} €</strong>
            </div>`;
            break;
        case 'line_break':
            content = `<hr class="my-1">`;
            break;
        case 'page_break':
            content = `<div class="text-center text-muted py-2">
                <i class="${element.icon}"></i> ${element.display_label}
                <hr class="border-2">
            </div>`;
            break;
        case 'separator':
            content = `<div class="text-center">
                <i class="${element.icon}"></i> ${element.display_label}
            </div>`;
            break;
        default:
            content = `<i class="${element.icon}"></i> ${element.display_label}`;
    }

    return `
        <div class="element-item border rounded p-2 mb-2 bg-light" data-element-id="${element.id}" data-element-type="${element.type}">
            <div class="d-flex align-items-center">
                ${dragHandle}
                <div class="flex-grow-1">
                    ${content}
                </div>
                <div class="ms-2">
                    ${deleteButton}
                </div>
            </div>
        </div>
    `;
}

// ==========================================
// GESTION DU DRAG & DROP
// ==========================================

function initSortable() {
    const container = document.getElementById('elements-container');
    
    if (sortable) {
        sortable.destroy();
    }

    sortable = new Sortable(container, {
        handle: '.drag-handle',
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        dragClass: 'sortable-drag',
        filter: '.devis-headers, .text-center.text-muted, .btn-group, .mt-3, .add-item-btn',
        preventOnFilter: false,
        onMove: function(evt, originalEvent) {
            // Empêcher le déplacement vers les en-têtes ou éléments non-draggables
            const related = evt.related;
            if (related && (related.classList.contains('devis-headers') || 
                          related.classList.contains('text-center') || 
                          related.classList.contains('btn-group') ||
                          related.classList.contains('add-item-btn'))) {
                return false; // Empêcher le déplacement
            }
            return true; // Autoriser le déplacement
        },
        onEnd: function(evt) {
            // Vérifier que c'est bien un déplacement d'élément existant
            if (evt.item && evt.item.dataset.elementId) {
                const elementIds = Array.from(container.children)
                    .filter(child => child.dataset.elementId && !isNaN(parseInt(child.dataset.elementId)))
                    .map(child => parseInt(child.dataset.elementId));
                    
                if (elementIds.length > 0) {
                    reorderElements(elementIds);
                }
            }
        }
    });
}

// ==========================================
// ACTIONS SUR LES ÉLÉMENTS
// ==========================================

async function addElement(type, position = null) {
    try {
        const data = { type };
        if (position !== null) {
            data.position = position;
        }

        const response = await fetch(`/devis/${DEVIS_ID}/element`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message);
        }

        await loadElements();
        calculateTotals();
        showSuccess('Élément ajouté avec succès');
        
    } catch (error) {
        console.error('Erreur ajout élément:', error);
        showError('Impossible d\'ajouter l\'élément');
    }
}

async function deleteElement(elementId) {
    try {
        const response = await fetch(`/devis/${DEVIS_ID}/element/${elementId}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message);
        }

        await loadElements();
        calculateTotals();
        showSuccess('Élément supprimé avec succès');
        
    } catch (error) {
        console.error('Erreur suppression élément:', error);
        showError('Impossible de supprimer l\'élément');
    }
}

async function reorderElements(elementIds) {
    try {
        // Vérifier qu'on a des IDs valides
        if (!elementIds || elementIds.length === 0) {
            return;
        }

        const response = await fetch(`/devis/${DEVIS_ID}/element/reorder`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ elementIds })
        });

        const result = await response.json();
        
        if (!result.success) {
            console.warn('Réorganisation non appliquée:', result.message);
            return;
        }

        // Mettre à jour l'ordre local et les nouvelles positions
        elements.sort((a, b) => {
            const indexA = elementIds.indexOf(a.id);
            const indexB = elementIds.indexOf(b.id);
            return indexA - indexB;
        });

        // Mettre à jour les positions dans le tableau elements (1-indexed)
        elements.forEach((element, index) => {
            element.position = index + 1;
        });

        calculateTotals();
        
        // Forcer la mise à jour des sous-totaux après réorganisation
        updateSubtotals();
        
    } catch (error) {
        console.error('Erreur réorganisation:', error);
        // Ne pas afficher d'erreur utilisateur pour le drag & drop
    }
}

// ==========================================
// CALCULS
// ==========================================

function calculateTotals() {
    const productElements = elements.filter(e => e.is_product);
    
    let totalHt = 0;
    let totalTva = 0;
    
    productElements.forEach(element => {
        // Recalculer le total de ligne à partir des données de base
        const quantite = parseFloat(element.quantite || 1);
        const prixUnitaire = parseFloat(element.prix_unitaire_ht || 0);
        const remisePercent = parseFloat(element.remise_percent || 0);
        const tvaPercent = parseFloat(element.tva_percent || 0);
        
        const lineHt = quantite * prixUnitaire * (1 - remisePercent / 100);
        
        totalHt += lineHt;
        totalTva += lineHt * (tvaPercent / 100);
    });
    
    // Notifier le système de remise du total HT avant remise
    if (window.updateTotalHtForRemise) {
        window.updateTotalHtForRemise(totalHt);
    }
    
    // Calculer la remise globale
    const remiseMontant = parseFloat(document.getElementById('remise-montant')?.value || 0);
    const totalHtRemise = totalHt - remiseMontant;
    const totalTvaRemise = totalHtRemise * (totalTva / totalHt || 0); // Proportionnelle
    const totalTtc = totalHtRemise + totalTvaRemise;
    
    // Mettre à jour les totaux dans l'interface principale si les éléments existent
    const totalHtEl = document.getElementById('total-ht');
    const totalTvaEl = document.getElementById('total-tva');
    const totalTtcEl = document.getElementById('total-ttc');
    
    if (totalHtEl) totalHtEl.textContent = totalTtc.toFixed(2) + ' €'; // Afficher TTC dans l'interface principale
    if (totalTvaEl) totalTvaEl.textContent = totalTvaRemise.toFixed(2) + ' €';
    if (totalTtcEl) totalTtcEl.textContent = totalTtc.toFixed(2) + ' €';
    
    // Mettre à jour les totaux dans le panneau flottant avec la nouvelle structure
    const floatingTotalHt = document.querySelector('.floating-summary .total-ht');
    const floatingTotalHtRemise = document.querySelector('.floating-summary .total-ht-remise');
    const floatingTotalTva = document.querySelector('.floating-summary .total-tva');
    const floatingTotalTtc = document.querySelector('.floating-summary .total-ttc');
    const floatingSummaryDisplay = document.querySelector('.summary-total-display');
    
    if (floatingTotalHt) floatingTotalHt.textContent = totalHt.toFixed(2) + '€';
    if (floatingTotalHtRemise) floatingTotalHtRemise.textContent = totalHtRemise.toFixed(2) + '€';
    if (floatingTotalTva) floatingTotalTva.textContent = totalTvaRemise.toFixed(2) + '€';
    if (floatingTotalTtc) floatingTotalTtc.textContent = totalTtc.toFixed(2) + '€';
    if (floatingSummaryDisplay) floatingSummaryDisplay.textContent = totalHt.toFixed(2) + '€ HT';
    
    // Mettre à jour les sous-totaux
    updateSubtotals();
}

function calculateSubtotalUpTo(position) {
    let subtotal = 0;
    
    // Trouver la position du dernier sous-total avant la position courante
    let lastSubtotalPosition = 0;
    elements.forEach(element => {
        if (element.type === 'subtotal' && element.position < position) {
            lastSubtotalPosition = Math.max(lastSubtotalPosition, element.position);
        }
    });
    
    // Parcourir les éléments et sommer uniquement les produits entre le dernier sous-total et la position courante
    elements.forEach(element => {
        if (element.is_product && element.position > lastSubtotalPosition && element.position < position) {
            // Calculer le total de ligne à partir des données disponibles
            const quantite = parseFloat(element.quantite || 1);
            const prixUnitaire = parseFloat(element.prix_unitaire_ht || 0);
            const remisePercent = parseFloat(element.remise_percent || 0);
            
            const totalLigne = quantite * prixUnitaire * (1 - remisePercent / 100);
            subtotal += totalLigne;
        }
    });
    
    return subtotal;
}

function updateSubtotals() {
    document.querySelectorAll('.subtotal-amount').forEach(subtotalEl => {
        const elementItem = subtotalEl.closest('.element-item');
        const elementId = parseInt(elementItem.dataset.elementId);
        const element = elements.find(e => e.id === elementId);
        
        if (element) {
            const subtotal = calculateSubtotalUpTo(element.position);
            subtotalEl.textContent = subtotal.toFixed(2) + ' €';
        }
    });
}

// ==========================================
// GESTION TOUCHES CLAVIER
// ==========================================

function preventEnterSubmit(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        event.target.blur(); // Retire le focus du champ pour déclencher onblur/onchange
    }
}

// ==========================================
// EVENT LISTENERS
// ==========================================

function initEventListeners() {
    // Bouton ajouter produit
    document.getElementById('add-product-btn').addEventListener('click', () => {
        addElement('product');
    });

    // Boutons ajouter éléments de mise en page (seulement dropdown, pas panneau flottant)
    document.querySelectorAll('.dropdown-item[data-element-type]').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const type = btn.dataset.elementType;
            addElement(type);
        });
    });

    // Synchronisation contact/adresse
    initContactAddressSynchronization();
    
    // Toggle panneau récapitulatif flottant
    const summaryToggle = document.getElementById('summary-toggle');
    const floatingSummary = document.getElementById('floating-summary');
    
    if (summaryToggle && floatingSummary) {
        summaryToggle.addEventListener('click', function() {
            floatingSummary.classList.toggle('expanded');
        });
    }
    
    // Gestion de la remise globale
    initGlobalRemise();
}

// ==========================================
// GESTION REMISE GLOBALE
// ==========================================

function initGlobalRemise() {
    const remisePercent = document.getElementById('remise-percent');
    const remiseMontant = document.getElementById('remise-montant');
    
    if (!remisePercent || !remiseMontant) return;
    
    let totalHtBeforeRemise = 0;
    
    remisePercent.addEventListener('input', function() {
        const percent = parseFloat(this.value) || 0;
        if (percent >= 0 && percent <= 100) {
            const montant = (totalHtBeforeRemise * percent / 100);
            remiseMontant.value = montant.toFixed(2);
            calculateTotals();
        }
    });
    
    remiseMontant.addEventListener('input', function() {
        const montant = parseFloat(this.value) || 0;
        if (montant >= 0 && totalHtBeforeRemise > 0) {
            const percent = (montant / totalHtBeforeRemise * 100);
            remisePercent.value = Math.min(100, percent.toFixed(1));
            calculateTotals();
        }
    });
    
    // Mettre à jour le total HT pour les calculs de remise
    window.updateTotalHtForRemise = function(totalHt) {
        totalHtBeforeRemise = totalHt;
    };
}

// ==========================================
// SYNCHRONISATION CONTACT/ADRESSE
// ==========================================

function initContactAddressSynchronization() {
    const clientSelect = document.getElementById('devis_client');
    const contactFacturationSelect = document.getElementById('devis_contactFacturation');
    const contactLivraisonSelect = document.getElementById('devis_contactLivraison');
    const adresseFacturationSelect = document.getElementById('devis_adresseFacturation');
    const adresseLivraisonSelect = document.getElementById('devis_adresseLivraison');

    if (!clientSelect) return;

    // Charger contacts et adresses quand client change
    clientSelect.addEventListener('change', function() {
        const clientId = this.value;
        if (clientId) {
            loadClientContactsAndAddresses(clientId);
        } else {
            clearContactsAndAddresses();
        }
    });

    // Synchroniser adresse quand contact change
    if (contactFacturationSelect) {
        contactFacturationSelect.addEventListener('change', function() {
            const contactId = this.value;
            if (contactId && adresseFacturationSelect) {
                syncContactAddress(contactId, adresseFacturationSelect);
            }
        });
    }

    if (contactLivraisonSelect) {
        contactLivraisonSelect.addEventListener('change', function() {
            const contactId = this.value;
            if (contactId && adresseLivraisonSelect) {
                syncContactAddress(contactId, adresseLivraisonSelect);
            }
        });
    }

    // Charger les données initiales si un client est sélectionné
    if (clientSelect.value) {
        loadClientContactsAndAddresses(clientSelect.value);
    }
}

async function loadClientContactsAndAddresses(clientId) {
    try {
        // Charger les contacts
        const contactsResponse = await fetch(`/client/${clientId}/contacts`);
        const contactsData = await contactsResponse.json();
        
        // Charger les adresses
        const addressesResponse = await fetch(`/client/${clientId}/addresses`);  
        const addressesData = await addressesResponse.json();

        // Stocker les données pour la synchronisation
        window.clientContacts = contactsData;
        window.clientAddresses = addressesData;

        // Peupler les dropdowns
        populateContacts(contactsData);
        populateAddresses(addressesData);

    } catch (error) {
        console.error('Erreur chargement contacts/adresses:', error);
    }
}

function populateContacts(contacts) {
    const contactFacturationSelect = document.getElementById('devis_contactFacturation');
    const contactLivraisonSelect = document.getElementById('devis_contactLivraison');

    [contactFacturationSelect, contactLivraisonSelect].forEach(select => {
        if (!select) return;
        
        const currentValue = select.value;
        select.innerHTML = '<option value="">Sélectionner un contact...</option>';
        
        contacts.forEach(contact => {
            const option = document.createElement('option');
            option.value = contact.id;
            // Utiliser le label fourni par l'API ou construire à partir des données
            option.textContent = contact.label || `${contact.civilite || ''} ${contact.prenom || ''} ${contact.nom || ''}`.trim();
            if (contact.id == currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
    });
}

function populateAddresses(addresses) {
    const adresseFacturationSelect = document.getElementById('devis_adresseFacturation');
    const adresseLivraisonSelect = document.getElementById('devis_adresseLivraison');

    [adresseFacturationSelect, adresseLivraisonSelect].forEach(select => {
        if (!select) return;
        
        const currentValue = select.value;
        select.innerHTML = '<option value="">Sélectionner une adresse...</option>';
        
        addresses.forEach(address => {
            const option = document.createElement('option');
            option.value = address.id;
            
            // Utiliser le label de l'API ou construire à partir des données
            if (address.label) {
                option.textContent = address.label;
            } else {
                // Construire l'affichage avec vérification des champs
                let displayText = '';
                if (address.adresse && address.adresse.trim()) {
                    displayText += address.adresse.trim();
                }
                if (address.codePostal && address.codePostal.trim()) {
                    displayText += (displayText ? ', ' : '') + address.codePostal.trim();
                }
                if (address.ville && address.ville.trim()) {
                    displayText += (displayText && !address.codePostal ? ', ' : ' ') + address.ville.trim();
                }
                
                // Si aucune info, utiliser l'ID
                if (!displayText) {
                    displayText = `Adresse #${address.id}`;
                }
                
                option.textContent = displayText;
            }
            
            if (address.id == currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
    });
}

function syncContactAddress(contactId, adresseSelect) {
    // Utiliser les données déjà chargées plutôt qu'une nouvelle API
    if (!window.clientContacts) {
        console.log('Pas de contacts chargés');
        return;
    }
    
    // Trouver le contact sélectionné
    const selectedContact = window.clientContacts.find(contact => contact.id == contactId);
    if (!selectedContact) {
        console.log('Contact non trouvé:', contactId);
        return;
    }
    
    console.log('Contact trouvé:', selectedContact);
    
    // Si le contact a une adresse associée, la sélectionner
    if (selectedContact.adresse_id) {
        console.log('Sélection de l\'adresse:', selectedContact.adresse_id);
        adresseSelect.value = selectedContact.adresse_id;
    } else {
        console.log('Aucune adresse associée au contact');
    }
}

function clearContactsAndAddresses() {
    const selects = [
        'devis_contactFacturation',
        'devis_contactLivraison', 
        'devis_adresseFacturation',
        'devis_adresseLivraison'
    ];
    
    selects.forEach(id => {
        const select = document.getElementById(id);
        if (select) {
            select.innerHTML = '<option value="">Sélectionner...</option>';
        }
    });
}

// ==========================================
// FONCTIONS GLOBALES (appelées depuis le HTML)
// ==========================================


window.deleteElement = deleteElement;

// ==========================================
// ÉDITION DES ÉLÉMENTS
// ==========================================

async function updateElement(elementId, field, value) {
    try {
        // Normaliser les virgules en points pour les champs numériques
        if (['quantite', 'prix_unitaire_ht', 'remise_percent'].includes(field)) {
            value = String(value).replace(',', '.');
            const numValue = parseFloat(value);
            if (isNaN(numValue)) {
                console.warn(`Valeur invalide pour ${field}:`, value);
                return;
            }
            value = numValue;
        }
        
        // Mettre à jour immédiatement l'élément local pour un feedback rapide
        const elementIndex = elements.findIndex(e => e.id === elementId);
        if (elementIndex !== -1) {
            elements[elementIndex][field] = value;
            // Recalculer immédiatement le total de ligne si c'est un champ qui l'affecte
            if (['quantite', 'prix_unitaire_ht', 'remise_percent'].includes(field)) {
                recalculateLineTotal(elementId);
            }
        }
        
        const data = {};
        data[field] = value;

        const response = await fetch(`/devis/${DEVIS_ID}/element/${elementId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message);
            // En cas d'erreur, restaurer les données depuis le serveur
            await loadElements();
            return;
        }

        // Mettre à jour avec les données du serveur
        if (elementIndex !== -1 && result.element) {
            elements[elementIndex] = { ...elements[elementIndex], ...result.element };
            
            // Recalculer les totaux si c'est un champ qui affecte le prix
            if (['quantite', 'prix_unitaire_ht', 'remise_percent', 'tva_percent'].includes(field)) {
                calculateTotals();
                
                // Mettre à jour l'affichage du total de la ligne
                const totalEl = document.querySelector(`[data-element-id="${elementId}"] .total-ligne-display`);
                if (totalEl) {
                    totalEl.textContent = parseFloat(result.element.total_ligne_ht || 0).toFixed(2) + ' €';
                }
            }
        }
        
    } catch (error) {
        console.error('Erreur mise à jour élément:', error);
        showError('Impossible de mettre à jour l\'élément');
    }
}

window.updateElement = updateElement;

// ==========================================
// GESTION PANNEAU FLOTTANT
// ==========================================

function initLayoutPanel() {
    const panel = document.getElementById('layout-elements-panel');
    const openBtn = document.getElementById('open-layout-panel');
    const closeBtn = document.getElementById('close-layout-panel');
    
    if (!panel || !openBtn || !closeBtn) return;
    
    // Ouvrir le panneau
    openBtn.addEventListener('click', () => {
        panel.classList.add('show');
        openBtn.style.display = 'none';
    });
    
    // Fermer le panneau
    closeBtn.addEventListener('click', () => {
        panel.classList.remove('show');
        openBtn.style.display = 'block';
    });
    
    // Gestion du drag & drop depuis le panneau
    const layoutItems = panel.querySelectorAll('.layout-element-item');
    layoutItems.forEach(item => {
        item.addEventListener('click', () => {
            const type = item.dataset.elementType;
            addElement(type);
        });
        
        item.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', item.dataset.elementType);
        });
    });
    
    // Zone de drop spécialement pour les éléments du panneau
    const container = document.getElementById('elements-container');
    if (container) {
        container.addEventListener('dragover', (e) => {
            // Seulement accepter si c'est depuis le panneau flottant
            if (e.dataTransfer.types.includes('text/plain')) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'copy';
            }
        });
        
        container.addEventListener('drop', (e) => {
            const elementType = e.dataTransfer.getData('text/plain');
            if (elementType && !e.target.closest('.element-item')) {
                e.preventDefault();
                addElement(elementType);
            }
        });
    }
}

// ==========================================
// FONCTIONS UTILITAIRES
// ==========================================

function showProductCatalog() {
    // TODO: Implémenter le catalogue de produits
    console.log('Catalogue de produits à implémenter');
}

// ==========================================
// AUTOCOMPLÉTION PRODUITS
// ==========================================

function initProductAutocomplete() {
    // Nettoyer les attributs d'initialisation existants
    document.querySelectorAll('[data-autocomplete-initialized]').forEach(input => {
        input.removeAttribute('data-autocomplete-initialized');
    });
    
    // Supprimer les anciens conteneurs de suggestions
    document.querySelectorAll('.product-suggestions').forEach(container => {
        container.remove();
    });

    // Autocomplétion sur les champs code article
    document.querySelectorAll('.code-article-input').forEach(input => {
        setupProductAutocomplete(input, 'reference');
    });

    // Autocomplétion sur les champs désignation
    document.querySelectorAll('.designation-input').forEach(input => {
        setupProductAutocomplete(input, 'designation');
    });
}

function setupProductAutocomplete(input, searchField) {
    if (input.hasAttribute('data-autocomplete-initialized')) {
        return;
    }
    input.setAttribute('data-autocomplete-initialized', 'true');

    let timeoutId = null;
    let currentSuggestions = [];

    // Créer le conteneur des suggestions
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'product-suggestions';
    suggestionsContainer.style.display = 'none';
    input.parentNode.style.position = 'relative';
    input.parentNode.appendChild(suggestionsContainer);

    input.addEventListener('input', function() {
        const query = this.value.trim();
        
        // Nettoyer le timeout précédent
        if (timeoutId) {
            clearTimeout(timeoutId);
        }

        if (query.length < 2) {
            hideSuggestions();
            return;
        }

        // Attendre 300ms avant de chercher
        timeoutId = setTimeout(() => {
            searchProducts(query, searchField).then(products => {
                showSuggestions(products, input);
            });
        }, 300);
    });

    input.addEventListener('blur', function() {
        // Laisser un délai pour permettre le clic sur les suggestions
        setTimeout(() => hideSuggestions(), 200);
    });

    input.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            navigateSuggestions('down');
        } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            navigateSuggestions('up');
        } else if (e.key === 'Enter') {
            e.preventDefault();
            selectCurrentSuggestion();
        } else if (e.key === 'Escape') {
            hideSuggestions();
        }
    });

    function showSuggestions(products, inputElement) {
        currentSuggestions = products;
        
        if (products.length === 0) {
            hideSuggestions();
            return;
        }

        suggestionsContainer.innerHTML = products.map((product, index) => `
            <div class="product-suggestion ${index === 0 ? 'active' : ''}" data-index="${index}">
                <div class="product-reference">${product.reference}</div>
                <div class="product-designation">${product.designation}</div>
                <div class="product-price">${parseFloat(product.prixVenteHt || 0).toFixed(2)} €</div>
            </div>
        `).join('');

        // Ajouter les event listeners
        suggestionsContainer.querySelectorAll('.product-suggestion').forEach(suggestionEl => {
            suggestionEl.addEventListener('click', function() {
                const index = parseInt(this.dataset.index);
                selectProduct(products[index], inputElement);
            });
        });

        suggestionsContainer.style.display = 'block';
    }

    function hideSuggestions() {
        suggestionsContainer.style.display = 'none';
        currentSuggestions = [];
    }

    function navigateSuggestions(direction) {
        const active = suggestionsContainer.querySelector('.product-suggestion.active');
        if (!active) return;

        active.classList.remove('active');
        
        let next;
        if (direction === 'down') {
            next = active.nextElementSibling || suggestionsContainer.firstElementChild;
        } else {
            next = active.previousElementSibling || suggestionsContainer.lastElementChild;
        }
        
        if (next) {
            next.classList.add('active');
        }
    }

    function selectCurrentSuggestion() {
        const active = suggestionsContainer.querySelector('.product-suggestion.active');
        if (active && currentSuggestions.length > 0) {
            const index = parseInt(active.dataset.index);
            selectProduct(currentSuggestions[index], input);
        }
    }
}

async function searchProducts(query, field) {
    try {
        const response = await fetch(`/produit/search?q=${encodeURIComponent(query)}&field=${field}&limit=10`);
        const data = await response.json();
        return data.products || [];
    } catch (error) {
        console.error('Erreur recherche produits:', error);
        return [];
    }
}

function selectProduct(product, inputElement) {
    const elementId = inputElement.dataset.elementId;
    
    // Mettre à jour l'élément avec toutes les données du produit
    updateElementWithProduct(elementId, product);
    
    // Masquer les suggestions
    const suggestionsContainer = inputElement.parentNode.querySelector('.product-suggestions');
    if (suggestionsContainer) {
        suggestionsContainer.style.display = 'none';
    }
}

async function updateElementWithProduct(elementId, product) {
    try {
        // Mise à jour immédiate des champs visuels
        updateElementFields(elementId, product);
        
        const data = {
            produit_id: product.id,
            designation: product.designation,
            description: product.description || '',
            prix_unitaire_ht: product.prixVenteHt,
            tva_percent: product.tauxTva || 20,
            produit_reference: product.reference,
            quantite: 1 // Quantité par défaut
        };

        const response = await fetch(`/devis/${DEVIS_ID}/element/${elementId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (result.success) {
            calculateTotals();
        } else {
            console.error('Erreur API:', result.message);
            // En cas d'erreur, recharger pour récupérer l'état correct
            await loadElements();
        }
        
    } catch (error) {
        console.error('Erreur mise à jour produit:', error);
        // En cas d'erreur réseau, recharger pour récupérer l'état correct
        await loadElements();
    }
}

function updateElementFields(elementId, product) {
    // Trouver l'élément dans le DOM
    const elementDiv = document.querySelector(`[data-element-id="${elementId}"]`);
    if (!elementDiv) return;
    
    // Mettre à jour le champ code
    const codeInput = elementDiv.querySelector('.code-article-input');
    if (codeInput) {
        codeInput.value = product.reference || '';
    }
    
    // Mettre à jour le champ désignation
    const designationInput = elementDiv.querySelector('.designation-input');
    if (designationInput) {
        designationInput.value = product.designation || '';
    }
    
    // Mettre à jour le champ description
    const descriptionInput = elementDiv.querySelector('.description-input');
    if (descriptionInput) {
        descriptionInput.value = product.description || '';
    }
    
    // Mettre à jour le prix unitaire
    const prixInput = elementDiv.querySelector('.price-input');
    if (prixInput) {
        prixInput.value = parseFloat(product.prixVenteHt || 0).toFixed(2);
    }
    
    // Mettre à jour le taux de TVA si le champ existe
    const tvaSelect = elementDiv.querySelector('.tva-select');
    if (tvaSelect) {
        const tvaValue = parseFloat(product.tauxTva || 20);
        tvaSelect.value = tvaValue;
    }
    
    // Recalculer le total de la ligne
    recalculateLineTotal(elementId);
}

function recalculateLineTotal(elementId) {
    const elementDiv = document.querySelector(`[data-element-id="${elementId}"]`);
    if (!elementDiv) return;
    
    // Récupérer les valeurs et normaliser les virgules en points
    const quantiteValue = (elementDiv.querySelector('.quantity-input')?.value || '1').replace(',', '.');
    const prixUnitaireValue = (elementDiv.querySelector('.price-input')?.value || '0').replace(',', '.');
    const remiseValue = (elementDiv.querySelector('.remise-input')?.value || '0').replace(',', '.');
    
    const quantite = parseFloat(quantiteValue) || 1;
    const prixUnitaire = parseFloat(prixUnitaireValue) || 0;
    const remise = parseFloat(remiseValue) || 0;
    
    // Calculer le total de ligne HT
    const totalLigne = quantite * prixUnitaire * (1 - Math.min(remise, 100) / 100);
    
    // Mettre à jour l'affichage du total
    const totalElement = elementDiv.querySelector('.total-ligne-display');
    if (totalElement) {
        totalElement.textContent = totalLigne.toFixed(2) + ' €';
    }
    
    // Mettre à jour les données locales de l'élément
    const elementIndex = elements.findIndex(e => e.id == elementId);
    if (elementIndex !== -1) {
        elements[elementIndex].quantite = quantite;
        elements[elementIndex].prix_unitaire_ht = prixUnitaire;
        elements[elementIndex].remise_percent = Math.min(remise, 100);
        elements[elementIndex].total_ligne_ht = totalLigne;
    }
    
    // Déclencher le recalcul des totaux généraux
    calculateTotals();
}

// ==========================================
// UTILITAIRES
// ==========================================

function showSuccess(message) {
    // Ne pas afficher d'alert pour les ajouts d'éléments
    if (!message.includes('ajouté avec succès')) {
        console.log('✓ ' + message);
    }
}

function showError(message) {
    console.error('✗ ' + message);
    // Seulement afficher les erreurs importantes
    if (message.includes('Impossible de charger') || message.includes('Erreur lors du chargement')) {
        alert('✗ ' + message);
    }
}

// ==========================================
// INITIALISATION AU CHARGEMENT
// ==========================================

document.addEventListener('DOMContentLoaded', function() {
    init();
});
</script>

<style>
.sortable-ghost {
    opacity: 0.4;
}

.sortable-chosen {
    background-color: #e3f2fd !important;
}

.drag-handle {
    width: 20px;
}

.element-item {
    transition: all 0.2s;
}

.element-item:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Panneau flottant pour éléments de mise en forme */
.layout-panel {
    position: fixed;
    top: 50%;
    right: -300px;
    transform: translateY(-50%);
    width: 280px;
    background: #343a40;
    color: white;
    border-radius: 8px 0 0 8px;
    box-shadow: -2px 0 10px rgba(0,0,0,0.3);
    z-index: 1050;
    transition: right 0.3s ease;
}

.layout-panel.show {
    right: 0;
}

.layout-panel-header {
    background: #495057;
    padding: 1rem;
    border-radius: 8px 0 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.layout-panel-body {
    padding: 1rem;
}

.layout-element-item {
    background: #495057;
    border: 1px solid #6c757d;
    border-radius: 4px;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    cursor: grab;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.layout-element-item:hover {
    background: #5a6268;
    transform: translateX(-2px);
}

.layout-element-item:active {
    cursor: grabbing;
}

.layout-panel-toggle {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    z-index: 1040;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    transition: all 0.3s ease;
}

.layout-panel-toggle:hover {
    transform: translateY(-50%) scale(1.1);
}

/* Autocomplétion produits */
.product-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #dee2e6;
    border-top: none;
    border-radius: 0 0 4px 4px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    max-height: 200px;
    overflow-y: auto;
    z-index: 1060;
}

.product-suggestion {
    padding: 0.5rem;
    border-bottom: 1px solid #f1f3f4;
    cursor: pointer;
    display: grid;
    grid-template-columns: 80px 1fr auto;
    gap: 0.5rem;
    align-items: center;
    font-size: 0.875rem;
}

.product-suggestion:hover,
.product-suggestion.active {
    background-color: #f8f9fa;
}

.product-reference {
    font-weight: 600;
    color: #6f42c1;
}

.product-designation {
    color: #495057;
}

.product-price {
    font-weight: 600;
    color: #28a745;
    text-align: right;
}
</style>

{% endblock %}

{% endblock %}