{% extends 'base.html.twig' %}

{% block title %}Modifier Devis {{ devis.numeroDevis }}{% endblock %}

{% block body %}
<!-- Messages Flash -->
{% for type, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert alert-{{ type == 'error' ? 'danger' : (type == 'warning' ? 'warning' : (type == 'info' ? 'info' : 'success')) }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
{% endfor %}

<!-- En-tête -->
<div class="page-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="mb-1"><i class="fas fa-edit me-3"></i>Modifier Devis {{ devis.numeroDevis }}</h1>
                <p class="mb-0">
                    <span class="badge bg-{{ devis.statutCouleur }} status-badge">{{ devis.statutLibelle }}</span>
                    {% if devis.client %}
                        <span class="ms-2">{{ devis.client.nomComplet }}</span>
                    {% endif %}
                    <span class="badge bg-info ms-2" title="Sauvegarde automatique activée">
                        <i class="fas fa-cloud-upload-alt me-1"></i>Auto-sauvegarde
                    </span>
                </p>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group">
                    <a href="{{ path('app_devis_show', {'id': devis.id}) }}" class="btn btn-light">
                        <i class="fas fa-eye"></i> Voir le devis
                    </a>
                    <a href="{{ path('app_devis_index') }}" class="btn btn-outline-light">
                        <i class="fas fa-arrow-left"></i> Retour à la liste
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    {{ form_start(form, {'attr': {'id': 'devis-form', 'class': 'devis-form'}}) }}
    
    <div class="row">
        <div class="col-12">
            <!-- Informations générales -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Informations générales</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.client, {
                                'label': 'Client / Prospect *',
                                'attr': {
                                    'class': 'form-select prospect-select',
                                    'data-placeholder': 'Sélectionnez un client ou prospect'
                                }
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.commercial, {
                                'label': 'Commercial',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            {{ form_row(form.numeroDevis, {
                                'label': 'Numéro de devis',
                                'attr': {'class': 'form-control', 'readonly': true}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.dateCreation, {
                                'label': 'Date de création',
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.dateValidite, {
                                'label': 'Date de validité',
                                'attr': {'class': 'form-control'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.statut, {
                                'label': 'Statut',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Adresses et contacts -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-address-card me-2"></i>Adresses et contacts</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.contactFacturation, {
                                'label': 'Contact facturation',
                                'attr': {'class': 'form-select'}
                            }) }}
                            {{ form_row(form.adresseFacturation, {
                                'label': 'Adresse facturation',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.contactLivraison, {
                                'label': 'Contact livraison',
                                'attr': {'class': 'form-select'}
                            }) }}
                            {{ form_row(form.adresseLivraison, {
                                'label': 'Adresse livraison',
                                'attr': {'class': 'form-select'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Éléments du devis -->
            <div class="form-section">
                <div class="form-section-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <h5 class="mb-0 me-3"><i class="fas fa-list me-2"></i>Éléments du devis</h5>
                        </div>
                    </div>
                </div>
                <div class="form-section-body">
                    <!-- Conteneur des éléments -->
                    <div id="elements-container" class="border rounded p-3">
                        <!-- Les éléments seront chargés ici via JavaScript -->
                        <div class="text-center text-muted p-4">
                            <i class="fas fa-spinner fa-spin"></i> Chargement des éléments...
                        </div>
                    </div>

                </div>
            </div>

            <!-- Conditions commerciales -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-handshake me-2"></i>Conditions commerciales</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            {{ form_row(form.acomptePercent, {
                                'label': 'Acompte (%)',
                                'attr': {'class': 'form-control', 'min': 0, 'max': 100, 'step': 0.01}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.acompteMontant, {
                                'label': 'Acompte (montant fixe)',
                                'attr': {'class': 'form-control', 'min': 0, 'step': 0.01}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            {{ form_row(form.remiseGlobalePercent, {
                                'label': 'Remise globale (%)',
                                'attr': {'class': 'form-control', 'min': 0, 'max': 100, 'step': 0.01, 'id': 'remise-percent-main'}
                            }) }}
                        </div>
                        <div class="col-md-3">
                            {{ form_row(form.remiseGlobaleMontant, {
                                'label': 'Remise globale (€)',
                                'attr': {'class': 'form-control', 'min': 0, 'step': 0.01, 'id': 'remise-montant-main'}
                            }) }}
                        </div>
                        <div class="col-md-6">
                            {{ form_row(form.delaiLivraison, {
                                'label': 'Délai de livraison',
                                'attr': {'class': 'form-control', 'placeholder': 'Ex: 2-3 semaines'}
                            }) }}
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            {{ form_row(form.notesClient, {
                                'label': 'Notes client',
                                'attr': {'class': 'form-control', 'rows': 3, 'placeholder': 'Notes visibles par le client'}
                            }) }}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Historique -->
            <div class="form-section">
                <div class="form-section-header">
                    <h5 class="mb-0"><i class="fas fa-history me-2"></i>Historique</h5>
                </div>
                <div class="form-section-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Créé le :</strong> {{ devis.createdAt|date('d/m/Y à H:i') }}</p>
                            {% if devis.dateEnvoi %}
                                <p><strong>Envoyé le :</strong> {{ devis.dateEnvoi|date('d/m/Y à H:i') }}</p>
                            {% endif %}
                        </div>
                        <div class="col-md-6">
                            {% if devis.updatedAt %}
                                <p><strong>Modifié le :</strong> {{ devis.updatedAt|date('d/m/Y à H:i') }}</p>
                            {% endif %}
                            {% if devis.dateSignature %}
                                <p><strong>Signé le :</strong> {{ devis.dateSignature|date('d/m/Y à H:i') }}</p>
                                <p><strong>Par :</strong> {{ devis.signatureNom }} ({{ devis.signatureEmail }})</p>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            <!-- Message d'alerte pour devis envoyé -->
            {% if devis.statut in ['envoye', 'signe'] %}
                <div class="alert alert-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Attention :</strong> Ce devis a déjà été envoyé. 
                    Toute modification créera automatiquement une version pour conserver l'historique.
                </div>
            {% endif %}
        </div>
    </div>

    {# Render devisItems field as hidden to prevent form_rest from creating duplicate buttons #}
    <div style="display: none;">
        {{ form_widget(form.devisItems) }}
    </div>
    
    {{ form_rest(form) }}
    {{ form_end(form) }}
</div>

<!-- Panneau récapitulatif flottant -->
<div class="floating-summary" id="floating-summary">
    <div class="floating-summary-toggle" id="summary-toggle">
        <i class="fas fa-calculator me-2"></i>
        <span class="summary-total-display">{{ devis.totalHt }}€ HT</span>
        <i class="fas fa-chevron-up toggle-icon"></i>
    </div>
    <div class="floating-summary-content" id="summary-content">
        <div class="summary-breakdown">
            <!-- Total HT (dans la bande verte) -->
            <div class="summary-line total-ht-line">
                <span class="summary-label">Total HT :</span>
                <span class="summary-value total-ht">{{ devis.totalHt }}€</span>
            </div>
            
            <!-- Remise globale (affichage dynamique) -->
            <div class="summary-line remise-line" style="display: none;">
                <span class="summary-label">Remise globale :</span>
                <span class="summary-value remise-display"></span>
            </div>
            
            <!-- Total HT après remise (seulement si remise > 0) -->
            {% if (devis.remiseGlobalePercent and devis.remiseGlobalePercent > 0) or (devis.remiseGlobaleMontant and devis.remiseGlobaleMontant > 0) %}
            <div class="summary-line total-ht-remise-line">
                <span class="summary-label">Total HT remisé :</span>
                <span class="summary-value total-ht-remise">{{ (devis.totalHt - (devis.remiseGlobaleMontant ?? 0)) }}€</span>
            </div>
            {% endif %}
            
            <!-- TVA globale -->
            <div class="summary-line tva-line">
                <span class="summary-label">TVA :</span>
                <span class="summary-value total-tva">{{ devis.totalTva }}€</span>
            </div>
            
            <!-- Total TTC final -->
            <div class="summary-line total-ttc-line">
                <span class="summary-label">Total TTC :</span>
                <span class="summary-value total-ttc fw-bold">{{ devis.totalTtc }}€</span>
            </div>
        </div>
    </div>
</div>

<!-- Barre flottante d'actions -->
<div class="floating-action-bar" id="floating-actions">
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span class="text-white me-3">
                    <i class="fas fa-file-invoice me-2"></i>
                    <strong>{{ devis.numeroDevis }}</strong>
                    <span class="badge bg-{{ devis.statutCouleur }} ms-2">{{ devis.statutLibelle }}</span>
                </span>
            </div>
            <div class="d-flex gap-2">
                <button type="submit" name="action" value="save" class="btn btn-light" form="devis-form">
                    <i class="fas fa-save me-1"></i>
                    {% if devis.statut in ['envoye', 'signe'] %}
                        Modifier et créer une version
                    {% else %}
                        Enregistrer les modifications
                    {% endif %}
                </button>
                
                {% if devis.statut == 'brouillon' %}
                    <button type="submit" name="action" value="save_and_send" class="btn btn-success" form="devis-form">
                        <i class="fas fa-paper-plane me-1"></i>Enregistrer et envoyer
                    </button>
                {% endif %}
                
                <a href="{{ path('app_devis_pdf', {'id': devis.id}) }}" target="_blank" class="btn btn-info">
                    <i class="fas fa-file-pdf me-1"></i>PDF
                </a>
                
                <a href="{{ path('app_devis_show', {'id': devis.id}) }}" class="btn btn-secondary">
                    <i class="fas fa-eye me-1"></i>Voir
                </a>
                
                <a href="{{ path('app_devis_index') }}" class="btn btn-outline-light">
                    <i class="fas fa-times me-1"></i>Annuler
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Modal pour éditer un élément -->
<div class="modal fade" id="element-modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="element-modal-title">Modifier l'élément</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Le contenu sera injecté dynamiquement -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="save-element-btn">Enregistrer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modale d'édition de description avec éditeur WYSIWYG -->
<div class="modal fade description-modal" id="description-editor-modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>
                    Éditer la description détaillée
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <div id="description-editor" style="height: 400px;"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Annuler
                </button>
                <button type="button" class="btn btn-success" id="save-description-btn">
                    <i class="fas fa-save me-1"></i>Enregistrer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Panneau flottant pour éléments de mise en forme -->
{% if devis.statut == 'brouillon' %}
<div id="layout-elements-panel" class="layout-panel">
    <div class="layout-panel-header">
        <h6 class="mb-0"><i class="fas fa-magic me-2"></i>Mise en forme</h6>
        <button type="button" class="btn-close btn-close-white" id="close-layout-panel"></button>
    </div>
    <div class="layout-panel-body">
        <p class="small text-muted mb-3">Glissez les éléments dans le devis</p>
        
        <div class="layout-element-item" draggable="true" data-element-type="section_title">
            <i class="fas fa-heading"></i>
            <span>Titre de section</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="subtotal">
            <i class="fas fa-calculator"></i>
            <span>Sous-total</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="line_break">
            <i class="fas fa-minus"></i>
            <span>Saut de ligne</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="page_break">
            <i class="fas fa-file-alt"></i>
            <span>Saut de page</span>
        </div>
        
        <div class="layout-element-item" draggable="true" data-element-type="separator">
            <i class="fas fa-ellipsis-h"></i>
            <span>Séparateur</span>
        </div>
    </div>
</div>

<!-- Bouton pour ouvrir le panneau -->
<button type="button" id="open-layout-panel" class="btn btn-secondary layout-panel-toggle">
    <i class="fas fa-magic"></i>
</button>
{% endif %}

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <style>
        .page-header {
            background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
            color: white;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
        }
        .form-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }
        .form-section-header {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
            padding: 1rem 1.5rem;
            font-weight: 600;
        }
        .form-section-body {
            padding: 1.5rem;
        }
        
        /* Alignement parfait des lignes de devis */
        .devis-item .d-flex > div {
            display: flex;
            align-items: flex-start !important;
        }
        
        .devis-item .form-control,
        .devis-item .form-select {
            margin: 0 !important;
            padding-top: 0.25rem !important;
            padding-bottom: 0.25rem !important;
            height: 31px !important;
            line-height: 1.2 !important;
        }
        
        .devis-headers > div,
        .devis-item .d-flex > div {
            vertical-align: top !important;
            display: flex !important;
            align-items: flex-start !important;
        }
        
        /* Forcer l'alignement des en-têtes avec les colonnes */
        .devis-headers {
            border: 1px solid #dee2e6;
        }
        
        .devis-headers > div {
            border-right: 1px solid #e9ecef;
            padding-left: 4px !important;
            padding-right: 4px !important;
        }
        
        .devis-item .d-flex > div {
            border-right: 1px solid rgba(0,0,0,0.05);
            padding-left: 4px !important;
            padding-right: 4px !important;
        }
        /* Barre flottante d'actions */
        .floating-action-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(135deg, #6f42c1 0%, #e83e8c 100%);
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
            z-index: 1050;
            padding: 12px 0;
        }
        
        /* Lignes de devis compactes */
        .devis-item {
            transition: background-color 0.2s;
        }
        
        .devis-item:hover {
            background-color: #f8f9fa;
        }
        
        .devis-headers {
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        /* Ajustement pour éviter que le contenu passe sous les barres flottantes */
        body {
            padding-bottom: 140px; /* Augmenté pour la double barre */
        }
        
        /* Panneau récapitulatif flottant */
        .floating-summary {
            position: fixed;
            bottom: 70px; /* Au-dessus de la barre d'actions */
            right: 20px;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1040;
            min-width: 320px;
            max-width: 600px;
        }
        
        .floating-summary-toggle {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 12px 16px;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-weight: 600;
            transition: background 0.2s;
        }
        
        .floating-summary-toggle:hover {
            background: linear-gradient(135deg, #218838 0%, #1fa085 100%);
        }
        
        .floating-summary-content {
            padding: 16px;
            border-radius: 0 0 8px 8px;
            display: none; /* Caché par défaut */
            background: white;
        }
        
        .floating-summary.expanded .floating-summary-content {
            display: block;
        }
        
        .floating-summary.expanded .toggle-icon {
            transform: rotate(180deg);
        }
        
        .toggle-icon {
            transition: transform 0.2s;
        }
        
        /* Nouvelles lignes du récapitulatif */
        .summary-breakdown {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .summary-line {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }
        
        .summary-line:last-child {
            border-bottom: none;
            border-top: 2px solid #28a745;
            padding-top: 12px;
            margin-top: 8px;
        }
        
        .summary-label {
            font-weight: 600;
            color: #495057;
        }
        
        .summary-value {
            font-weight: 600;
            color: #28a745;
        }
        
        .total-ttc-line .summary-value {
            font-size: 1.1rem;
            color: #28a745;
        }
        
        .remise-controls {
            flex: 1;
            margin-left: 16px;
        }
        
        .remise-line .input-group {
            max-width: 200px;
        }
        
        .remise-line .input-group .form-control {
            font-size: 0.875rem;
        }
        
        /* Masquer les flèches des inputs numériques */
        .no-spinners::-webkit-outer-spin-button,
        .no-spinners::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        .no-spinners {
            -moz-appearance: textfield;
        }
        
        .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 4px 0;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .summary-item:last-child {
            border-bottom: none;
        }
        
        .summary-label {
            color: #6c757d;
            font-size: 0.875rem;
        }
        
        .summary-value {
            font-weight: 600;
            color: #495057;
        }
        
        .summary-total-display {
            font-size: 1.1rem;
            font-weight: 700;
        }
        
        /* Champs compacts */
        .form-control-sm {
            font-size: 0.875rem;
        }
        
        /* Totaux mis en évidence */
        .total-display, .total-ligne-display {
            font-weight: 600;
            color: #198754;
        }
        
        /* Responsive pour écrans plus petits */
        @media (max-width: 768px) {
            .floating-action-bar .d-flex {
                flex-direction: column;
                gap: 8px;
            }
            .floating-action-bar {
                padding: 8px 0;
            }
        }

        /* Styles pour les modales d'édition description */
        .description-modal {
            z-index: 1055;
        }

        .description-modal .modal-dialog {
            max-width: 900px;
        }

        /* Style pour les icônes d'édition description */
        .edit-description-btn {
            padding: 2px 6px;
            margin-left: 5px;
            font-size: 12px;
            vertical-align: middle;
        }

        /* Styles pour les descriptions inline et avancées */
        .description-inline-input {
            transition: border-color 0.2s ease;
        }
        
        .description-inline-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.1rem rgba(0, 123, 255, 0.25);
        }
        
        /* Bouton éditeur avancé compact */
        .btn-advanced-editor {
            min-width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Quill Editor dans les modales */
        #description-toolbar {
            border: 1px solid #ccc;
            border-bottom: none;
            border-top-left-radius: 0.375rem;
            border-top-right-radius: 0.375rem;
            background: #f8f9fa;
            padding: 6px;
            display: flex;
            flex-wrap: wrap;
            gap: 3px;
            align-items: center;
            justify-content: flex-start;
        }
        
        #description-toolbar select {
            padding: 4px 8px;
            border: 1px solid #ccc;
            border-radius: 3px;
            background: white;
            font-size: 13px;
            white-space: nowrap;
        }
        
        /* Styles spécifiques pour les menus font et size - approche forcée */
        #description-toolbar .ql-font .ql-picker {
            min-width: 180px !important;
            width: 180px !important;
            max-width: 180px !important;
        }
        
        #description-toolbar .ql-size .ql-picker {
            min-width: 140px !important;
            width: 140px !important;
            max-width: 140px !important;
        }
        
        #description-toolbar .ql-font .ql-picker-label,
        #description-toolbar .ql-size .ql-picker-label {
            width: 100% !important;
            min-width: 100% !important;
            padding: 4px 8px !important;
            white-space: nowrap !important;
            overflow: visible !important;
            text-overflow: clip !important;
            display: block !important;
            box-sizing: border-box !important;
        }
        
        #description-toolbar .ql-font .ql-picker-options,
        #description-toolbar .ql-size .ql-picker-options {
            min-width: 180px !important;
            width: 180px !important;
        }
        
        /* Préserver les color pickers - taille normale */
        #description-toolbar .ql-color .ql-picker,
        #description-toolbar .ql-background .ql-picker,
        #description-toolbar .ql-align .ql-picker {
            min-width: 28px !important;
            width: 28px !important;
            max-width: 28px !important;
        }
        
        /* Forcer la largeur avec une approche CSS plus agressive */
        #description-toolbar span.ql-picker[class*="ql-font"] {
            width: 180px !important;
            min-width: 180px !important;
        }
        
        #description-toolbar span.ql-picker[class*="ql-size"] {
            width: 140px !important;
            min-width: 140px !important;
        }
        
        #description-toolbar button {
            background: white;
            border: 1px solid #ccc;
            border-radius: 3px;
            padding: 6px 8px;
            cursor: pointer;
            font-size: 13px;
            min-width: 28px;
            height: 28px;
        }
        
        #description-toolbar button:hover {
            background: #e9ecef;
        }
        
        #description-toolbar button.ql-active {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
        
        .ql-container.ql-snow {
            border-bottom-left-radius: 0.375rem;
            border-bottom-right-radius: 0.375rem;
        }
        
        .ql-editor {
            font-size: 14px;
            line-height: 1.6;
        }

        /* Styles pour les polices personnalisées dans Quill */
        .ql-font-arial {
            font-family: Arial, sans-serif;
        }
        .ql-font-helvetica {
            font-family: Helvetica, sans-serif;
        }
        .ql-font-times {
            font-family: 'Times New Roman', serif;
        }
        .ql-font-georgia {
            font-family: Georgia, serif;
        }
        .ql-font-verdana {
            font-family: Verdana, sans-serif;
        }
        .ql-font-courier {
            font-family: 'Courier New', monospace;
        }

        /* Styles pour les tailles personnalisées */
        .ql-size-10px {
            font-size: 10px;
        }
        .ql-size-12px {
            font-size: 12px;
        }
        .ql-size-14px {
            font-size: 14px;
        }
        .ql-size-16px {
            font-size: 16px;
        }
        .ql-size-18px {
            font-size: 18px;
        }
        .ql-size-20px {
            font-size: 20px;
        }
        .ql-size-22px {
            font-size: 22px;
        }
        .ql-size-24px {
            font-size: 24px;
        }

        /* Personnalisation des menus déroulants */
        .ql-picker-label {
            padding: 4px 8px;
        }
        
        .ql-picker-options {
            max-height: 200px;
            overflow-y: auto;
        }

        /* Prévisualisation des polices dans les selects */
        #description-toolbar select.ql-font option[value="arial"] {
            font-family: Arial, sans-serif;
        }
        
        #description-toolbar select.ql-font option[value="helvetica"] {
            font-family: Helvetica, sans-serif;
        }
        
        #description-toolbar select.ql-font option[value="times"] {
            font-family: 'Times New Roman', serif;
        }
        
        #description-toolbar select.ql-font option[value="georgia"] {
            font-family: Georgia, serif;
        }
        
        #description-toolbar select.ql-font option[value="verdana"] {
            font-family: Verdana, sans-serif;
        }
        
        #description-toolbar select.ql-font option[value="courier"] {
            font-family: 'Courier New', monospace;
        }
    </style>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

<script>
(function() {
    'use strict';
    
    // Éviter les redéclarations si le script est chargé plusieurs fois
    if (window.devisEditLoaded) {
        return;
    }
    window.devisEditLoaded = true;

    // Configuration globale
    const DEVIS_ID = {{ devis.id }};
    const devisId = DEVIS_ID; // Alias pour compatibilité
    const IS_EDITABLE = {{ devis.statut == 'brouillon' ? 'true' : 'false' }};

    let elements = [];
    let devisSortable = null;

// ==========================================
// INITIALISATION
// ==========================================

async function init() {
    try {
        await loadElements();
        if (IS_EDITABLE) {
            initSortable();
            initEventListeners();
            initLayoutPanel();
        }
        calculateTotals();
    } catch (error) {
        console.error('Erreur d\'initialisation:', error);
        showError('Erreur lors du chargement des données');
    }
}

// ==========================================
// CHARGEMENT DES ÉLÉMENTS
// ==========================================

async function loadElements() {
    try {
        const response = await fetch(`/devis/${DEVIS_ID}/element`);
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }
        
        elements = data.elements;
        renderElements();
        
    } catch (error) {
        console.error('Erreur chargement éléments:', error);
        showError('Impossible de charger les éléments du devis');
    }
}

// ==========================================
// RENDU DES ÉLÉMENTS
// ==========================================

function renderElements() {
    const container = document.getElementById('elements-container');
    
    let html = '';
    
    // En-têtes colonnes si on a des éléments ou si éditable
    if (elements.length > 0 || IS_EDITABLE) {
        html += `
            <!-- En-têtes colonnes uniformes (90px à droite) -->
            <div class="d-flex devis-headers mb-2 py-2 bg-light rounded align-items-start" style="gap: 2px; height: 35px;">
                ${IS_EDITABLE ? '<div style="width: 25px; padding: 4px;" class="text-center"><small class="fw-bold text-muted"><i class="fas fa-arrows-alt-v" title="Réorganiser"></i></small></div>' : ''}
                <div style="width: 120px; padding: 4px;"><small class="fw-bold">Code</small></div>
                <div style="width: 225px; padding: 4px;"><small class="fw-bold">Désignation</small></div>
                <div class="flex-fill" style="padding: 4px;"><small class="fw-bold">Description détaillée</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">Qté</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">PU HT</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">% Rem.</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">TVA</small></div>
                <div style="width: 90px; padding: 4px;" class="text-center"><small class="fw-bold">Total HT</small></div>
                ${IS_EDITABLE ? '<div style="width: 30px; padding: 4px;"><small class="fw-bold"></small></div>' : ''}
            </div>
        `;
    }
    
    if (elements.length === 0) {
        html += `
            <div class="text-center text-muted p-4">
                <i class="fas fa-inbox"></i>
                <p class="mt-2">Aucun élément dans ce devis</p>
                ${IS_EDITABLE ? '<p class="small">Utilisez le bouton "Ajouter produit" pour commencer</p>' : ''}
            </div>
        `;
    } else {
        html += elements.map(element => renderElement(element)).join('');
    }
    
    // Bouton d'ajout de produit en bas
    if (IS_EDITABLE) {
        html += `
            <div class="mt-3 text-center">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-success add-item-btn" onclick="addElement('product')">
                        <i class="fas fa-plus me-2"></i>Ajouter une ligne
                    </button>
                    <button type="button" class="btn btn-success dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="visually-hidden">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="addElement('product')">
                            <i class="fas fa-edit me-2"></i>Ligne libre
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="showProductCatalog()">
                            <i class="fas fa-book me-2"></i>Produit du catalogue
                        </a></li>
                    </ul>
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
    
    // Initialiser l'autocomplétion après le rendu
    if (IS_EDITABLE) {
        setTimeout(() => initProductAutocomplete(), 100);
    }
}

function renderElement(element) {
    if (element.is_product) {
        return renderProductElement(element);
    } else {
        return renderLayoutElement(element);
    }
}

function renderProductElement(element) {
    const dragHandle = IS_EDITABLE ? `
        <div style="width: 25px; padding: 4px;" class="text-center drag-handle" title="Glisser pour réorganiser">
            <i class="fas fa-grip-vertical text-muted" style="cursor: grab;"></i>
        </div>
    ` : '';

    const deleteButton = IS_EDITABLE ? `
        <div style="width: 30px; padding: 4px;" class="text-center">
            <button type="button" class="btn btn-outline-danger btn-sm remove-item-btn" title="Supprimer" style="padding: 2px 4px; font-size: 10px;" onclick="event.preventDefault(); event.stopPropagation(); deleteElement(${element.id}); return false;">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    ` : '';

    if (IS_EDITABLE) {
        return `
            <div class="element-item mb-1 border-bottom" data-element-id="${element.id}" data-element-type="product">
                <div class="d-flex align-items-start" style="gap: 2px; min-height: 35px;">
                    ${dragHandle}
                    
                    <!-- Code article (120px) -->
                    <div style="width: 120px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm code-article-input" 
                               placeholder="Code..." value="${element.produit_reference || ''}"
                               data-element-id="${element.id}"
                               onchange="updateElement(${element.id}, 'produit_reference', this.value)"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Désignation (225px) -->
                    <div style="width: 225px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm designation-input" 
                               placeholder="Désignation..."
                               value="${element.designation || ''}" 
                               data-element-id="${element.id}"
                               onchange="updateElement(${element.id}, 'designation', this.value)"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Description détaillée (flex-fill) -->
                    <div class="flex-fill" style="padding: 4px;">
                        <div class="d-flex align-items-center">
                            <input type="text" class="form-control form-control-sm description-inline-input flex-fill" 
                                   placeholder="Description simple..." 
                                   value="${element.description ? cleanDescriptionForInput(element.description) : ''}"
                                   onchange="updateElement(${element.id}, 'description', this.value)"
                                   onkeypress="preventEnterSubmit(event)"
                                   onfocus="showDescriptionTooltip(this)" 
                                   style="margin-right: 4px;" />
                            <button type="button" class="btn btn-outline-secondary btn-sm" 
                                    onclick="openDescriptionEditor(${element.id}, \`${element.description ? element.description.replace(/`/g, '\\`').replace(/\\/g, '\\\\') : ''}\`)" 
                                    title="Éditeur avancé (formatage)"
                                    style="padding: 2px 6px; font-size: 10px;">
                                <i class="fas fa-palette"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Quantité (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm text-center quantity-input no-spinners" 
                               value="${element.quantite || 1}" 
                               pattern="[0-9]*[.,]?[0-9]*"
                               onchange="updateElement(${element.id}, 'quantite', this.value)"
                               oninput="this.value = this.value.replace(/[^0-9.,]/g, '')"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- Prix unitaire HT (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm text-end price-input no-spinners" 
                               placeholder="0.00"
                               value="${parseFloat(element.prix_unitaire_ht || 0).toFixed(2)}"
                               pattern="[0-9]*[.,]?[0-9]*"
                               onchange="updateElement(${element.id}, 'prix_unitaire_ht', this.value)"
                               oninput="this.value = this.value.replace(/[^0-9.,]/g, '')"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- % Remise (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <input type="text" class="form-control form-control-sm text-center remise-input no-spinners" 
                               placeholder="0.0"
                               value="${parseFloat(element.remise_percent || 0).toFixed(1)}"
                               pattern="[0-9]*[.,]?[0-9]*"
                               onchange="updateElement(${element.id}, 'remise_percent', this.value)"
                               oninput="this.value = this.value.replace(/[^0-9.,]/g, '')"
                               onkeypress="preventEnterSubmit(event)" />
                    </div>
                    
                    <!-- TVA (90px) -->
                    <div style="width: 90px; padding: 4px;">
                        <select class="form-select form-select-sm tva-select" 
                                onchange="updateElement(${element.id}, 'tva_percent', this.value)">
                            <option value="0" ${element.tva_percent == 0 ? 'selected' : ''}>0%</option>
                            <option value="5.5" ${element.tva_percent == 5.5 ? 'selected' : ''}>5.5%</option>
                            <option value="10" ${element.tva_percent == 10 ? 'selected' : ''}>10%</option>
                            <option value="20" ${element.tva_percent == 20 ? 'selected' : ''}>20%</option>
                        </select>
                    </div>
                    
                    <!-- Total HT ligne (90px) -->
                    <div style="width: 90px; padding: 4px;" class="text-center">
                        <small class="total-ligne-display fw-bold text-success" style="font-size: 0.75rem; line-height: 23px;">
                            ${parseFloat(element.total_ligne_ht || 0).toFixed(2)} €
                        </small>
                    </div>
                    
                    ${deleteButton}
                </div>
            </div>
        `;
    } else {
        // Mode lecture seule
        return `
            <div class="element-item border rounded p-3 mb-2" data-element-id="${element.id}" data-element-type="product">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <div class="row">
                            <div class="col-md-4">
                                <strong>${element.designation || 'Produit sans nom'}</strong>
                                ${element.description ? `<br><div class="text-muted" style="font-size: 0.875rem; line-height: 1.4;">${element.description}</div>` : ''}
                            </div>
                            <div class="col-md-2 text-center">
                                ${parseFloat(element.quantite || 0)}
                            </div>
                            <div class="col-md-2 text-end">
                                ${parseFloat(element.prix_unitaire_ht || 0).toFixed(2)} €
                            </div>
                            <div class="col-md-2 text-center">
                                ${parseFloat(element.remise_percent || 0)}%
                            </div>
                            <div class="col-md-2 text-end">
                                <strong>${parseFloat(element.total_ligne_ht || 0).toFixed(2)} €</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
}

function renderLayoutElement(element) {
    const dragHandle = IS_EDITABLE ? `
        <div class="drag-handle me-2" style="cursor: grab;">
            <i class="fas fa-grip-vertical text-muted"></i>
        </div>
    ` : '';

    const deleteButton = IS_EDITABLE ? `
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="event.preventDefault(); event.stopPropagation(); deleteElement(${element.id}); return false;">
            <i class="fas fa-trash"></i>
        </button>
    ` : '';

    let content = '';
    switch(element.type) {
        case 'section_title':
            if (IS_EDITABLE) {
                content = `<div class="d-flex align-items-center">
                    <i class="${element.icon} me-2"></i>
                    <input type="text" class="form-control form-control-sm fw-bold border-0 bg-transparent" 
                           value="${element.titre || element.display_label || ''}" 
                           placeholder="Titre de la section..."
                           style="font-size: 1.25rem; color: inherit;"
                           onchange="updateElement(${element.id}, 'titre', this.value)"
                           onblur="updateElement(${element.id}, 'titre', this.value)"
                           onkeypress="preventEnterSubmit(event)" />
                </div>`;
            } else {
                content = `<h5 class="mb-0"><i class="${element.icon}"></i> ${element.titre || element.display_label}</h5>`;
            }
            break;
        case 'subtotal':
            const subtotalLabel = element.titre || element.display_label;
            if (IS_EDITABLE) {
                content = `<div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center flex-grow-1 me-3">
                        <i class="${element.icon} me-2"></i>
                        <input type="text" class="form-control form-control-sm subtotal-title-input" 
                               style="border: 1px solid #ddd;" 
                               value="${subtotalLabel}" 
                               onchange="updateElementTitle(${element.id}, this.value)"
                               placeholder="Libellé du sous-total">
                    </div>
                    <strong class="subtotal-amount">${calculateSubtotalUpTo(element.position).toFixed(2)} €</strong>
                </div>`;
            } else {
                content = `<div class="d-flex justify-content-between align-items-center">
                    <span><i class="${element.icon}"></i> ${subtotalLabel}</span>
                    <strong class="subtotal-amount">${calculateSubtotalUpTo(element.position).toFixed(2)} €</strong>
                </div>`;
            }
            break;
        case 'line_break':
            content = `<hr class="my-1">`;
            break;
        case 'page_break':
            content = `<div class="text-center text-muted py-2">
                <i class="${element.icon}"></i> ${element.display_label}
                <hr class="border-2">
            </div>`;
            break;
        case 'separator':
            content = `<div class="text-center">
                <i class="${element.icon}"></i> ${element.display_label}
            </div>`;
            break;
        default:
            content = `<i class="${element.icon}"></i> ${element.display_label}`;
    }

    return `
        <div class="element-item border rounded p-2 mb-2 bg-light" data-element-id="${element.id}" data-element-type="${element.type}">
            <div class="d-flex align-items-center">
                ${dragHandle}
                <div class="flex-grow-1">
                    ${content}
                </div>
                <div class="ms-2">
                    ${deleteButton}
                </div>
            </div>
        </div>
    `;
}

// ==========================================
// GESTION DU DRAG & DROP
// ==========================================

function initSortable() {
    const container = document.getElementById('elements-container');
    
    if (devisSortable) {
        devisSortable.destroy();
    }

    devisSortable = new Sortable(container, {
        handle: '.drag-handle',
        animation: 150,
        ghostClass: 'sortable-ghost',
        chosenClass: 'sortable-chosen',
        dragClass: 'sortable-drag',
        filter: '.devis-headers, .text-center.text-muted, .btn-group, .mt-3, .add-item-btn',
        preventOnFilter: false,
        onMove: function(evt, originalEvent) {
            // Empêcher le déplacement vers les en-têtes ou éléments non-draggables
            const related = evt.related;
            if (related && (related.classList.contains('devis-headers') || 
                          related.classList.contains('text-center') || 
                          related.classList.contains('btn-group') ||
                          related.classList.contains('add-item-btn'))) {
                return false; // Empêcher le déplacement
            }
            return true; // Autoriser le déplacement
        },
        onEnd: function(evt) {
            // Vérifier que c'est bien un déplacement d'élément existant
            if (evt.item && evt.item.dataset.elementId) {
                const elementIds = Array.from(container.children)
                    .filter(child => child.dataset.elementId && !isNaN(parseInt(child.dataset.elementId)))
                    .map(child => parseInt(child.dataset.elementId));
                    
                if (elementIds.length > 0) {
                    reorderElements(elementIds);
                }
            }
        }
    });
}

// ==========================================
// ACTIONS SUR LES ÉLÉMENTS
// ==========================================

window.addElement = async function(type, position = null) {
    try {
        const data = { type };
        if (position !== null) {
            data.position = position;
        }

        const response = await fetch(`/devis/${DEVIS_ID}/element`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message);
        }

        await loadElements();
        calculateTotals();
        showSuccess('Élément ajouté avec succès');
        
    } catch (error) {
        console.error('Erreur ajout élément:', error);
        showError('Impossible d\'ajouter l\'élément');
    }
}

async function deleteElement(elementId) {
    try {
        const response = await fetch(`/devis/${DEVIS_ID}/element/${elementId}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message);
        }

        await loadElements();
        calculateTotals();
        showSuccess('Élément supprimé avec succès');
        
    } catch (error) {
        console.error('Erreur suppression élément:', error);
        showError('Impossible de supprimer l\'élément');
    }
}

async function reorderElements(elementIds) {
    try {
        // Vérifier qu'on a des IDs valides
        if (!elementIds || elementIds.length === 0) {
            return;
        }

        const response = await fetch(`/devis/${DEVIS_ID}/element/reorder`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ elementIds })
        });

        const result = await response.json();
        
        if (!result.success) {
            console.warn('Réorganisation non appliquée:', result.message);
            return;
        }

        // Mettre à jour l'ordre local et les nouvelles positions
        elements.sort((a, b) => {
            const indexA = elementIds.indexOf(a.id);
            const indexB = elementIds.indexOf(b.id);
            return indexA - indexB;
        });

        // Mettre à jour les positions dans le tableau elements (1-indexed)
        elements.forEach((element, index) => {
            element.position = index + 1;
        });

        calculateTotals();
        
        // Forcer la mise à jour des sous-totaux après réorganisation
        updateSubtotals();
        
    } catch (error) {
        console.error('Erreur réorganisation:', error);
        // Ne pas afficher d'erreur utilisateur pour le drag & drop
    }
}

// ==========================================
// CALCULS
// ==========================================

function calculateTotals() {
    const productElements = elements.filter(e => e.is_product);
    
    let totalHt = 0;
    let totalTva = 0;
    
    productElements.forEach(element => {
        // Recalculer le total de ligne à partir des données de base
        const quantite = parseFloat(element.quantite || 1);
        const prixUnitaire = parseFloat(element.prix_unitaire_ht || 0);
        const remisePercent = parseFloat(element.remise_percent || 0);
        const tvaPercent = parseFloat(element.tva_percent || 0);
        
        const lineHt = quantite * prixUnitaire * (1 - remisePercent / 100);
        
        totalHt += lineHt;
        totalTva += lineHt * (tvaPercent / 100);
    });
    
    // Notifier le système de remise du total HT avant remise
    if (window.updateTotalHtForRemise) {
        window.updateTotalHtForRemise(totalHt);
    }
    
    // Calculer la remise globale depuis les champs des conditions commerciales
    let remisePercentEl = document.getElementById('remise-percent-main') || document.getElementById('devis_remiseGlobalePercent');
    let remiseMontantEl = document.getElementById('remise-montant-main') || document.getElementById('devis_remiseGlobaleMontant');
    
    const remisePercent = parseFloat(remisePercentEl?.value || 0);
    const remiseMontantSaisie = parseFloat(remiseMontantEl?.value || 0);
    
    // Calculer la remise : priorité au pourcentage si les deux sont renseignés
    let remiseMontant = 0;
    if (remisePercent > 0) {
        remiseMontant = totalHt * (remisePercent / 100);
    } else if (remiseMontantSaisie > 0) {
        remiseMontant = remiseMontantSaisie;
    }
    
    const totalHtRemise = totalHt - remiseMontant;
    const totalTvaRemise = totalHtRemise * (totalTva / totalHt || 0); // Proportionnelle
    const totalTtc = totalHtRemise + totalTvaRemise;
    
    // Mettre à jour les totaux dans l'interface principale si les éléments existent
    const totalHtEl = document.getElementById('total-ht');
    const totalTvaEl = document.getElementById('total-tva');
    const totalTtcEl = document.getElementById('total-ttc');
    
    if (totalHtEl) totalHtEl.textContent = totalHtRemise.toFixed(2) + ' €'; // Afficher HT remisé dans l'interface principale
    if (totalTvaEl) totalTvaEl.textContent = totalTvaRemise.toFixed(2) + ' €';
    if (totalTtcEl) totalTtcEl.textContent = totalTtc.toFixed(2) + ' €';
    
    // Mettre à jour les totaux dans le panneau flottant avec la nouvelle structure
    const floatingTotalHt = document.querySelector('.floating-summary .total-ht');
    const floatingTotalHtRemise = document.querySelector('.floating-summary .total-ht-remise');
    const floatingTotalHtRemiseLine = document.querySelector('.floating-summary .total-ht-remise-line');
    const floatingTotalTva = document.querySelector('.floating-summary .total-tva');
    const floatingTotalTtc = document.querySelector('.floating-summary .total-ttc');
    const floatingSummaryDisplay = document.querySelector('.summary-total-display');
    
    if (floatingTotalHt) floatingTotalHt.textContent = totalHt.toFixed(2) + '€';
    
    // Gestion de l'affichage de la remise globale
    const floatingRemiseLine = document.querySelector('.floating-summary .remise-line');
    const floatingRemiseDisplay = document.querySelector('.floating-summary .remise-display');
    
    if (floatingRemiseLine && floatingRemiseDisplay) {
        if (remiseMontant > 0) {
            floatingRemiseLine.style.display = 'flex';
            let remiseText = '';
            if (remisePercent > 0) {
                remiseText += remisePercent + '%';
            }
            if (remisePercent > 0 && remiseMontantSaisie > 0) {
                remiseText += ' / ';
            }
            if (remiseMontantSaisie > 0) {
                remiseText += remiseMontantSaisie.toFixed(2) + '€';
            }
            floatingRemiseDisplay.textContent = remiseText;
        } else {
            floatingRemiseLine.style.display = 'none';
        }
    }
    
    // Afficher/masquer et mettre à jour le total HT remisé seulement si il y a une remise
    if (floatingTotalHtRemiseLine) {
        if (remiseMontant > 0) {
            floatingTotalHtRemiseLine.style.display = 'flex';
            if (floatingTotalHtRemise) floatingTotalHtRemise.textContent = totalHtRemise.toFixed(2) + '€';
        } else {
            floatingTotalHtRemiseLine.style.display = 'none';
        }
    }
    
    if (floatingTotalTva) floatingTotalTva.textContent = totalTvaRemise.toFixed(2) + '€';
    if (floatingTotalTtc) floatingTotalTtc.textContent = totalTtc.toFixed(2) + '€';
    // Affichage dans la barre de résumé : TTC final ou HT selon présence de remise
    if (floatingSummaryDisplay) {
        if (remiseMontant > 0) {
            floatingSummaryDisplay.textContent = totalTtc.toFixed(2) + '€ TTC';
        } else {
            floatingSummaryDisplay.textContent = totalHt.toFixed(2) + '€ HT';
        }
    }
    
    // Sauvegarder automatiquement les totaux en base
    saveDevisTotalsAutomatically(totalHtRemise, totalTvaRemise, totalTtc);
    
    // Mettre à jour les sous-totaux
    updateSubtotals();
}

function calculateSubtotalUpTo(position) {
    let subtotal = 0;
    
    // Trouver la position du dernier sous-total avant la position courante
    let lastSubtotalPosition = 0;
    elements.forEach(element => {
        if (element.type === 'subtotal' && element.position < position) {
            lastSubtotalPosition = Math.max(lastSubtotalPosition, element.position);
        }
    });
    
    // Parcourir les éléments et sommer uniquement les produits entre le dernier sous-total et la position courante
    elements.forEach(element => {
        if (element.is_product && element.position > lastSubtotalPosition && element.position < position) {
            // Calculer le total de ligne à partir des données disponibles
            const quantite = parseFloat(element.quantite || 1);
            const prixUnitaire = parseFloat(element.prix_unitaire_ht || 0);
            const remisePercent = parseFloat(element.remise_percent || 0);
            
            const totalLigne = quantite * prixUnitaire * (1 - remisePercent / 100);
            subtotal += totalLigne;
        }
    });
    
    return subtotal;
}

function updateSubtotals() {
    document.querySelectorAll('.subtotal-amount').forEach(subtotalEl => {
        const elementItem = subtotalEl.closest('.element-item');
        const elementId = parseInt(elementItem.dataset.elementId);
        const element = elements.find(e => e.id === elementId);
        
        if (element) {
            const subtotal = calculateSubtotalUpTo(element.position);
            subtotalEl.textContent = subtotal.toFixed(2) + ' €';
        }
    });
}

// ==========================================
// GESTION TOUCHES CLAVIER
// ==========================================

function preventEnterSubmit(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        event.target.blur(); // Retire le focus du champ pour déclencher onblur/onchange
    }
}

// ==========================================
// EVENT LISTENERS
// ==========================================

function initEventListeners() {
    // Event listeners pour les éléments de l'interface

    // Synchronisation contact/adresse
    initContactAddressSynchronization();
    
    // Toggle panneau récapitulatif flottant
    const summaryToggle = document.getElementById('summary-toggle');
    const floatingSummary = document.getElementById('floating-summary');
    
    if (summaryToggle && floatingSummary) {
        summaryToggle.addEventListener('click', function() {
            floatingSummary.classList.toggle('expanded');
        });
    }
    
    // Gestion de la remise globale
    initGlobalRemise();
}

// ==========================================
// SAUVEGARDE AUTOMATIQUE DES TOTAUX
// ==========================================

function saveDevisTotalsAutomatically(totalHt, totalTva, totalTtc) {
    // Debounce pour éviter trop d'appels
    if (window.saveDevisTotalsTimeout) {
        clearTimeout(window.saveDevisTotalsTimeout);
    }
    
    window.saveDevisTotalsTimeout = setTimeout(async () => {
        try {
            // Récupérer les valeurs de remise actuelles
            let remisePercent = document.getElementById('remise-percent-main') || document.getElementById('devis_remiseGlobalePercent');
            let remiseMontant = document.getElementById('remise-montant-main') || document.getElementById('devis_remiseGlobaleMontant');
            
            const response = await fetch(`/devis/${DEVIS_ID}/update-totals`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    totalHt: totalHt.toFixed(2),
                    totalTva: totalTva.toFixed(2),
                    totalTtc: totalTtc.toFixed(2),
                    remiseGlobalePercent: parseFloat(remisePercent?.value || 0),
                    remiseGlobaleMontant: parseFloat(remiseMontant?.value || 0)
                })
            });
            
            if (!response.ok) {
                console.warn('Erreur sauvegarde automatique totaux:', response.status);
            } else {
                console.log('💾 Totaux + remise sauvés automatiquement - HT:', totalHt.toFixed(2), '€, TTC:', totalTtc.toFixed(2), '€, Remise:', remisePercent?.value || 0, '%');
            }
        } catch (error) {
            console.warn('Erreur réseau sauvegarde totaux:', error);
        }
    }, 1000); // Attendre 1 seconde après le dernier changement
}

// ==========================================
// GESTION REMISE GLOBALE
// ==========================================

function initGlobalRemise() {
    console.log('initGlobalRemise appelée');
    
    // Essayons de trouver les vrais IDs générés par Symfony
    let remisePercent = document.getElementById('remise-percent-main');
    let remiseMontant = document.getElementById('remise-montant-main');
    
    // Si pas trouvés avec nos IDs, cherchons avec les IDs Symfony standards
    if (!remisePercent) {
        remisePercent = document.getElementById('devis_remiseGlobalePercent');
    }
    if (!remiseMontant) {
        remiseMontant = document.getElementById('devis_remiseGlobaleMontant');
    }
    
    if (!remisePercent || !remiseMontant) {
        return;
    }
    
    let totalHt = 0;
    
    // Fonction pour mettre à jour le total HT et synchroniser automatiquement
    window.updateTotalHtForRemise = function(ht) {
        totalHt = ht;
        console.log('Total HT mis à jour:', totalHt);
        
        // Synchronisation automatique quand le total change
        const percentValue = parseFloat(remisePercent.value) || 0;
        const montantValue = parseFloat(remiseMontant.value) || 0;
        
        // Si un pourcentage est défini, recalculer le montant automatiquement
        if (percentValue > 0 && totalHt > 0) {
            const nouveauMontant = (totalHt * percentValue / 100);
            if (Math.abs(nouveauMontant - montantValue) > 0.01) { // Éviter les micro-changements
                remiseMontant.value = nouveauMontant.toFixed(2);
                console.log('💰 Montant auto-synchronisé:', nouveauMontant.toFixed(2), '€ (', percentValue, '% de', totalHt, '€)');
            }
        }
        // Sinon si un montant fixe est défini, recalculer le pourcentage
        else if (montantValue > 0 && totalHt > 0) {
            const nouveauPourcentage = (montantValue / totalHt * 100);
            if (Math.abs(nouveauPourcentage - percentValue) > 0.1) { // Éviter les micro-changements
                remisePercent.value = nouveauPourcentage.toFixed(1);
                console.log('📊 Pourcentage auto-synchronisé:', nouveauPourcentage.toFixed(1), '% (', montantValue, '€ sur', totalHt, '€)');
            }
        }
    };
    
    // Quand on change le pourcentage, calculer le montant
    remisePercent.addEventListener('input', function() {
        console.log('Pourcentage changé:', this.value, 'Total HT:', totalHt);
        const percent = parseFloat(this.value) || 0;
        if (percent > 0 && totalHt > 0) {
            const montant = (totalHt * percent / 100);
            remiseMontant.value = montant.toFixed(2);
            console.log('Montant calculé:', montant.toFixed(2));
        } else {
            remiseMontant.value = '';
        }
        calculateTotals();
    });
    
    // Quand on change le montant, calculer le pourcentage
    remiseMontant.addEventListener('input', function() {
        console.log('Montant changé:', this.value, 'Total HT:', totalHt);
        const montant = parseFloat(this.value) || 0;
        if (montant > 0 && totalHt > 0) {
            const percent = (montant / totalHt * 100);
            remisePercent.value = percent.toFixed(1);
            console.log('Pourcentage calculé:', percent.toFixed(1));
        } else {
            remisePercent.value = '';
        }
        calculateTotals();
    });
    
    // Event listeners pour détecter quand les champs sont vidés manuellement
    remisePercent.addEventListener('keyup', function() {
        if (this.value === '' || this.value === '0') {
            remiseMontant.value = '';
            calculateTotals();
        }
    });
    
    remiseMontant.addEventListener('keyup', function() {
        if (this.value === '' || this.value === '0') {
            remisePercent.value = '';
            calculateTotals();
        }
    });
}

// ==========================================
// SYNCHRONISATION CONTACT/ADRESSE
// ==========================================

function initContactAddressSynchronization() {
    const clientSelect = document.getElementById('devis_client');
    const contactFacturationSelect = document.getElementById('devis_contactFacturation');
    const contactLivraisonSelect = document.getElementById('devis_contactLivraison');
    const adresseFacturationSelect = document.getElementById('devis_adresseFacturation');
    const adresseLivraisonSelect = document.getElementById('devis_adresseLivraison');

    if (!clientSelect) return;

    // Charger contacts et adresses quand client change
    clientSelect.addEventListener('change', function() {
        const clientId = this.value;
        if (clientId) {
            loadClientContactsAndAddresses(clientId);
        } else {
            clearContactsAndAddresses();
        }
    });

    // Synchroniser adresse quand contact change
    if (contactFacturationSelect) {
        contactFacturationSelect.addEventListener('change', function() {
            const contactId = this.value;
            if (contactId && adresseFacturationSelect) {
                syncContactAddress(contactId, adresseFacturationSelect);
            }
        });
    }

    if (contactLivraisonSelect) {
        contactLivraisonSelect.addEventListener('change', function() {
            const contactId = this.value;
            if (contactId && adresseLivraisonSelect) {
                syncContactAddress(contactId, adresseLivraisonSelect);
            }
        });
    }

    // Charger les données initiales si un client est sélectionné
    if (clientSelect.value) {
        loadClientContactsAndAddresses(clientSelect.value);
    }
}

async function loadClientContactsAndAddresses(clientId) {
    try {
        // Charger les contacts
        const contactsResponse = await fetch(`/client/${clientId}/contacts`);
        const contactsData = await contactsResponse.json();
        
        // Charger les adresses
        const addressesResponse = await fetch(`/client/${clientId}/addresses`);  
        const addressesData = await addressesResponse.json();

        // Stocker les données pour la synchronisation
        window.clientContacts = contactsData;
        window.clientAddresses = addressesData;

        // Peupler les dropdowns
        populateContacts(contactsData);
        populateAddresses(addressesData);

    } catch (error) {
        console.error('Erreur chargement contacts/adresses:', error);
    }
}

function populateContacts(contacts) {
    const contactFacturationSelect = document.getElementById('devis_contactFacturation');
    const contactLivraisonSelect = document.getElementById('devis_contactLivraison');

    [contactFacturationSelect, contactLivraisonSelect].forEach(select => {
        if (!select) return;
        
        const currentValue = select.value;
        select.innerHTML = '<option value="">Sélectionner un contact...</option>';
        
        contacts.forEach(contact => {
            const option = document.createElement('option');
            option.value = contact.id;
            // Utiliser le label fourni par l'API ou construire à partir des données
            option.textContent = contact.label || `${contact.civilite || ''} ${contact.prenom || ''} ${contact.nom || ''}`.trim();
            if (contact.id == currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
    });
}

function populateAddresses(addresses) {
    const adresseFacturationSelect = document.getElementById('devis_adresseFacturation');
    const adresseLivraisonSelect = document.getElementById('devis_adresseLivraison');

    [adresseFacturationSelect, adresseLivraisonSelect].forEach(select => {
        if (!select) return;
        
        const currentValue = select.value;
        select.innerHTML = '<option value="">Sélectionner une adresse...</option>';
        
        addresses.forEach(address => {
            const option = document.createElement('option');
            option.value = address.id;
            
            // Utiliser le label de l'API ou construire à partir des données
            if (address.label) {
                option.textContent = address.label;
            } else {
                // Construire l'affichage avec vérification des champs
                let displayText = '';
                if (address.adresse && address.adresse.trim()) {
                    displayText += address.adresse.trim();
                }
                if (address.codePostal && address.codePostal.trim()) {
                    displayText += (displayText ? ', ' : '') + address.codePostal.trim();
                }
                if (address.ville && address.ville.trim()) {
                    displayText += (displayText && !address.codePostal ? ', ' : ' ') + address.ville.trim();
                }
                
                // Si aucune info, utiliser l'ID
                if (!displayText) {
                    displayText = `Adresse #${address.id}`;
                }
                
                option.textContent = displayText;
            }
            
            if (address.id == currentValue) {
                option.selected = true;
            }
            select.appendChild(option);
        });
    });
}

function syncContactAddress(contactId, adresseSelect) {
    // Utiliser les données déjà chargées plutôt qu'une nouvelle API
    if (!window.clientContacts) {
        console.log('Pas de contacts chargés');
        return;
    }
    
    // Trouver le contact sélectionné
    const selectedContact = window.clientContacts.find(contact => contact.id == contactId);
    if (!selectedContact) {
        console.log('Contact non trouvé:', contactId);
        return;
    }
    
    console.log('Contact trouvé:', selectedContact);
    
    // Si le contact a une adresse associée, la sélectionner
    if (selectedContact.adresse_id) {
        console.log('Sélection de l\'adresse:', selectedContact.adresse_id);
        adresseSelect.value = selectedContact.adresse_id;
    } else {
        console.log('Aucune adresse associée au contact');
    }
}

function clearContactsAndAddresses() {
    const selects = [
        'devis_contactFacturation',
        'devis_contactLivraison', 
        'devis_adresseFacturation',
        'devis_adresseLivraison'
    ];
    
    selects.forEach(id => {
        const select = document.getElementById(id);
        if (select) {
            select.innerHTML = '<option value="">Sélectionner...</option>';
        }
    });
}

// ==========================================
// FONCTIONS GLOBALES (appelées depuis le HTML)
// ==========================================


window.deleteElement = deleteElement;

// ==========================================
// ÉDITION DES ÉLÉMENTS
// ==========================================

async function updateElement(elementId, field, value) {
    try {
        // Normaliser les virgules en points pour les champs numériques
        if (['quantite', 'prix_unitaire_ht', 'remise_percent'].includes(field)) {
            value = String(value).replace(',', '.');
            const numValue = parseFloat(value);
            if (isNaN(numValue)) {
                console.warn(`Valeur invalide pour ${field}:`, value);
                return;
            }
            value = numValue;
        }
        
        // Mettre à jour immédiatement l'élément local pour un feedback rapide
        const elementIndex = elements.findIndex(e => e.id === elementId);
        if (elementIndex !== -1) {
            elements[elementIndex][field] = value;
            // Recalculer immédiatement le total de ligne si c'est un champ qui l'affecte
            if (['quantite', 'prix_unitaire_ht', 'remise_percent'].includes(field)) {
                recalculateLineTotal(elementId);
            }
        }
        
        const data = {};
        data[field] = value;

        const response = await fetch(`/devis/${DEVIS_ID}/element/${elementId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message);
            // En cas d'erreur, restaurer les données depuis le serveur
            await loadElements();
            return;
        }

        // Mettre à jour avec les données du serveur
        if (elementIndex !== -1 && result.element) {
            elements[elementIndex] = { ...elements[elementIndex], ...result.element };
            
            // Recalculer les totaux si c'est un champ qui affecte le prix
            if (['quantite', 'prix_unitaire_ht', 'remise_percent', 'tva_percent'].includes(field)) {
                calculateTotals();
                
                // Mettre à jour l'affichage du total de la ligne
                const totalEl = document.querySelector(`[data-element-id="${elementId}"] .total-ligne-display`);
                if (totalEl) {
                    totalEl.textContent = parseFloat(result.element.total_ligne_ht || 0).toFixed(2) + ' €';
                }
            }
        }
        
    } catch (error) {
        console.error('Erreur mise à jour élément:', error);
        showError('Impossible de mettre à jour l\'élément');
    }
}

window.updateElement = updateElement;

// ==========================================
// GESTION PANNEAU FLOTTANT
// ==========================================

function initLayoutPanel() {
    const panel = document.getElementById('layout-elements-panel');
    const openBtn = document.getElementById('open-layout-panel');
    const closeBtn = document.getElementById('close-layout-panel');
    
    if (!panel || !openBtn || !closeBtn) return;
    
    // Ouvrir le panneau
    openBtn.addEventListener('click', () => {
        panel.classList.add('show');
        openBtn.style.display = 'none';
    });
    
    // Fermer le panneau
    closeBtn.addEventListener('click', () => {
        panel.classList.remove('show');
        openBtn.style.display = 'block';
    });
    
    // Gestion du drag & drop depuis le panneau
    const layoutItems = panel.querySelectorAll('.layout-element-item[data-element-type]');
    layoutItems.forEach(item => {
        item.addEventListener('click', () => {
            const type = item.dataset.elementType;
            addElement(type);
        });
        
        item.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', item.dataset.elementType);
            e.dataTransfer.effectAllowed = 'copy';
        });
    });
    
    // Amélioration du système de drag & drop pour positionnement précis
    initPreciseDragDrop();
}

// ==========================================
// DRAG & DROP PRÉCIS
// ==========================================

function initPreciseDragDrop() {
    const container = document.getElementById('elements-container');
    if (!container) return;
    
    let dragIndicator = null;
    let targetPosition = null;
    
    // Créer l'indicateur de drop
    function createDragIndicator() {
        if (dragIndicator) return dragIndicator;
        
        dragIndicator = document.createElement('div');
        dragIndicator.className = 'drag-drop-indicator';
        dragIndicator.innerHTML = '<i class="fas fa-arrow-right me-2"></i>Déposer ici';
        return dragIndicator;
    }
    
    // Supprimer l'indicateur
    function removeDragIndicator() {
        if (dragIndicator) {
            dragIndicator.remove();
            dragIndicator = null;
        }
        targetPosition = null;
    }
    
    // Trouver la position d'insertion basée sur la position de la souris
    function findInsertPosition(e) {
        const elementItems = container.querySelectorAll('.element-item');
        const mouseY = e.clientY;
        
        // Obtenir les coordonnées du container pour calcul relatif
        const containerRect = container.getBoundingClientRect();
        console.log('findInsertPosition: mouseY =', mouseY, 'container.top =', containerRect.top, 'éléments trouvés =', elementItems.length);
        
        for (let i = 0; i < elementItems.length; i++) {
            const item = elementItems[i];
            const rect = item.getBoundingClientRect();
            const itemMiddle = rect.top + rect.height / 2;
            
            // Vérifier que l'élément est visible et dans la zone de container
            if (rect.top >= containerRect.top && mouseY < itemMiddle) {
                const targetPosition = i + 1;
                console.log('Insertion AVANT élément index:', i, 'position cible:', targetPosition);
                return { element: item, position: targetPosition, insertBefore: true };
            }
        }
        
        // Insérer à la fin
        const nextPosition = elementItems.length + 1;
        console.log('Insertion à la fin, position:', nextPosition);
        return { 
            element: elementItems[elementItems.length - 1] || null, 
            position: nextPosition, 
            insertBefore: false 
        };
    }
    
    container.addEventListener('dragover', (e) => {
        if (e.dataTransfer.types.includes('text/plain')) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy';
            
            const insertInfo = findInsertPosition(e);
            targetPosition = insertInfo.position;
            
            // Créer et positionner l'indicateur
            const indicator = createDragIndicator();
            
            if (insertInfo.insertBefore && insertInfo.element) {
                insertInfo.element.parentNode.insertBefore(indicator, insertInfo.element);
            } else if (insertInfo.element) {
                insertInfo.element.parentNode.insertBefore(indicator, insertInfo.element.nextSibling);
            } else {
                container.appendChild(indicator);
            }
        }
    });
    
    container.addEventListener('dragleave', (e) => {
        // Seulement supprimer si on sort vraiment du container
        if (!container.contains(e.relatedTarget)) {
            removeDragIndicator();
        }
    });
    
    container.addEventListener('drop', (e) => {
        const elementType = e.dataTransfer.getData('text/plain');
        console.log('Drop event déclenché:', { elementType, targetPosition });
        
        if (elementType) {
            e.preventDefault();
            
            // Sauvegarder la position AVANT de supprimer l'indicateur
            const savedPosition = targetPosition;
            removeDragIndicator();
            
            if (savedPosition !== null) {
                console.log('Appel addElementAtPosition avec position:', savedPosition);
                addElementAtPosition(elementType, savedPosition);
            } else {
                console.log('Appel addElement sans position spécifique');
                addElement(elementType);
            }
        }
    });
}

// Fonction pour mettre à jour le titre d'un élément
window.updateElementTitle = async function(elementId, newTitle) {
    try {
        const requestUrl = `/devis/${devisId}/element/${elementId}`;
        const requestBody = {titre: newTitle};
        
        const response = await fetch(requestUrl, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            // Mettre à jour l'élément dans notre array local
            const element = elements.find(e => e.id === elementId);
            if (element) {
                element.titre = newTitle;
            }
            showSuccess('Titre mis à jour');
        } else {
            throw new Error(result.message || 'Erreur lors de la mise à jour');
        }
        
    } catch (error) {
        console.error('Erreur mise à jour titre:', error);
        showError('Erreur lors de la mise à jour du titre: ' + error.message);
        // Recharger pour annuler le changement
        await loadElements();
    }
};

// Fonction pour ajouter un élément à une position spécifique
async function addElementAtPosition(type, position) {
    console.log('addElementAtPosition appelé avec:', { type, position });
    try {
        const requestBody = {
            type: type,
            position: position
        };
        console.log('Envoi de la requête avec:', requestBody);
        
        const response = await fetch(`/devis/${devisId}/element`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            // Recharger tous les éléments pour afficher avec la bonne position
            await loadElements();
            calculateTotals();
            showSuccess('Élément ajouté avec succès');
        } else {
            throw new Error(result.message || 'Erreur lors de l\'ajout');
        }
        
    } catch (error) {
        console.error('Erreur ajout élément:', error);
        showError('Erreur lors de l\'ajout de l\'élément: ' + error.message);
    }
}

// ==========================================
// FONCTIONS UTILITAIRES
// ==========================================

function showProductCatalog() {
    // TODO: Implémenter le catalogue de produits
    console.log('Catalogue de produits à implémenter');
}

// ==========================================
// AUTOCOMPLÉTION PRODUITS
// ==========================================

function initProductAutocomplete() {
    // Nettoyer les attributs d'initialisation existants
    document.querySelectorAll('[data-autocomplete-initialized]').forEach(input => {
        input.removeAttribute('data-autocomplete-initialized');
    });
    
    // Supprimer les anciens conteneurs de suggestions
    document.querySelectorAll('.product-suggestions').forEach(container => {
        container.remove();
    });

    // Autocomplétion sur les champs code article
    document.querySelectorAll('.code-article-input').forEach(input => {
        setupProductAutocomplete(input, 'reference');
    });

    // Autocomplétion sur les champs désignation
    document.querySelectorAll('.designation-input').forEach(input => {
        setupProductAutocomplete(input, 'designation');
    });
}

function setupProductAutocomplete(input, searchField) {
    if (input.hasAttribute('data-autocomplete-initialized')) {
        return;
    }
    input.setAttribute('data-autocomplete-initialized', 'true');

    let timeoutId = null;
    let currentSuggestions = [];

    // Créer le conteneur des suggestions
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'product-suggestions';
    suggestionsContainer.style.display = 'none';
    input.parentNode.style.position = 'relative';
    input.parentNode.appendChild(suggestionsContainer);

    input.addEventListener('input', function() {
        const query = this.value.trim();
        
        // Nettoyer le timeout précédent
        if (timeoutId) {
            clearTimeout(timeoutId);
        }

        if (query.length < 2) {
            hideSuggestions();
            return;
        }

        // Attendre 300ms avant de chercher
        timeoutId = setTimeout(() => {
            searchProducts(query, searchField).then(products => {
                showSuggestions(products, input);
            });
        }, 300);
    });

    input.addEventListener('blur', function() {
        // Laisser un délai pour permettre le clic sur les suggestions
        setTimeout(() => hideSuggestions(), 200);
    });

    input.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            navigateSuggestions('down');
        } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            navigateSuggestions('up');
        } else if (e.key === 'Enter') {
            e.preventDefault();
            selectCurrentSuggestion();
        } else if (e.key === 'Escape') {
            hideSuggestions();
        }
    });

    function showSuggestions(products, inputElement) {
        currentSuggestions = products;
        
        if (products.length === 0) {
            hideSuggestions();
            return;
        }

        suggestionsContainer.innerHTML = products.map((product, index) => `
            <div class="product-suggestion ${index === 0 ? 'active' : ''}" data-index="${index}">
                <div class="product-reference">${product.reference}</div>
                <div class="product-designation">${product.designation}</div>
                <div class="product-price">${parseFloat(product.prixVenteHt || 0).toFixed(2)} €</div>
            </div>
        `).join('');

        // Ajouter les event listeners
        suggestionsContainer.querySelectorAll('.product-suggestion').forEach(suggestionEl => {
            suggestionEl.addEventListener('click', function() {
                const index = parseInt(this.dataset.index);
                selectProduct(products[index], inputElement);
            });
        });

        suggestionsContainer.style.display = 'block';
    }

    function hideSuggestions() {
        suggestionsContainer.style.display = 'none';
        currentSuggestions = [];
    }

    function navigateSuggestions(direction) {
        const active = suggestionsContainer.querySelector('.product-suggestion.active');
        if (!active) return;

        active.classList.remove('active');
        
        let next;
        if (direction === 'down') {
            next = active.nextElementSibling || suggestionsContainer.firstElementChild;
        } else {
            next = active.previousElementSibling || suggestionsContainer.lastElementChild;
        }
        
        if (next) {
            next.classList.add('active');
        }
    }

    function selectCurrentSuggestion() {
        const active = suggestionsContainer.querySelector('.product-suggestion.active');
        if (active && currentSuggestions.length > 0) {
            const index = parseInt(active.dataset.index);
            selectProduct(currentSuggestions[index], input);
        }
    }
}

async function searchProducts(query, field) {
    try {
        const response = await fetch(`/produit/search?q=${encodeURIComponent(query)}&field=${field}&limit=10`);
        const data = await response.json();
        return data.products || [];
    } catch (error) {
        console.error('Erreur recherche produits:', error);
        return [];
    }
}

function selectProduct(product, inputElement) {
    const elementId = inputElement.dataset.elementId;
    
    // Mettre à jour l'élément avec toutes les données du produit
    updateElementWithProduct(elementId, product);
    
    // Masquer les suggestions
    const suggestionsContainer = inputElement.parentNode.querySelector('.product-suggestions');
    if (suggestionsContainer) {
        suggestionsContainer.style.display = 'none';
    }
}

async function updateElementWithProduct(elementId, product) {
    try {
        // Mise à jour immédiate des champs visuels
        updateElementFields(elementId, product);
        
        const data = {
            produit_id: product.id,
            designation: product.designation,
            description: product.description || '',
            prix_unitaire_ht: product.prixVenteHt,
            tva_percent: product.tauxTva || 20,
            produit_reference: product.reference,
            quantite: 1 // Quantité par défaut
        };

        const response = await fetch(`/devis/${DEVIS_ID}/element/${elementId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        
        if (result.success) {
            calculateTotals();
        } else {
            console.error('Erreur API:', result.message);
            // En cas d'erreur, recharger pour récupérer l'état correct
            await loadElements();
        }
        
    } catch (error) {
        console.error('Erreur mise à jour produit:', error);
        // En cas d'erreur réseau, recharger pour récupérer l'état correct
        await loadElements();
    }
}

function updateElementFields(elementId, product) {
    // Trouver l'élément dans le DOM
    const elementDiv = document.querySelector(`[data-element-id="${elementId}"]`);
    if (!elementDiv) return;
    
    // Mettre à jour le champ code
    const codeInput = elementDiv.querySelector('.code-article-input');
    if (codeInput) {
        codeInput.value = product.reference || '';
    }
    
    // Mettre à jour le champ désignation
    const designationInput = elementDiv.querySelector('.designation-input');
    if (designationInput) {
        designationInput.value = product.designation || '';
    }
    
    // Mettre à jour le champ description
    const descriptionInput = elementDiv.querySelector('.description-input');
    if (descriptionInput) {
        descriptionInput.value = product.description || '';
    }
    
    // Mettre à jour le prix unitaire
    const prixInput = elementDiv.querySelector('.price-input');
    if (prixInput) {
        prixInput.value = parseFloat(product.prixVenteHt || 0).toFixed(2);
    }
    
    // Mettre à jour le taux de TVA si le champ existe
    const tvaSelect = elementDiv.querySelector('.tva-select');
    if (tvaSelect) {
        const tvaValue = parseFloat(product.tauxTva || 20);
        tvaSelect.value = tvaValue;
    }
    
    // Recalculer le total de la ligne
    recalculateLineTotal(elementId);
}

function recalculateLineTotal(elementId) {
    const elementDiv = document.querySelector(`[data-element-id="${elementId}"]`);
    if (!elementDiv) return;
    
    // Récupérer les valeurs et normaliser les virgules en points
    const quantiteValue = (elementDiv.querySelector('.quantity-input')?.value || '1').replace(',', '.');
    const prixUnitaireValue = (elementDiv.querySelector('.price-input')?.value || '0').replace(',', '.');
    const remiseValue = (elementDiv.querySelector('.remise-input')?.value || '0').replace(',', '.');
    
    const quantite = parseFloat(quantiteValue) || 1;
    const prixUnitaire = parseFloat(prixUnitaireValue) || 0;
    const remise = parseFloat(remiseValue) || 0;
    
    // Calculer le total de ligne HT
    const totalLigne = quantite * prixUnitaire * (1 - Math.min(remise, 100) / 100);
    
    // Mettre à jour l'affichage du total
    const totalElement = elementDiv.querySelector('.total-ligne-display');
    if (totalElement) {
        totalElement.textContent = totalLigne.toFixed(2) + ' €';
    }
    
    // Mettre à jour les données locales de l'élément
    const elementIndex = elements.findIndex(e => e.id == elementId);
    if (elementIndex !== -1) {
        elements[elementIndex].quantite = quantite;
        elements[elementIndex].prix_unitaire_ht = prixUnitaire;
        elements[elementIndex].remise_percent = Math.min(remise, 100);
        elements[elementIndex].total_ligne_ht = totalLigne;
    }
    
    // Déclencher le recalcul des totaux généraux
    calculateTotals();
}

// ==========================================
// UTILITAIRES
// ==========================================

function showSuccess(message) {
    // Ne pas afficher d'alert pour les ajouts d'éléments
    if (!message.includes('ajouté avec succès')) {
        console.log('✓ ' + message);
    }
}

function showError(message) {
    console.error('✗ ' + message);
    // Seulement afficher les erreurs importantes
    if (message.includes('Impossible de charger') || message.includes('Erreur lors du chargement')) {
        alert('✗ ' + message);
    }
}

// ==========================================
// INITIALISATION AU CHARGEMENT
// ==========================================

document.addEventListener('DOMContentLoaded', function() {
    init();
});

// Variables globales pour l'éditeur WYSIWYG
let currentEditingElementId = null;
let quillEditor = null;

// Fonction pour afficher tooltip sur champ description simple
window.showDescriptionTooltip = function(input) {
    // Créer ou mettre à jour le tooltip
    if (!input.hasAttribute('data-bs-toggle')) {
        input.setAttribute('data-bs-toggle', 'tooltip');
        input.setAttribute('data-bs-placement', 'top');
        input.setAttribute('title', 'Saisie simple sur une ligne. Utilisez le bouton 🎨 pour le formatage avancé (gras, couleurs, listes...)');
        
        // Initialiser le tooltip Bootstrap
        new bootstrap.Tooltip(input);
    }
};

// Fonction pour convertir HTML en texte simple pour l'input inline
function cleanDescriptionForInput(html) {
    if (!html) return '';
    
    // Créer un élément temporaire pour parser le HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Convertir en texte simple (supprime tout le HTML)
    return tempDiv.textContent || tempDiv.innerText || '';
}

// Fonction pour nettoyer le HTML généré par Quill
function cleanQuillHTML(html) {
    if (!html || html.trim() === '') return '';
    
    // Approche plus simple : nettoyer les attributs problématiques directement
    let cleaned = html
        // Supprimer les styles oklch et autres couleurs complexes
        .replace(/style="[^"]*oklch[^"]*"/gi, '')
        .replace(/style="[^"]*rgb\([^)]*\)[^"]*"/gi, '')
        .replace(/style="[^"]*background-color:[^;"]*oklch[^;"]*[^"]*"/gi, '')
        // Nettoyer les styles vides
        .replace(/style="[\s]*"/gi, '')
        // Normaliser les espaces multiples en un seul espace
        .replace(/\s+/g, ' ')
        // Garder les balises HTML de base mais supprimer les attributs complexes
        .replace(/<span[^>]*>/gi, '<span>')
        .replace(/<p[^>]*>/gi, '<p>')
        // Nettoyer les espaces autour des balises MAIS garder les espaces entre les mots
        .replace(/>\s+</g, '><')  // Supprimer espaces entre balises
        .replace(/>\s+([^<])/g, '> $1')  // Garder UN espace après balise fermante et contenu
        .replace(/([^>])\s+</g, '$1 <')  // Garder UN espace avant balise ouvrante et contenu
        .trim();
    
    return cleaned;
}

// Fonction pour ouvrir l'éditeur de description
window.openDescriptionEditor = function(elementId, currentDescription) {
    // Déterminer la taille de la modale selon l'écran
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    
    // Taille adaptative : plus petite sur petits écrans
    let modalWidth = '80%';
    let modalHeight = '600px';
    
    if (screenWidth < 992) { // Écrans moyens/petits (< 992px)
        modalWidth = '95%';
        modalHeight = '500px';
    }
    if (screenWidth < 768) { // Écrans mobiles
        modalWidth = '98%';
        modalHeight = '450px';
    }
    
    currentEditingElementId = elementId;
    
    // Initialiser Quill si pas déjà fait
    if (!quillEditor) {
        initQuillEditor();
    }
    
    // Afficher la modale
    const modalElement = document.getElementById('description-editor-modal');
    const modal = new bootstrap.Modal(modalElement);
    
    // Appliquer la taille adaptative
    const modalDialog = modalElement.querySelector('.modal-dialog');
    modalDialog.style.width = modalWidth;
    modalDialog.style.maxWidth = modalWidth;
    modalDialog.querySelector('#description-editor').style.height = modalHeight.replace('px', '') * 0.6 + 'px';
    
    // Rendre la modale redimensionnable
    makeModalResizable(modalElement);
    
    modal.show();
    
    // Définir le contenu dans l'éditeur après affichage de la modale
    setTimeout(() => {
        if (quillEditor) {
            // Convertir les balises HTML basiques en contenu Quill
            const content = currentDescription || '<p>Saisissez votre description ici...</p>';
            quillEditor.root.innerHTML = content;
        }
    }, 200);
};

// Fonction pour rendre une modale redimensionnable
function makeModalResizable(modalElement) {
    const modalContent = modalElement.querySelector('.modal-content');
    const modalDialog = modalElement.querySelector('.modal-dialog');
    
    // Ajouter la classe resizable et le handle de redimensionnement
    modalDialog.classList.add('modal-resizable');
    
    // Créer le handle de redimensionnement s'il n'existe pas
    let resizeHandle = modalContent.querySelector('.modal-resize-handle');
    if (!resizeHandle) {
        resizeHandle = document.createElement('div');
        resizeHandle.className = 'modal-resize-handle';
        modalContent.appendChild(resizeHandle);
    }
    
    let isResizing = false;
    let startX, startY, startWidth, startHeight;
    
    resizeHandle.addEventListener('mousedown', function(e) {
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        
        const computedStyle = window.getComputedStyle(modalDialog);
        startWidth = parseInt(computedStyle.width, 10);
        startHeight = parseInt(computedStyle.height, 10);
        
        document.addEventListener('mousemove', resize);
        document.addEventListener('mouseup', stopResize);
        e.preventDefault();
    });
    
    function resize(e) {
        if (!isResizing) return;
        
        const width = startWidth + (e.clientX - startX);
        const height = startHeight + (e.clientY - startY);
        
        // Largeurs minimales selon la taille d'écran
        const screenWidth = window.innerWidth;
        let minWidth = 400;
        if (screenWidth < 992) minWidth = 350;
        if (screenWidth < 768) minWidth = 300;
        
        const minHeight = 300;
        const maxWidth = window.innerWidth * 0.95;
        const maxHeight = window.innerHeight * 0.9;
        
        if (width >= minWidth && width <= maxWidth) {
            modalDialog.style.width = width + 'px';
            modalDialog.style.maxWidth = width + 'px';
        }
        
        if (height >= minHeight && height <= maxHeight) {
            modalDialog.style.height = height + 'px';
            // Ajuster la hauteur de l'éditeur proportionnellement
            const editor = modalElement.querySelector('#description-editor');
            if (editor) {
                editor.style.height = (height * 0.6) + 'px';
            }
        }
    }
    
    function stopResize() {
        isResizing = false;
        document.removeEventListener('mousemove', resize);
        document.removeEventListener('mouseup', stopResize);
    }
}

// Initialiser Quill Editor
function initQuillEditor() {
    
    // Configuration des polices personnalisées avec labels
    const Font = Quill.import('formats/font');
    Font.whitelist = ['arial', 'helvetica', 'times', 'georgia', 'verdana', 'courier'];
    Quill.register(Font, true);
    
    // Configuration des tailles personnalisées
    const Size = Quill.import('formats/size');
    Size.whitelist = ['10px', '12px', '14px', '16px', '18px', '20px', '22px', '24px'];
    Quill.register(Size, true);
    
    // Créer la toolbar personnalisée avec des options nommées
    const toolbarOptions = {
        container: '#description-toolbar'
    };
    
    // Créer la toolbar HTML personnalisée
    document.getElementById('description-editor').insertAdjacentHTML('beforebegin', `
        <div id="description-toolbar">
            <select class="ql-font">
                <option value="">Police par défaut</option>
                <option value="arial">Arial</option>
                <option value="helvetica">Helvetica</option>
                <option value="times">Times New Roman</option>
                <option value="georgia">Georgia</option>
                <option value="verdana">Verdana</option>
                <option value="courier">Courier New</option>
            </select>
            <select class="ql-size">
                <option value="">Taille normale</option>
                <option value="10px">10px</option>
                <option value="12px">12px</option>
                <option value="14px">14px</option>
                <option value="16px">16px</option>
                <option value="18px">18px</option>
                <option value="20px">20px</option>
                <option value="22px">22px</option>
                <option value="24px">24px</option>
            </select>
            <button class="ql-bold"></button>
            <button class="ql-italic"></button>
            <button class="ql-underline"></button>
            <button class="ql-strike"></button>
            <button class="ql-header" value="1"></button>
            <button class="ql-header" value="2"></button>
            <button class="ql-list" value="ordered"></button>
            <button class="ql-list" value="bullet"></button>
            <button class="ql-indent" value="-1"></button>
            <button class="ql-indent" value="+1"></button>
            <select class="ql-color"></select>
            <select class="ql-background"></select>
            <select class="ql-align"></select>
            <button class="ql-link"></button>
            <button class="ql-clean"></button>
        </div>
    `);
    
    quillEditor = new Quill('#description-editor', {
        theme: 'snow',
        placeholder: 'Saisissez ici la description détaillée...',
        modules: {
            toolbar: toolbarOptions
        }
    });
    
    // Forcer la largeur des menus après initialisation
    setTimeout(() => {
        const fontPicker = document.querySelector('#description-toolbar .ql-font .ql-picker');
        const sizePicker = document.querySelector('#description-toolbar .ql-size .ql-picker');
        
        if (fontPicker) {
            fontPicker.style.width = '180px';
            fontPicker.style.minWidth = '180px';
            fontPicker.style.maxWidth = '180px';
        }
        
        if (sizePicker) {
            sizePicker.style.width = '140px';
            sizePicker.style.minWidth = '140px';
            sizePicker.style.maxWidth = '140px';
        }
    }, 200);
    
}

// Gestionnaire de sauvegarde de la description
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('save-description-btn').addEventListener('click', async function() {
        console.log('💾 Sauvegarde description...');
        
        if (!currentEditingElementId) {
            console.error('❌ Aucun élément en cours d\'édition');
            return;
        }
        
        // Récupérer le contenu de l'éditeur Quill
        let description = '';
        if (quillEditor) {
            description = quillEditor.root.innerHTML;
            // Nettoyer le contenu vide par défaut
            if (description === '<p><br></p>' || description === '<p>Saisissez votre description ici...</p>') {
                description = '';
            } else if (description.trim()) {
                // Nettoyer et simplifier le HTML
                description = cleanQuillHTML(description);
            }
        }
        
        
        try {
            // Sauvegarder via updateElement
            await updateElement(currentEditingElementId, 'description', description);
            
            // Fermer la modale
            const modal = bootstrap.Modal.getInstance(document.getElementById('description-editor-modal'));
            if (modal) {
                modal.hide();
            }
            
            // Recharger les éléments pour afficher la nouvelle description
            await loadElements();
            
            showSuccess('Description mise à jour avec succès');
            
        } catch (error) {
            console.error('❌ Erreur sauvegarde description:', error);
            showError('Erreur lors de la sauvegarde: ' + error.message);
        }
    });
});

})(); // Fin de la fonction IIFE
</script>

<style>
.sortable-ghost {
    opacity: 0.4;
}

.sortable-chosen {
    background-color: #e3f2fd !important;
}

.drag-handle {
    width: 20px;
}

.element-item {
    transition: all 0.2s;
}

.element-item:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Panneau flottant pour éléments de mise en forme */
.layout-panel {
    position: fixed;
    top: 50%;
    right: -300px;
    transform: translateY(-50%);
    width: 280px;
    background: #343a40;
    color: white;
    border-radius: 8px 0 0 8px;
    box-shadow: -2px 0 10px rgba(0,0,0,0.3);
    z-index: 1050;
    transition: right 0.3s ease;
}

.layout-panel.show {
    right: 0;
}

.layout-panel-header {
    background: #495057;
    padding: 1rem;
    border-radius: 8px 0 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.layout-panel-body {
    padding: 1rem;
}

.layout-element-item {
    background: #495057;
    border: 1px solid #6c757d;
    border-radius: 4px;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    cursor: grab;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.layout-element-item:hover {
    background: #5a6268;
    transform: translateX(-2px);
}

.layout-element-item:active {
    cursor: grabbing;
}


/* Indicateur de drag & drop */
.drag-drop-indicator {
    padding: 8px 16px;
    margin: 4px 0;
    background: linear-gradient(135deg, #4caf50, #45a049);
    color: white;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.9;
    box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
    animation: pulse-green 1.5s infinite;
}

@keyframes pulse-green {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); }
    100% { transform: scale(1); }
}

.layout-panel-toggle {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    z-index: 1040;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    transition: all 0.3s ease;
}

.layout-panel-toggle:hover {
    transform: translateY(-50%) scale(1.1);
}

/* Autocomplétion produits */
.product-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: auto;
    min-width: 450px; /* Largeur minimale fixe pour plus de lisibilité */
    width: max-content; /* S'adapte au contenu */
    max-width: 600px; /* Limite maximale */
    background: white;
    border: 1px solid #dee2e6;
    border-top: none;
    border-radius: 0 0 4px 4px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15); /* Ombre plus marquée */
    max-height: 300px; /* Plus haute pour plus de suggestions */
    overflow-y: auto;
    z-index: 1060;
}

.product-suggestion {
    padding: 0.75rem; /* Padding augmenté */
    border-bottom: 1px solid #f1f3f4;
    cursor: pointer;
    display: grid;
    grid-template-columns: 120px 1fr 100px; /* Colonnes plus larges */
    gap: 0.75rem; /* Espace augmenté */
    align-items: center;
    font-size: 0.9rem; /* Police légèrement plus grande */
    user-select: none; /* Empêche la sélection de texte */
}

/* Assurer que tous les enfants héritent du cursor pointer */
.product-suggestion * {
    cursor: pointer;
    pointer-events: none; /* Empêche les événements sur les enfants, force sur le parent */
}

.product-suggestion:first-child {
    border-top: none;
}

.product-suggestion:hover,
.product-suggestion.active {
    background-color: #f8f9fa;
}

.product-reference {
    font-weight: 600;
    color: #6f42c1;
}

/* Modale WYSIWYG redimensionnable */
.modal-resizable {
    resize: both;
    min-width: 400px;
    min-height: 300px;
}

.modal-resize-handle {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 20px;
    height: 20px;
    background: linear-gradient(-45deg, transparent 0%, transparent 40%, #aaa 40%, #aaa 60%, transparent 60%);
    cursor: nw-resize;
    z-index: 1000;
}

.modal-resize-handle:hover {
    background: linear-gradient(-45deg, transparent 0%, transparent 40%, #666 40%, #666 60%, transparent 60%);
}

/* Amélioration responsive de la modale */
@media (max-width: 991px) {
    .modal-resizable {
        min-width: 350px;
        min-height: 250px;
    }
}

@media (max-width: 767px) {
    .modal-resizable {
        min-width: 300px;
        min-height: 200px;
    }
}

.product-designation {
    color: #495057;
}

.product-price {
    font-weight: 600;
    color: #28a745;
    text-align: right;
}
</style>

{% endblock %}

{% endblock %}