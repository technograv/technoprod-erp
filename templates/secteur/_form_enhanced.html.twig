{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <style>
        .zone-selector {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 10px;
        }
        .zone-item {
            cursor: pointer;
            padding: 8px 12px;
            margin: 2px 0;
            border-radius: 4px;
            border: 1px solid transparent;
            transition: all 0.2s;
        }
        .zone-item:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
        }
        .zone-item.selected {
            background-color: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }
        .search-box {
            position: sticky;
            top: 0;
            background: white;
            z-index: 10;
            padding-bottom: 10px;
        }
        .transfer-buttons {
            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: 10px;
            padding: 20px 10px;
        }
        .zone-badge {
            display: inline-block;
            background: #e9ecef;
            padding: 4px 8px;
            border-radius: 12px;
            margin: 2px;
            font-size: 0.875rem;
        }
        .zone-code {
            font-weight: bold;
            color: #495057;
        }
    </style>
{% endblock %}

{{ form_start(form, {'attr': {'id': 'secteur-form'}}) }}

<div class="row">
    <!-- Informations de base -->
    <div class="col-12 mb-4">
        <div class="card">
            <div class="card-header">
                <h5>Informations du secteur</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        {{ form_row(form.nomSecteur, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    <div class="col-md-6">
                        {{ form_row(form.commercial, {'attr': {'class': 'form-select'}}) }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        {{ form_row(form.couleurHex, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <div class="form-check">
                            {{ form_widget(form.isActive, {'attr': {'class': 'form-check-input'}}) }}
                            {{ form_label(form.isActive, null, {'label_attr': {'class': 'form-check-label'}}) }}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sélection des zones -->
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Zones géographiques</h5>
                <p class="text-muted mb-0">Sélectionnez les zones à assigner à ce secteur</p>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Liste des zones disponibles -->
                    <div class="col-md-5">
                        <h6>Zones disponibles</h6>
                        <div class="search-box">
                            <input type="text" id="zone-search" class="form-control" placeholder="Rechercher par code postal ou ville...">
                            <div class="mt-2">
                                <label class="form-label text-muted" style="font-size: 0.875rem;">Ou rechercher une commune française :</label>
                                <select id="commune-search" class="form-select" style="width: 100%;">
                                    <option value="">Tapez pour rechercher une commune...</option>
                                </select>
                                <small class="text-muted">Sélectionnez une commune pour créer automatiquement une zone</small>
                            </div>
                        </div>
                        <div id="available-zones" class="zone-selector">
                            <!-- Les zones seront chargées ici via JavaScript -->
                        </div>
                    </div>

                    <!-- Boutons de transfert -->
                    <div class="col-md-2">
                        <div class="transfer-buttons">
                            <button type="button" id="add-zones" class="btn btn-primary btn-sm" disabled>
                                <i class="fas fa-arrow-right"></i> Ajouter
                            </button>
                            <button type="button" id="remove-zones" class="btn btn-outline-secondary btn-sm" disabled>
                                <i class="fas fa-arrow-left"></i> Retirer
                            </button>
                        </div>
                    </div>

                    <!-- Liste des zones sélectionnées -->
                    <div class="col-md-5">
                        <h6>Zones du secteur <span id="selected-count" class="badge bg-primary">0</span></h6>
                        <div id="selected-zones" class="zone-selector">
                            <p class="text-muted text-center" id="no-zones-message">Aucune zone sélectionnée</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Le champ zones caché pour Symfony -->
{{ form_widget(form.zones, {'attr': {'style': 'display: none;'}}) }}

<div class="mt-3">
    <button type="submit" class="btn btn-success">{{ button_label|default('Enregistrer') }}</button>
    <a href="{{ path('app_secteur_index') }}" class="btn btn-secondary">Annuler</a>
</div>

{{ form_end(form) }}

{% block javascripts %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialiser Select2 pour la recherche de communes
    $('#commune-search').select2({
        theme: 'bootstrap-5',
        placeholder: 'Tapez pour rechercher une commune...',
        allowClear: true,
        minimumInputLength: 2,
        ajax: {
            url: '{{ path("app_secteur_commune_search") }}',
            dataType: 'json',
            delay: 300,
            data: function (params) {
                return {
                    q: params.term
                };
            },
            processResults: function (data) {
                return {
                    results: data
                };
            }
        }
    });
    
    // Gestionnaire de sélection de commune
    $('#commune-search').on('select2:select', async function (e) {
        const selectedCommune = e.params.data;
        
        try {
            // Créer une zone à partir de la commune sélectionnée
            const response = await fetch('{{ path("app_secteur_create_zone_from_commune") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commune_id: selectedCommune.id
                })
            });
            
            const result = await response.json();
            
            if (response.ok) {
                if (result.already_exists) {
                    alert('Une zone existe déjà pour cette commune et sera ajoutée à la liste.');
                } else if (result.created) {
                    alert('Nouvelle zone créée avec succès pour : ' + selectedCommune.text);
                }
                
                // Recharger les zones disponibles
                await loadZones();
                
                // Vider la sélection
                $('#commune-search').val(null).trigger('change');
                
            } else {
                alert('Erreur lors de la création de la zone : ' + (result.error || 'Erreur inconnue'));
            }
        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la création de la zone.');
        }
    });
    const availableZonesContainer = document.getElementById('available-zones');
    const selectedZonesContainer = document.getElementById('selected-zones');
    const searchInput = document.getElementById('zone-search');
    const addButton = document.getElementById('add-zones');
    const removeButton = document.getElementById('remove-zones');
    const selectedCountBadge = document.getElementById('selected-count');
    const noZonesMessage = document.getElementById('no-zones-message');
    const zonesSelect = document.querySelector('#{{ form.zones.vars.id }}');
    
    let availableZones = [];
    let selectedZones = [];
    let filteredZones = [];

    // Charger les zones depuis le serveur
    async function loadZones() {
        try {
            const response = await fetch('{{ path("app_secteur_zones_list") }}');
            const zones = await response.json();
            
            // Trier par code postal
            zones.sort((a, b) => a.codePostal.localeCompare(b.codePostal));
            
            availableZones = zones;
            
            // Charger les zones déjà sélectionnées
            const selectedOptions = Array.from(zonesSelect.selectedOptions);
            selectedZones = zones.filter(zone => 
                selectedOptions.some(option => option.value == zone.id)
            );
            
            renderZones();
            updateSelectedZones();
        } catch (error) {
            console.error('Erreur lors du chargement des zones:', error);
        }
    }

    // Filtrer les zones disponibles
    function filterZones() {
        const searchTerm = searchInput.value.toLowerCase();
        filteredZones = availableZones.filter(zone => 
            !selectedZones.some(selected => selected.id === zone.id) &&
            (zone.codePostal.toLowerCase().includes(searchTerm) ||
             zone.ville.toLowerCase().includes(searchTerm) ||
             (zone.departement && zone.departement.toLowerCase().includes(searchTerm)))
        );
        renderAvailableZones();
    }

    // Afficher les zones disponibles
    function renderAvailableZones() {
        availableZonesContainer.innerHTML = '';
        
        filteredZones.forEach(zone => {
            const div = document.createElement('div');
            div.className = 'zone-item';
            div.dataset.zoneId = zone.id;
            div.innerHTML = `
                <span class="zone-code">${zone.codePostal}</span>
                <strong>${zone.ville}</strong>
                ${zone.departement ? `<br><small class="text-muted">${zone.departement}</small>` : ''}
            `;
            
            div.addEventListener('click', function() {
                this.classList.toggle('selected');
                updateTransferButtons();
            });
            
            availableZonesContainer.appendChild(div);
        });
    }

    // Afficher les zones sélectionnées
    function renderSelectedZones() {
        selectedZonesContainer.innerHTML = '';
        
        if (selectedZones.length === 0) {
            noZonesMessage.style.display = 'block';
        } else {
            noZonesMessage.style.display = 'none';
            
            selectedZones.forEach(zone => {
                const div = document.createElement('div');
                div.className = 'zone-item';
                div.dataset.zoneId = zone.id;
                div.innerHTML = `
                    <span class="zone-code">${zone.codePostal}</span>
                    <strong>${zone.ville}</strong>
                    ${zone.departement ? `<br><small class="text-muted">${zone.departement}</small>` : ''}
                `;
                
                div.addEventListener('click', function() {
                    this.classList.toggle('selected');
                    updateTransferButtons();
                });
                
                selectedZonesContainer.appendChild(div);
            });
        }
        
        selectedCountBadge.textContent = selectedZones.length;
    }

    // Mettre à jour les zones
    function renderZones() {
        filterZones();
        renderSelectedZones();
    }

    // Mettre à jour les boutons de transfert
    function updateTransferButtons() {
        const selectedAvailable = availableZonesContainer.querySelectorAll('.zone-item.selected');
        const selectedInSector = selectedZonesContainer.querySelectorAll('.zone-item.selected');
        
        addButton.disabled = selectedAvailable.length === 0;
        removeButton.disabled = selectedInSector.length === 0;
    }

    // Mettre à jour le champ Symfony
    function updateSelectedZones() {
        // Vider les options sélectionnées
        Array.from(zonesSelect.options).forEach(option => {
            option.selected = false;
        });
        
        // Sélectionner les zones choisies
        selectedZones.forEach(zone => {
            const option = zonesSelect.querySelector(`option[value="${zone.id}"]`);
            if (option) {
                option.selected = true;
            }
        });
    }

    // Ajouter des zones
    addButton.addEventListener('click', function() {
        const selectedItems = availableZonesContainer.querySelectorAll('.zone-item.selected');
        
        selectedItems.forEach(item => {
            const zoneId = parseInt(item.dataset.zoneId);
            const zone = availableZones.find(z => z.id === zoneId);
            
            if (zone && !selectedZones.some(z => z.id === zoneId)) {
                selectedZones.push(zone);
            }
            
            item.classList.remove('selected');
        });
        
        renderZones();
        updateSelectedZones();
        updateTransferButtons();
    });

    // Retirer des zones
    removeButton.addEventListener('click', function() {
        const selectedItems = selectedZonesContainer.querySelectorAll('.zone-item.selected');
        
        selectedItems.forEach(item => {
            const zoneId = parseInt(item.dataset.zoneId);
            selectedZones = selectedZones.filter(z => z.id !== zoneId);
        });
        
        renderZones();
        updateSelectedZones();
        updateTransferButtons();
    });

    // Recherche
    searchInput.addEventListener('input', filterZones);

    // Initialiser
    loadZones();
});
</script>
{% endblock %}