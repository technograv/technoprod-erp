{# Template pour le chargement AJAX - pas d'extension de base #}
<div class="admin-section">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="section-title mb-0">
            <i class="fas fa-building me-2"></i>Gestion des Sociétés
        </h3>
        {% if is_societe_mere %}
        <button class="btn btn-primary" onclick="ouvrirModalSociete()">
            <i class="fas fa-plus me-2"></i>Nouvelle Société
        </button>
        {% endif %}
    </div>

    {% if is_societe_mere %}
        <div class="alert alert-info mb-4">
            <i class="fas fa-info-circle me-2"></i>
            <strong>Société Mère :</strong> Vous pouvez gérer toutes les sociétés du groupe depuis cette interface.
        </div>
    {% else %}
        <div class="alert alert-warning mb-4">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong>Société Fille :</strong> Vous ne pouvez consulter que les informations de votre société.
        </div>
    {% endif %}

    <div class="table-responsive">
        <table class="table table-hover" id="societesTable">
            <thead class="table-dark">
                <tr>
                    <th width="3%" title="Glisser pour réorganiser"><i class="fas fa-grip-vertical"></i></th>
                    <th>Société</th>
                    <th>Type</th>
                    <th>Contact</th>
                    <th>Adresse</th>
                    <th>SIRET</th>
                    <th>Couleurs</th>
                    <th>Statut</th>
                    {% if is_societe_mere %}
                    <th>Actions</th>
                    {% endif %}
                </tr>
            </thead>
            <tbody>
                {% for societe in societes %}
                <tr data-id="{{ societe.id }}" class="{{ societe.active ? '' : 'table-warning' }} sortable-row">
                    <td class="text-center drag-handle" style="cursor: grab;">
                        <i class="fas fa-grip-vertical text-muted"></i>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="me-3">
                                <i class="fas fa-{{ societe.mere ? 'crown' : 'building' }} fa-2x text-{{ societe.mere ? 'warning' : 'primary' }}"></i>
                            </div>
                            <div>
                                <strong>{{ societe.nom }}</strong>
                                {% if societe.fille and societe.societeParent %}
                                    <br><small class="text-muted">Filiale de {{ societe.societeParent.nom }}</small>
                                {% endif %}
                                {% if not societe.active %}
                                    <br><small class="text-danger">Société désactivée</small>
                                {% endif %}
                            </div>
                        </div>
                    </td>
                    <td>
                        <span class="badge bg-{{ societe.mere ? 'warning' : 'info' }}">
                            <i class="fas fa-{{ societe.mere ? 'crown' : 'building' }} me-1"></i>
                            {{ societe.mere ? 'Société Mère' : 'Société Fille' }}
                        </span>
                    </td>
                    <td>
                        {% if societe.telephone %}
                            <div><i class="fas fa-phone me-1"></i>
                                <a href="tel:{{ societe.telephoneForCall }}" class="text-decoration-none">
                                    {{ societe.telephoneFormatted }}
                                </a>
                            </div>
                        {% endif %}
                        {% if societe.email %}
                            <div><i class="fas fa-envelope me-1"></i>
                                <a href="mailto:{{ societe.email }}" class="text-decoration-none">
                                    {{ societe.email }}
                                </a>
                            </div>
                        {% endif %}
                    </td>
                    <td>
                        {% if societe.adresse %}
                            <div>{{ societe.adresse }}</div>
                        {% endif %}
                        {% if societe.codePostal or societe.ville %}
                            <div>{{ societe.codePostal }} {{ societe.ville }}</div>
                        {% endif %}
                    </td>
                    <td>
                        {% if societe.siret %}
                            <code>{{ societe.siret }}</code>
                        {% else %}
                            <span class="text-muted">Non renseigné</span>
                        {% endif %}
                    </td>
                    <td>
                        {% if societe.couleurPrimaire %}
                            <div class="d-flex align-items-center">
                                <div class="me-2" style="width: 20px; height: 20px; border-radius: 50%; background-color: {{ societe.couleurPrimaire }}; border: 1px solid #ddd;"></div>
                                <small>{{ societe.couleurPrimaire }}</small>
                            </div>
                        {% endif %}
                        {% if societe.couleurSecondaire %}
                            <div class="d-flex align-items-center mt-1">
                                <div class="me-2" style="width: 20px; height: 20px; border-radius: 50%; background-color: {{ societe.couleurSecondaire }}; border: 1px solid #ddd;"></div>
                                <small>{{ societe.couleurSecondaire }}</small>
                            </div>
                        {% endif %}
                        {% if not societe.couleurPrimaire and not societe.couleurSecondaire %}
                            <span class="text-muted small">Couleurs par défaut</span>
                        {% endif %}
                    </td>
                    <td>
                        {% if is_societe_mere %}
                        <div class="form-check form-switch">
                            <input class="form-check-input status-toggle" type="checkbox" 
                                   data-societe-id="{{ societe.id }}" {{ societe.active ? 'checked' : '' }}>
                            <label class="form-check-label">
                                {{ societe.active ? 'Active' : 'Inactive' }}
                            </label>
                        </div>
                        {% else %}
                        <span class="badge bg-{{ societe.active ? 'success' : 'danger' }}">
                            {{ societe.active ? 'Active' : 'Inactive' }}
                        </span>
                        {% endif %}
                    </td>
                    {% if is_societe_mere %}
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-info" title="Voir détails"
                                    onclick="voirSocieteModal({{ societe.id }})">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-outline-primary" title="Modifier"
                                    onclick="modifierSocieteModal({{ societe.id }})">
                                <i class="fas fa-edit"></i>
                            </button>
                            {% if not societe.mere %}
                            <button class="btn btn-outline-danger" title="Supprimer"
                                    onclick="supprimerSociete({{ societe.id }}, '{{ societe.nom|e('html_attr') }}')">
                                <i class="fas fa-trash"></i>
                            </button>
                            {% endif %}
                        </div>
                    </td>
                    {% endif %}
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

{% if is_societe_mere %}
<!-- Modal Création/Modification Société -->
<div class="modal fade" id="societeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="societeModalLabel">
                    <i class="fas fa-building me-2"></i>
                    <span id="modal-title-text">Nouvelle Société</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="societeForm">
                    <input type="hidden" id="societe-id">
                    
                    <div class="row">
                        <div class="col-md-8 mb-3">
                            <label for="societe-nom" class="form-label">Nom de la société *</label>
                            <input type="text" class="form-control" id="societe-nom" required>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="societe-type" class="form-label">Type</label>
                            <select class="form-select" id="societe-type" onchange="toggleSocieteParente()">
                                <option value="fille">Société Fille</option>
                                <option value="mere">Société Mère</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3" id="societe-parente-container">
                            <label for="societe-parente" class="form-label">Société Mère</label>
                            <select class="form-select" id="societe-parente">
                                <option value="">Sélectionner une société mère...</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="societe-adresse" class="form-label">Adresse</label>
                            <input type="text" class="form-control" id="societe-adresse">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 mb-3 position-relative">
                            <label for="societe-code-postal" class="form-label">Code Postal</label>
                            <input type="text" class="form-control commune-autocomplete" id="societe-code-postal" data-type="code_postal">
                        </div>
                        <div class="col-md-8 mb-3 position-relative">
                            <label for="societe-ville" class="form-label">Ville</label>
                            <input type="text" class="form-control commune-autocomplete" id="societe-ville" data-type="nom">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="societe-telephone" class="form-label">Téléphone</label>
                            <input type="text" class="form-control phone-input" id="societe-telephone">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="societe-email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="societe-email">
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="societe-siret" class="form-label">SIRET</label>
                            <input type="text" class="form-control" id="societe-siret">
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="societe-active" checked>
                                <label class="form-check-label" for="societe-active">
                                    Société active
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="societe-couleur-primaire" class="form-label">Couleur Primaire</label>
                            <input type="color" class="form-control form-control-color" id="societe-couleur-primaire">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="societe-couleur-secondaire" class="form-label">Couleur Secondaire</label>
                            <input type="color" class="form-control form-control-color" id="societe-couleur-secondaire">
                        </div>
                    </div>
                    
                    
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="save-societe">
                    <i class="fas fa-save me-2"></i>Enregistrer
                </button>
            </div>
        </div>
    </div>
</div>
{% endif %}

<!-- Styles pour l'autocomplétion -->
<style>
.commune-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 1070;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.commune-suggestion {
    padding: 8px 12px;
    cursor: pointer;
    border-bottom: 1px solid #eee;
}

.commune-suggestion:last-child {
    border-bottom: none;
}

.commune-suggestion:hover,
.commune-suggestion.selected {
    background-color: #007bff;
    color: white;
}

.commune-suggestion strong {
    font-weight: bold;
}
</style>


<script>
document.addEventListener('DOMContentLoaded', function() {
    {% if is_societe_mere %}
    const societeModal = new bootstrap.Modal(document.getElementById('societeModal'));
    

    // Toggle statut société
    document.querySelectorAll('.status-toggle').forEach(function(toggle) {
        toggle.addEventListener('change', function() {
            const societeId = this.dataset.societeId;
            const isActive = this.checked;
            
            fetch(`/admin/societes/${societeId}/toggle`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const row = document.querySelector(`tr[data-id="${societeId}"]`);
                    const label = this.nextElementSibling;
                    
                    if (data.isActive) {
                        row.classList.remove('table-warning');
                        label.textContent = 'Active';
                        showNotification(data.message, 'success');
                    } else {
                        row.classList.add('table-warning');
                        label.textContent = 'Inactive';
                        showNotification(data.message, 'warning');
                    }
                } else {
                    // Annuler le changement en cas d'erreur
                    this.checked = !this.checked;
                    showNotification('Erreur lors de la modification du statut', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                this.checked = !this.checked;
                showNotification('Erreur de connexion', 'error');
            });
        });
    });

    {% else %}
    console.log('⚠️ ATTENTION: Utilisateur pas société mère - fonctions limitées');
    {% endif %}
});


{% if is_societe_mere %}
function ouvrirModalSociete() {
    console.log('🔍 DEBUG: ouvrirModalSociete appelée');
    
    // Réinitialiser le formulaire
    document.getElementById('societeForm').reset();
    document.getElementById('societe-id').value = '';
    document.getElementById('modal-title-text').textContent = 'Nouvelle Société';
    document.getElementById('societe-active').checked = true;
    
    // Charger les sociétés mères et initialiser l'affichage
    loadSocietesMeres().then(() => {
        // Par défaut, société fille sélectionnée
        document.getElementById('societe-type').value = 'fille';
        toggleSocieteParente();
    });
    
    const modal = new bootstrap.Modal(document.getElementById('societeModal'));
    modal.show();
    
    console.log('🔍 DEBUG: Modal affiché, recherche du bouton save-societe...');
    
    // Initialiser après ouverture du modal
    setTimeout(() => {
        setupCommuneAutocomplete();
        initPhoneFormatting();
        
        // Test du bouton dans le modal ouvert
        const saveButtonInModal = document.getElementById('save-societe');
        console.log('🔍 DEBUG: Bouton save-societe dans modal ouvert:', saveButtonInModal);
        
        if (saveButtonInModal) {
            console.log('🔍 DEBUG: Bouton trouvé dans modal, ajout du vrai event listener...');
            // Supprimer ancien event listener s'il existe
            saveButtonInModal.removeEventListener('click', handleSaveSociete);
            // Ajouter le vrai event listener
            saveButtonInModal.addEventListener('click', handleSaveSociete);
            console.log('🔍 DEBUG: Vrai event listener ajouté');
        }
    }, 500); // Plus de délai pour être sûr que le modal est complètement ouvert
}

function handleSaveSociete(e) {
    console.log('🔍 DEBUG: *** FONCTION SAVE RÉELLE APPELÉE ***');
    e.preventDefault();
    e.stopPropagation();
    
    const societeId = document.getElementById('societe-id').value;
    const isEdit = societeId && societeId !== '';
    
    console.log('🔍 DEBUG: Mode édition:', isEdit, 'ID:', societeId);
    
    // Validation côté client
    const nom = document.getElementById('societe-nom').value.trim();
    if (!nom) {
        showNotification('Le nom de la société est obligatoire', 'error');
        return;
    }
    
    const data = {
        nom: nom,
        type: document.getElementById('societe-type').value,
        societeParentId: document.getElementById('societe-parente').value || null,
        adresse: document.getElementById('societe-adresse').value.trim(),
        codePostal: document.getElementById('societe-code-postal').value.trim(),
        ville: document.getElementById('societe-ville').value.trim(),
        telephone: document.getElementById('societe-telephone').value.trim(),
        email: document.getElementById('societe-email').value.trim(),
        siret: document.getElementById('societe-siret').value.trim(),
        couleurPrimaire: document.getElementById('societe-couleur-primaire').value || null,
        couleurSecondaire: document.getElementById('societe-couleur-secondaire').value || null,
        active: document.getElementById('societe-active').checked
    };
    
    console.log('🔍 DEBUG: Données à envoyer:', data);
    
    const url = isEdit ? `/admin/societes/${societeId}` : '/admin/societes';
    const method = isEdit ? 'PUT' : 'POST';
    
    console.log('🔍 DEBUG: URL:', url, 'Method:', method);
    
    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        console.log('🔍 DEBUG: Response status:', response.status);
        console.log('🔍 DEBUG: Response URL:', response.url);
        
        // Vérifier si on a été redirigé vers login
        if (response.url && response.url.includes('/login')) {
            throw new Error('Session expirée - vous devez vous reconnecter');
        }
        
        if (!response.ok) {
            // Pour les erreurs 500, essayer de récupérer plus de détails
            if (response.status === 500) {
                return response.text().then(text => {
                    console.log('🔍 DEBUG: Erreur 500 détaillée:', text.substring(0, 1000));
                    throw new Error(`Erreur serveur 500: ${text.length > 100 ? text.substring(0, 100) + '...' : text}`);
                });
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('🔍 DEBUG: Response data:', data);
        if (data.success) {
            showNotification(data.message, 'success');
            // Fermer le modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('societeModal'));
            if (modal) {
                modal.hide();
            }
            // Recharger la page après un court délai
            setTimeout(() => rechargerOngletSocietes(), 1000);
        } else {
            showNotification(data.error || 'Erreur lors de la sauvegarde', 'error');
        }
    })
    .catch(error => {
        console.error('❌ Erreur:', error);
        showNotification('Erreur de communication avec le serveur: ' + error.message, 'error');
    });
}

function voirSocieteModal(societeId) {
    fetch(`/admin/societes/${societeId}`)
        .then(response => response.json())
        .then(data => {
            remplirFormulaireSociete(data, true); // readonly - data contient directement les propriétés
            document.getElementById('modal-title-text').textContent = 'Détails de la société';
            
            const modal = new bootstrap.Modal(document.getElementById('societeModal'));
            modal.show();
        })
        .catch(error => {
            console.error('Erreur:', error);
            showNotification('Erreur lors du chargement des données', 'error');
        });
}

function modifierSocieteModal(societeId) {
    fetch(`/admin/societes/${societeId}`)
        .then(response => response.json())
        .then(data => {
            remplirFormulaireSociete(data, false); // editable - data contient directement les propriétés
            document.getElementById('modal-title-text').textContent = 'Modifier la société';
            
            const modal = new bootstrap.Modal(document.getElementById('societeModal'));
            modal.show();
                
                // Initialiser après ouverture du modal
                setTimeout(() => {
                    setupCommuneAutocomplete();
                    initPhoneFormatting();
                    
                    // Ajouter event listener au bouton
                    const saveButtonInModal = document.getElementById('save-societe');
                    if (saveButtonInModal) {
                        console.log('🔍 DEBUG: Ajout event listener pour modification...');
                        saveButtonInModal.removeEventListener('click', handleSaveSociete);
                        saveButtonInModal.addEventListener('click', handleSaveSociete);
                    }
                }, 500);
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showNotification('Erreur lors du chargement des données', 'error');
        });
}

function remplirFormulaireSociete(societe, readonly = false) {
    document.getElementById('societe-id').value = societe.id;
    document.getElementById('societe-nom').value = societe.nom || '';
    document.getElementById('societe-type').value = societe.type || 'fille';
    document.getElementById('societe-parente').value = societe.parentId || '';
    document.getElementById('societe-adresse').value = societe.adresse || '';
    document.getElementById('societe-code-postal').value = societe.codePostal || '';
    document.getElementById('societe-ville').value = societe.ville || '';
    document.getElementById('societe-telephone').value = societe.telephone || '';
    document.getElementById('societe-email').value = societe.email || '';
    document.getElementById('societe-siret').value = societe.siret || '';
    document.getElementById('societe-couleur-primaire').value = societe.couleurPrimaire || '#dc3545';
    document.getElementById('societe-couleur-secondaire').value = societe.couleurSecondaire || '#6c757d';
    
    // Charger les sociétés mères et appliquer la logique d'affichage
    loadSocietesMeres().then(() => {
        // Après chargement, remplir la valeur et gérer l'affichage
        document.getElementById('societe-parente').value = societe.parentId || '';
        toggleSocieteParente();
    });
    document.getElementById('societe-active').checked = societe.active;
    
    // Mode readonly
    const formElements = document.querySelectorAll('#societeForm input, #societeForm select');
    formElements.forEach(element => {
        element.readOnly = readonly;
        element.disabled = readonly;
    });
    
    document.getElementById('save-societe').style.display = readonly ? 'none' : 'block';
}

function supprimerSociete(societeId, societeNom) {
    if (!confirm(`Êtes-vous sûr de vouloir supprimer la société "${societeNom}" ?\n\nCette action est irréversible.`)) {
        return;
    }
    
    fetch(`/admin/societes/${societeId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification(data.message, 'success');
            setTimeout(() => rechargerOngletSocietes(), 1000);
        } else {
            showNotification(data.error || 'Erreur lors de la suppression', 'error');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur de communication avec le serveur', 'error');
    });
}

// Fonction pour recharger seulement l'onglet Sociétés sans rechargement complet  
function rechargerOngletSocietes() {
    try {
        // Essayer d'abord de rester dans le contexte admin dashboard
        if (window.top !== window && window.top.document.querySelector('#societes-content')) {
            // Nous sommes dans le contexte admin, recharger via le dashboard
            const adminWindow = window.top;
            const societesTab = adminWindow.document.querySelector('a[href="#societes-content"]');
            
            if (societesTab) {
                // Simuler un clic sur l'onglet sociétés pour le recharger
                societesTab.click();
                console.log('✅ Rechargement via onglet sociétés du dashboard');
                return;
            }
        }
        
        // Méthode alternative : recharger seulement le tableau local
        fetch('{{ path('app_admin_societes') }}')
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newTableContainer = doc.querySelector('.table-responsive');
                const currentTableContainer = document.querySelector('.table-responsive');
                
                if (newTableContainer && currentTableContainer) {
                    currentTableContainer.innerHTML = newTableContainer.innerHTML;
                    console.log('✅ Tableau des sociétés rechargé avec succès');
                } else {
                    console.warn('⚠️ Fallback: rechargement complet');
                    location.reload();
                }
            })
            .catch(error => {
                console.error('❌ Erreur lors du rechargement:', error);
                location.reload();
            });
            
    } catch (error) {
        console.error('❌ Erreur dans rechargerOngletSocietes:', error);
        location.reload();
    }
}

// Fonction d'initialisation globale pour les sociétés
window.initSocietes = function() {
    console.log('🏢 Initializing Societes module');
    // Réinitialiser l'autocomplétion des communes
    setupCommuneAutocomplete();
    // Réinitialiser les autres fonctionnalités si nécessaire
};

{% endif %}

// Fonction d'autocomplétion des communes françaises
function setupCommuneAutocomplete() {
    // Pour chaque champ d'autocomplétion
    document.querySelectorAll('.commune-autocomplete').forEach(function(input) {
        // Supprimer les anciens événements
        input.removeEventListener('input', handleCommuneInput);
        input.removeEventListener('focus', handleCommuneInput);
        input.removeEventListener('keydown', handleCommuneKeydown);
        
        // Ajouter les nouveaux événements
        input.addEventListener('input', handleCommuneInput);
        input.addEventListener('focus', handleCommuneInput);
        input.addEventListener('keydown', handleCommuneKeydown);
    });
}

function handleCommuneInput(e) {
    const input = e.target;
    const inputType = input.dataset.type;
    const query = input.value.trim();
    
    // Supprimer la liste existante
    const existingList = input.parentNode.querySelector('.commune-suggestions');
    if (existingList) {
        existingList.remove();
    }
    
    if (query.length < 2) return;
    
    // Débounce
    clearTimeout(input.searchTimeout);
    input.searchTimeout = setTimeout(() => {
        searchCommunes(input, query, inputType);
    }, 300);
}

function handleCommuneKeydown(e) {
    const input = e.target;
    const suggestionsList = input.parentNode.querySelector('.commune-suggestions');
    
    if (!suggestionsList) return;
    
    const suggestions = suggestionsList.querySelectorAll('.commune-suggestion');
    let selected = suggestionsList.querySelector('.commune-suggestion.selected');
    
    switch(e.key) {
        case 'ArrowDown':
            e.preventDefault();
            if (selected) {
                selected.classList.remove('selected');
                selected = selected.nextElementSibling || suggestions[0];
            } else {
                selected = suggestions[0];
            }
            selected?.classList.add('selected');
            selected?.scrollIntoView({ block: 'nearest' });
            break;
            
        case 'ArrowUp':
            e.preventDefault();
            if (selected) {
                selected.classList.remove('selected');
                selected = selected.previousElementSibling || suggestions[suggestions.length - 1];
            } else {
                selected = suggestions[suggestions.length - 1];
            }
            selected?.classList.add('selected');
            selected?.scrollIntoView({ block: 'nearest' });
            break;
            
        case 'Enter':
            e.preventDefault();
            if (selected) {
                selectCommune(selected, input);
            }
            break;
            
        case 'Escape':
            suggestionsList.remove();
            break;
    }
}

function searchCommunes(input, query, inputType) {
    const url = `{{ path('api_communes_search') }}?q=${encodeURIComponent(query)}&type=${inputType}`;
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            // L'API renvoie directement un tableau de communes
            showCommuneSuggestions(input, Array.isArray(data) ? data : []);
        })
        .catch(error => {
            console.error('Erreur recherche communes:', error);
        });
}

function showCommuneSuggestions(input, communes) {
    const suggestionsList = document.createElement('div');
    suggestionsList.className = 'commune-suggestions';
    
    if (communes.length === 0) {
        suggestionsList.innerHTML = '<div class="commune-suggestion">Aucune commune trouvée</div>';
    } else {
        communes.forEach(commune => {
            const suggestion = document.createElement('div');
            suggestion.className = 'commune-suggestion';
            suggestion.innerHTML = `<strong>${commune.codePostal}</strong> ${commune.nomCommune}`;
            
            // Stocker les données de la commune
            suggestion.dataset.codePostal = commune.codePostal;
            suggestion.dataset.nomCommune = commune.nomCommune;
            
            suggestion.addEventListener('mouseenter', () => {
                document.querySelectorAll('.commune-suggestion.selected').forEach(s => s.classList.remove('selected'));
                suggestion.classList.add('selected');
            });
            
            suggestion.addEventListener('click', () => {
                selectCommune(suggestion, input);
            });
            
            suggestionsList.appendChild(suggestion);
        });
    }
    
    input.parentNode.appendChild(suggestionsList);
}

function selectCommune(suggestion, input) {
    const codePostal = suggestion.dataset.codePostal;
    const nomCommune = suggestion.dataset.nomCommune;
    const inputType = input.dataset.type;
    
    // Remplir le champ actuel
    if (inputType === 'code_postal') {
        input.value = codePostal;
        // Remplir automatiquement le champ ville correspondant
        const villeField = document.getElementById('societe-ville');
        if (villeField) {
            villeField.value = nomCommune;
        }
    } else if (inputType === 'nom') {
        input.value = nomCommune;
        // Remplir automatiquement le champ code postal correspondant
        const codePostalField = document.getElementById('societe-code-postal');
        if (codePostalField) {
            codePostalField.value = codePostal;
        }
    }
    
    // Supprimer la liste de suggestions
    const suggestionsList = input.parentNode.querySelector('.commune-suggestions');
    if (suggestionsList) {
        suggestionsList.remove();
    }
    
    // Fermer toutes les autres listes de suggestions
    document.querySelectorAll('.commune-suggestions').forEach(list => list.remove());
}

// Fonction pour formater automatiquement les numéros de téléphone
function initPhoneFormatting() {
    const phoneInputs = document.querySelectorAll('.phone-input, .mobile-input');
    
    phoneInputs.forEach(input => {
        input.addEventListener('input', function(e) {
            formatPhoneNumber(e.target);
        });
        
        input.addEventListener('blur', function(e) {
            validatePhoneNumber(e.target);
        });
    });
}

function formatPhoneNumber(input) {
    let value = input.value.replace(/[^\d+]/g, '');
    
    if (value.startsWith('+33') || value.startsWith('0033')) {
        if (value.startsWith('+33')) {
            value = value.substring(3);
        } else if (value.startsWith('0033')) {
            value = value.substring(4);
        }
        
        if (value.length > 0) {
            value = '+33 ' + value.charAt(0) + (value.length > 1 ? ' ' + value.substring(1).match(/.{1,2}/g)?.join(' ') || value.substring(1) : '');
        } else {
            value = '+33';
        }
    } else {
        if (value.startsWith('0')) {
            value = value.substring(0, 10);
            value = value.replace(/(\d{2})(?=\d)/g, '$1 ');
        }
    }
    
    input.value = value.trim();
}

function validatePhoneNumber(input) {
    const value = input.value.trim();
    if (value && !input.checkValidity()) {
        input.classList.add('is-invalid');
        
        let helpText = input.parentNode.querySelector('.phone-help');
        if (!helpText) {
            helpText = document.createElement('small');
            helpText.className = 'phone-help text-danger';
            input.parentNode.appendChild(helpText);
        }
        
        if (input.classList.contains('mobile-input')) {
            helpText.textContent = 'Format attendu: 06 12 34 56 78 ou +33 6 12 34 56 78';
        } else {
            helpText.textContent = 'Format attendu: 05 61 23 45 67 ou +33 5 61 23 45 67';
        }
    } else {
        input.classList.remove('is-invalid');
        const helpText = input.parentNode.querySelector('.phone-help');
        if (helpText) {
            helpText.remove();
        }
    }
}

function showNotification(message, type = 'info') {
    const alertClass = type === 'success' ? 'alert-success' : 
                      type === 'error' ? 'alert-danger' : 
                      type === 'warning' ? 'alert-warning' : 'alert-info';
    
    const notification = document.createElement('div');
    notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// =============== SYSTÈME DRAG & DROP POUR RÉORGANISATION ===============

// CSS pour le drag & drop
const dragDropStyles = `
<style>
.sortable-row.dragging {
    opacity: 0.5;
    background-color: #e3f2fd !important;
}

.sortable-row.drag-over {
    border-top: 3px solid #007bff;
}

.drag-handle:hover {
    background-color: #f8f9fa;
    cursor: grab !important;
}

.drag-handle:active {
    cursor: grabbing !important;
}

.sortable-table tbody {
    position: relative;
}

.drop-zone {
    height: 3px;
    background-color: #007bff;
    margin: 2px 0;
    border-radius: 2px;
}
</style>
`;

// Injecter les styles CSS
document.head.insertAdjacentHTML('beforeend', dragDropStyles);

// Initialiser le drag & drop
function initDragDrop() {
    const tbody = document.querySelector('#societesTable tbody');
    if (!tbody) return;
    
    let draggedElement = null;
    let draggedOverElement = null;
    
    // Ajouter les event listeners pour chaque ligne
    const rows = tbody.querySelectorAll('.sortable-row');
    rows.forEach((row, index) => {
        // Rendre la ligne draggable
        row.setAttribute('draggable', 'true');
        
        // Ajouter l'ordre actuel comme data attribute
        row.setAttribute('data-order', index);
        
        // Event listeners pour le drag & drop
        row.addEventListener('dragstart', handleDragStart);
        row.addEventListener('dragenter', handleDragEnter);
        row.addEventListener('dragover', handleDragOver);
        row.addEventListener('dragleave', handleDragLeave);
        row.addEventListener('drop', handleDrop);
        row.addEventListener('dragend', handleDragEnd);
    });
}

function handleDragStart(e) {
    draggedElement = this;
    this.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.outerHTML);
}

function handleDragEnter(e) {
    e.preventDefault();
    this.classList.add('drag-over');
    draggedOverElement = this;
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    return false;
}

function handleDragLeave(e) {
    if (!this.contains(e.relatedTarget)) {
        this.classList.remove('drag-over');
    }
}

function handleDrop(e) {
    e.preventDefault();
    
    if (this !== draggedElement) {
        // Déterminer la position d'insertion
        const rect = this.getBoundingClientRect();
        const midpoint = rect.top + rect.height / 2;
        
        if (e.clientY < midpoint) {
            // Insérer avant cet élément
            this.parentNode.insertBefore(draggedElement, this);
        } else {
            // Insérer après cet élément
            this.parentNode.insertBefore(draggedElement, this.nextSibling);
        }
        
        // Sauvegarder le nouvel ordre
        saveNewOrder();
    }
    
    return false;
}

function handleDragEnd(e) {
    // Nettoyer les classes CSS
    const rows = document.querySelectorAll('.sortable-row');
    rows.forEach(row => {
        row.classList.remove('dragging', 'drag-over');
    });
    
    draggedElement = null;
    draggedOverElement = null;
}

function saveNewOrder() {
    const rows = document.querySelectorAll('#societesTable tbody .sortable-row');
    const societesOrder = [];
    
    rows.forEach((row) => {
        const societeId = row.getAttribute('data-id');
        if (societeId) {
            societesOrder.push(parseInt(societeId));
        }
    });
    
    if (societesOrder.length === 0) {
        return;
    }
    
    // Envoyer l'ordre au serveur
    fetch('{{ path('app_admin_societes_reorder') }}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            societes: societesOrder
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Ordre des sociétés mis à jour avec succès', 'success');
            // Mettre à jour les attributs data-order
            const rows = document.querySelectorAll('#societesTable tbody .sortable-row');
            rows.forEach((row, index) => {
                row.setAttribute('data-order', index);
            });
        } else {
            showNotification('Erreur lors de la mise à jour de l\'ordre', 'error');
            // Recharger en cas d'erreur pour restaurer l'ordre correct
            setTimeout(() => rechargerOngletSocietes(), 1000);
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        showNotification('Erreur de communication avec le serveur', 'error');
        setTimeout(() => rechargerOngletSocietes(), 1000);
    });
}

// Initialiser le drag & drop au chargement et après rechargement
document.addEventListener('DOMContentLoaded', initDragDrop);

// Réinitialiser après rechargement de contenu
window.initSocietes = function() {
    console.log('🏢 Initializing Societes module');
    setupCommuneAutocomplete();
    initDragDrop();
    loadSocietesMeres();
};

// Fonction pour charger les sociétés mères dans le dropdown
function loadSocietesMeres() {
    return fetch('/admin/societes')
        .then(response => response.text())
        .then(html => {
            // Parser pour extraire les sociétés mères
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const rows = doc.querySelectorAll('#societesTable tbody tr');
            
            const societeParenteSelect = document.getElementById('societe-parente');
            if (!societeParenteSelect) return;
            
            // Vider et remplir le select
            societeParenteSelect.innerHTML = '<option value="">Sélectionner une société mère...</option>';
            
            rows.forEach(row => {
                const societeId = row.getAttribute('data-id');
                const typeBadge = row.querySelector('.badge');
                
                if (typeBadge && typeBadge.textContent.includes('Société Mère')) {
                    const nomElement = row.querySelector('td:nth-child(2) strong');
                    if (nomElement && societeId) {
                        const nom = nomElement.textContent.trim();
                        const option = document.createElement('option');
                        option.value = societeId;
                        option.textContent = nom;
                        societeParenteSelect.appendChild(option);
                    }
                }
            });
        })
        .catch(error => {
            console.error('Erreur lors du chargement des sociétés mères:', error);
        });
}

// Fonction pour afficher/masquer le champ société parente
function toggleSocieteParente() {
    const typeSelect = document.getElementById('societe-type');
    const parenteContainer = document.getElementById('societe-parente-container');
    const parenteSelect = document.getElementById('societe-parente');
    
    if (!typeSelect || !parenteContainer || !parenteSelect) return;
    
    if (typeSelect.value === 'fille') {
        parenteContainer.style.display = 'block';
        parenteSelect.setAttribute('required', 'required');
        // Recharger la liste des sociétés mères disponibles
        loadSocietesMeres();
    } else {
        parenteContainer.style.display = 'none';
        parenteSelect.removeAttribute('required');
        parenteSelect.value = '';
    }
}

</script>

{# Fin du template AJAX #}